{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Alqudimi Technology Portfolio Website\n\n## Overview\n\nThis is a full-stack professional portfolio website for software developer عبدالعزيز محمد القديمي (Abdulaziz Mohammed Alqudimi). The project showcases programming services, projects, CV information, and provides contact functionality. Built with a modern tech stack, it features a bilingual interface (Arabic/English), sound effects, theme switching, and a comprehensive admin panel for content management.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development practices\n- **Styling**: Tailwind CSS with shadcn/ui component library for consistent, professional UI components\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Forms**: React Hook Form with Zod validation for robust form handling\n- **UI Components**: Radix UI primitives through shadcn/ui for accessible, customizable components\n- **Theming**: Custom theme provider supporting dark/light modes with CSS variables\n- **Sound System**: Custom sound manager for interactive audio feedback\n- **Internationalization**: Bilingual support (Arabic RTL/English LTR) built into component structure\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript for API development\n- **Database ORM**: Drizzle ORM for type-safe database operations and schema management\n- **Authentication**: JWT-based authentication with bcrypt for password hashing\n- **Session Management**: Express sessions with PostgreSQL session store\n- **API Design**: RESTful API with comprehensive CRUD operations for all content types\n- **Error Handling**: Centralized error handling middleware with proper HTTP status codes\n- **Middleware**: Request logging, CORS handling, and body parsing\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL with Neon serverless hosting\n- **Schema Management**: Drizzle Kit for database migrations and schema evolution\n- **Data Modeling**: Comprehensive schema covering services, projects, CV data, contact info, messages, and site settings\n- **Relationships**: Properly normalized database with foreign key constraints\n- **Connection Pooling**: Neon serverless connection pooling for optimal performance\n\n### Authentication and Authorization\n- **Admin Authentication**: JWT token-based system for admin panel access\n- **Password Security**: bcrypt hashing with salt rounds for secure password storage\n- **Session Management**: Stateless JWT approach with token validation middleware\n- **Route Protection**: Protected admin routes with authentication middleware\n- **Local Storage**: Client-side token storage with automatic auth state management\n\n### Content Management System\n- **Admin Panel**: Full-featured dashboard for managing all website content\n- **CRUD Operations**: Complete create, read, update, delete functionality for all entities\n- **Form Validation**: Comprehensive validation using Zod schemas on both client and server\n- **Media Management**: Image URL handling and validation for project galleries\n- **Ordering System**: Drag-and-drop ordering for services, projects, and CV items\n- **Status Management**: Active/inactive toggles for content visibility control\n\n### Performance and User Experience\n- **Code Splitting**: Vite-based build system with automatic code splitting\n- **Lazy Loading**: Component-level lazy loading for optimal bundle sizes\n- **Caching Strategy**: React Query caching with intelligent invalidation\n- **Responsive Design**: Mobile-first responsive design with breakpoint optimization\n- **Loading States**: Comprehensive loading and error states throughout the application\n- **Smooth Animations**: CSS transitions and animations for enhanced user experience\n- **Accessibility**: ARIA-compliant components with keyboard navigation support\n\n### Development Workflow\n- **Build System**: Vite for fast development and optimized production builds\n- **Type Safety**: Full TypeScript coverage across frontend and backend\n- **Development Server**: Hot module replacement and live reloading\n- **Path Aliases**: Clean import statements with @ and @shared aliases\n- **Environment Management**: Separate development and production configurations\n\n## External Dependencies\n\n### Database and Hosting\n- **Neon Database**: Serverless PostgreSQL database with connection pooling\n- **WebSocket Support**: Real-time capabilities through Neon's serverless architecture\n\n### UI Component Libraries\n- **Radix UI**: Comprehensive set of accessible, unstyled UI primitives\n- **shadcn/ui**: Pre-built component library based on Radix UI with Tailwind styling\n- **Lucide React**: Modern icon library with consistent styling\n\n### Form and Validation\n- **React Hook Form**: Performant form library with minimal re-renders\n- **Zod**: TypeScript-first schema validation for forms and API validation\n- **@hookform/resolvers**: Integration between React Hook Form and Zod\n\n### Styling and Theming\n- **Tailwind CSS**: Utility-first CSS framework for rapid UI development\n- **class-variance-authority**: Component variant system for consistent styling\n- **clsx**: Utility for constructing className strings conditionally\n\n### Development Tools\n- **Vite**: Fast build tool with excellent development experience\n- **TypeScript**: Static type checking for improved code quality\n- **ESBuild**: Fast JavaScript bundler for production builds\n\n### Fonts and Icons\n- **Google Fonts**: Inter (English) and Tajawal (Arabic) for optimal typography\n- **Font Awesome**: Comprehensive icon library for UI elements\n\n### Authentication and Security\n- **jsonwebtoken**: JWT implementation for secure authentication\n- **bcrypt**: Password hashing library for secure credential storage\n\n### Database Integration\n- **Drizzle ORM**: Modern TypeScript ORM with excellent developer experience\n- **Drizzle Kit**: Database migration and introspection tools\n- **pg**: PostgreSQL client library for Node.js","size_bytes":6105},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/Alqudimi Technology Website_1757105145143.md":{"content":"# Prompt احترافي ومفصل لإنشاء موقع ويب شخصي للخدمات البرمجية\n\n**المؤلف:** Manus AI\n\n## 1. نظرة عامة على المشروع\n\nيهدف هذا المشروع إلى بناء موقع ويب شخصي احترافي ومتكامل للمبرمج عبدالعزيز محمد القديمي، ليكون بمثابة واجهة عرض لخدماته البرمجية، ومشاريعة السابقة، وسيرته الذاتية، بالإضافة إلى توفير قنوات تواصل فعالة مع العملاء. يجب أن يكون الموقع مبنياً بالكامل باستخدام إطار عمل Django، مع التركيز على الأداء العالي، الأمان الفائق، وقابلية التوسع السهلة. التصميم يجب أن يكون عصرياً، جذاباً، ومريحاً للمستخدم، مع دمج عناصر بصرية وصوتية متقدمة لتقديم تجربة مستخدم فريدة ومبهرة.\n\n## 2. الأهداف الرئيسية للموقع\n\n*   **عرض الخدمات البرمجية:** تقديم شامل لجميع الخدمات البرمجية التي يقدمها المبرمج، والتي تغطي جميع مجالات البرمجة من تطبيقات ومواقع وخدمات، بما في ذلك الذكاء الاصطناعي، بدون استثناء أو ترك أي مجال.\n*   **عرض المشاريع السابقة:** استعراض تفصيلي للمشاريع التي تم إنجازها، مع إمكانية إضافة وتعديل المشاريع بسهولة عبر لوحة تحكم الإدارة.\n*   **عرض السيرة الذاتية:** تقديم سيرة ذاتية احترافية للمبرمج، مع إمكانية تحديثها وإضافة معلومات جديدة من خلال لوحة تحكم الإدارة.\n*   **تسهيل التواصل مع العملاء:** توفير قنوات اتصال متعددة ومرنة للعملاء المحتملين والحاليين، مع إمكانية إدارة هذه القنوات عبر لوحة تحكم الإدارة.\n*   **بناء هوية بصرية قوية:** تصميم موقع يعكس الاحترافية والإبداع، مع استخدام شعار مميز وألوان جذابة وتفاعلات بصرية وصوتية متقدمة.\n\n## 3. المتطلبات التقنية الأساسية\n\n### 3.1. إطار العمل (Framework)\n\nيجب بناء الموقع بالكامل باستخدام إطار عمل **Django** (Python). يجب أن يكون التطوير شاملاً ومتكاملاً، ويغطي جميع الجوانب الخلفية (Backend) والأمامية (Frontend) التي يمكن أن يوفرها Django أو يتكامل معها بشكل فعال.\n\n### 3.2. لوحة تحكم الإدارة (Admin Panel)\n\nتعتبر لوحة تحكم الإدارة جزءاً حيوياً من المشروع، ويجب أن تكون شاملة وسهلة الاستخدام، وتوفر للمبرمج القدرة على إدارة جميع محتويات الموقع بشكل كامل دون الحاجة إلى تعديل الكود. تشمل المتطلبات:\n\n*   **إدارة المشاريع:** إضافة، تعديل، حذف، وعرض المشاريع. يجب أن تتضمن حقولاً لعنوان المشروع، وصفه، التقنيات المستخدمة، صور/فيديوهات توضيحية، وروابط للمشروع (إذا وجدت).\n*   **إدارة السيرة الذاتية:** تحديث جميع أقسام السيرة الذاتية (المعلومات الشخصية، الملخص الاحترافي، التعليم، الخبرات، المهارات، المشاريع، الجوائز، المنشورات، إلخ).\n*   **إدارة معلومات التواصل:** إضافة، تعديل، وحذف عناوين البريد الإلكتروني، أرقام الهواتف، وروابط وسائل التواصل الاجتماعي (مثل انستغرام، لينكدإن، تويتر، فيسبوك، جيت هاب، إلخ). يجب أن تكون مرنة بما يكفي لدعم إضافة أنواع جديدة من قنوات التواصل في المستقبل.\n*   **إدارة المحتوى الإضافي:** إذا تم تضمين مدونة، أو قسم للأسئلة الشائعة، أو شهادات العملاء، أو أي ميزات إضافية، فيجب أن تكون قابلة للإدارة بالكامل من خلال لوحة تحكم الإدارة.\n*   **إدارة إعدادات الموقع:** التحكم في إعدادات التصميم (مثل الألوان، الخطوط)، إعدادات الصوت والأنيميشن، خيارات الوضع المظلم/الساطع، وإعدادات الإشعارات.\n\n### 3.3. الأداء وقابلية التوسع والأمان\n\n*   **الأداء:** يجب أن يكون الموقع سريع الاستجابة ويتحمل الضغط العالي. يتطلب ذلك تحسينات على مستوى الكود، استخدام قواعد بيانات فعالة، وتحسين تحميل الأصول (Assets).\n*   **الأمان:** يجب أن يتمتع الموقع بمستوى أمان احترافي عالٍ جداً، بحيث يكون اختراقه أو تسريب البيانات منه شبه مستحيل قدر الإمكان. يشمل ذلك:\n    *   تطبيق أفضل ممارسات الأمان في Django (مثل حماية CSRF، XSS، SQL Injection).\n    *   تشفير البيانات الحساسة (خاصة في قاعدة البيانات).\n    *   آليات مصادقة وتفويض قوية.\n    *   مراقبة الثغرات الأمنية وتحديث المكتبات بشكل دوري.\n*   **قابلية التوسع (Scalability):** يجب أن يكون تصميم الموقع قابلاً للتوسع بشكل كبير وسهل لاستيعاب نمو المحتوى وعدد المستخدمين في المستقبل. يتضمن ذلك بنية كود معيارية، استخدام خدمات قابلة للتوسع (مثل قواعد البيانات السحابية)، وتصميم يدعم التوزيع.\n*   **التوثيق (Documentation):** يجب أن يكون الكود موثقاً بشكل كامل وواضح (In-code documentation) لتسهيل عمليات التطوير والصيانة المستقبلية من قبل أي مطور آخر.\n\n## 4. متطلبات التصميم وتجربة المستخدم (UI/UX)\n\n### 4.1. الهوية البصرية والعلامة التجارية\n\n*   **اسم الموقع:** Alqudimi technology.\n*   **الشعار:** يجب تحويل الصورة المرفقة (BackgroundEraser_٢٠٢٥٠٨١١_١٩١٧٠٧٧٠٢.png) إلى صيغ مختلفة (مثل SVG، PNG بأحجام متعددة) واستخدامها كشعار للموقع. يجب أن يكون الشعار متجاوباً ويظهر بشكل مثالي على جميع الأجهزة.\n*   **الألوان:** استخدام ألوان عصرية وجذابة وجميلة ومريحة للمستخدم. يجب أن تكون لوحة الألوان متناسقة وتعكس الاحترافية والإبداع.\n\n### 4.2. التفاعلات البصرية والصوتية\n\n*   **الأنيميشن (Animations):** دمج أنيميشن رائعة وجذابة وحديثة في جميع أنحاء الموقع لتعزيز تجربة المستخدم وجعلها أكثر ديناميكية وحيوية. يجب أن تكون الأنيميشن سلسة وغير مزعجة.\n*   **الأصوات (Sounds):** استخدام أصوات مناسبة وتفاعلية (مثل عند النقر على الأزرار، أو التمرير فوق العناصر) لتعزيز تجربة المستخدم. يجب أن تكون الأصوات ذات جودة عالية وغير مزعجة، مع توفير خيار لتعطيلها.\n*   **التصميم ثلاثي الأبعاد (3D Design):** دمج عناصر تصميم ثلاثية الأبعاد (3D) بشكل مرتب ومناسب في الواجهة الأمامية للموقع لإضفاء لمسة عصرية ومبهرة. يمكن أن تكون هذه العناصر في الخلفيات، أو كجزء من عرض المشاريع، أو في أي مكان آخر يراه المطور مناسباً لتعزيز الجمالية.\n\n### 4.3. خصائص تجربة المستخدم المتقدمة\n\n*   **الوضع المظلم/الساطع (Dark/Light Mode):** يجب أن يدعم الموقع التبديل بين الوضع الساطع (Light Mode) والوضع المظلم (Dark Mode) لتوفير راحة بصرية للمستخدمين في ظروف الإضاءة المختلفة. يجب أن يكون التبديل سلساً ويحفظ تفضيلات المستخدم.\n*   **الوضع الصامت/الصوت (Mute/Sound Mode):** توفير خيار للمستخدم لتعطيل أو تشغيل الأصوات في الموقع بشكل كامل.\n*   **الإشعارات (Notifications):** دعم نظام إشعارات (مثل إشعارات المتصفح) مع توفير خيار للمستخدم لتلقي الإشعارات أو عدم تلقيها.\n*   **التجاوبية (Responsiveness):** يجب أن يكون الموقع متجاوباً بالكامل ويعمل بشكل مثالي على جميع أحجام الشاشات والأجهزة (سطح المكتب، الأجهزة اللوحية، الهواتف الذكية).\n*   **سهولة الاستخدام (Usability):** تصميم واجهة مستخدم بديهية وسهلة التنقل، مع تجربة مستخدم سلسة وممتعة.\n\n## 5. متطلبات المحتوى\n\n### 5.1. قسم الخدمات\n\nيجب أن يعرض هذا القسم جميع الخدمات البرمجية التي يقدمها المبرمج. يمكن تنظيمها في فئات (مثل تطوير الويب، تطوير تطبيقات الموبايل، الذكاء الاصطناعي، الأمن السيبراني، إلخ). يجب أن يتضمن كل خدمة وصفاً تفصيلياً لما تقدمه.\n\n### 5.2. قسم المشاريع\n\nيجب عرض المشاريع بشكل جذاب، مع تفاصيل كافية لكل مشروع. سيتم توفير أوصاف المشاريع في ملف منفصل (أوصاف المشاريع الاحترافية لملف LinkedIn.md). يجب أن يكون هناك صفحة تفصيلية لكل مشروع تعرض:\n\n*   عنوان المشروع.\n*   وصف تفصيلي (من الملف المرفق).\n*   التقنيات المستخدمة (من الملف المرفق).\n*   صور/لقطات شاشة/فيديوهات للمشروع.\n*   روابط للمشروع (إذا كان منشوراً).\n\n### 5.3. قسم السيرة الذاتية\n\nيجب عرض السيرة الذاتية بشكل احترافي ومنظم. سيتم توفير محتوى السيرة الذاتية في ملف منفصل (السيرة الذاتية.md). يجب أن يشمل القسم:\n\n*   معلومات الاتصال.\n*   الملخص الاحترافي.\n*   التعليم.\n*   الخبرات العملية (إن وجدت).\n*   المهارات التقنية (مقسمة حسب الفئات).\n*   المشاريع (يمكن ربطها بقسم المشاريع التفصيلي).\n*   الجوائز والشهادات (إن وجدت).\n*   المنشورات (إن وجدت).\n\n### 5.4. قسم التواصل\n\nيجب أن يتضمن هذا القسم جميع طرق التواصل المتاحة:\n\n*   البريد الإلكتروني: eng7mi@gmail.com, abodx1234freey@gmail.com\n*   رقم الهاتف: +967771442176\n*   روابط وسائل التواصل الاجتماعي: https://www.instagram.com/eng_7mi?igsh=MXhib3J4eHI2dnZ0dA==\n*   نموذج اتصال (Contact Form) يرسل الرسائل مباشرة إلى البريد الإلكتروني للمبرمج.\n\n## 6. ميزات إضافية (يترك للإبداع)\n\nيترك هذا الجزء للمطور لإضافة ميزات إضافية تعزز من احترافية الموقع وتجربة المستخدم، بناءً على أفضل الممارسات في بناء المواقع الشخصية للمبرمجين. يمكن أن تشمل هذه الميزات على سبيل المثال لا الحصر:\n\n*   **مدونة (Blog):** قسم للمقالات التقنية أو التحديثات الشخصية.\n*   **قسم الأسئلة الشائعة (FAQ):** للإجابة على الاستفسارات المتكررة.\n*   **شهادات العملاء (Testimonials):** لعرض آراء العملاء السابقين.\n*   **نظام حجز (Booking System):** إذا كان المبرمج يقدم استشارات أو جلسات.\n*   **معرض صور/فيديوهات:** لعرض أعمال إضافية أو لقطات من المشاريع.\n*   **نظام بحث داخلي:** للبحث عن محتوى داخل الموقع.\n*   **خرائط تفاعلية:** إذا كان هناك حاجة لعرض موقع جغرافي.\n*   **دعم متعدد اللغات:** إذا كان هناك نية لاستهداف جمهور عالمي.\n\n## 7. متطلبات النشر والاستضافة\n\nيجب أن يكون الموقع مصمماً بطريقة تسهل نشره واستضافته على منصات سحابية مثل Render أو أي منصة نشر أخرى مناسبة. يتضمن ذلك:\n\n*   تكوين ملفات النشر (مثل `Procfile` لـ Render).\n*   إدارة المتغيرات البيئية (Environment Variables).\n*   استخدام قواعد بيانات سحابية (مثل PostgreSQL على Render).\n*   تجهيز الموقع للعمل في بيئة إنتاجية.\n\n## 8. المرفقات\n\n*   **أوصاف المشاريع الاحترافية لملف LinkedIn.md:** يحتوي على أوصاف تفصيلية للمشاريع.\n*   **السيرة الذاتية.md:** يحتوي على محتوى السيرة الذاتية.\n*   **BackgroundEraser_٢٠٢٥٠٨١١_١٩١٧٠٧٧٠٢.png:** الصورة المقترحة للشعار.\n\n---\n\n\n\n## 9. تفاصيل المحتوى\n\n### 9.1. الخدمات البرمجية\n\nيجب أن يقدم الموقع قسماً مخصصاً لعرض الخدمات البرمجية التي يقدمها المبرمج. هذه الخدمات واسعة النطاق وتشمل، على سبيل المثال لا الحصر، ما يلي:\n\n*   **تطوير الويب:** بناء مواقع الويب الديناميكية والثابتة، تطبيقات الويب المخصصة، لوحات الإدارة، واجهات برمجة التطبيقات (APIs) باستخدام Django وتقنيات الواجهة الأمامية الحديثة (HTML, CSS, JavaScript).\n*   **تطوير تطبيقات الموبايل:** تصميم وتطوير تطبيقات الأندرويد (باستخدام Java أو Kotlin) وتطبيقات متعددة المنصات (باستخدام أطر عمل مثل Kivy أو React Native إذا كان ذلك مناسباً للتكامل مع Django).\n*   **حلول الذكاء الاصطناعي والتعلم الآلي:** تطوير نماذج التعلم الآلي والتعلم العميق، معالجة اللغات الطبيعية (NLP)، الرؤية الحاسوبية (Computer Vision)، بناء الشات بوتات، أنظمة التوصية، وتحليل البيانات.\n*   **الأمن السيبراني والتشفير:** تصميم وتنفيذ أنظمة تشفير قوية، حلول أمان للويب والتطبيقات، واختبار الاختراق.\n*   **إدارة قواعد البيانات:** تصميم، تنفيذ، وتحسين قواعد البيانات العلائقية (مثل PostgreSQL) وغير العلائقية (مثل MongoDB) لضمان الأداء والأمان.\n*   **الاستشارات التقنية:** تقديم استشارات في مجالات البرمجة، اختيار التقنيات، وتحسين الأداء.\n*   **خدمات أخرى:** أي خدمات برمجية أخرى يمكن أن يقدمها المبرمج في مجالات مثل DevOps، الحوسبة السحابية، أو تطوير الألعاب.\n\nيجب أن يكون كل قسم خدمة مصحوباً بوصف واضح وموجز، يوضح القيمة المضافة التي يقدمها المبرمج في هذا المجال. يمكن استخدام أيقونات أو رسوم توضيحية لتعزيز الجاذبية البصرية.\n\n### 9.2. المشاريع السابقة\n\nيجب أن يكون قسم المشاريع هو الواجهة الرئيسية لعرض إنجازات المبرمج. سيتم استيراد أوصاف المشاريع من الملف المرفق `أوصاف المشاريع الاحترافية لملف LinkedIn.md`. يجب أن يتضمن هذا القسم:\n\n*   **صفحة رئيسية للمشاريع:** تعرض قائمة بجميع المشاريع بشكل جذاب (على سبيل المثال، كبطاقات تحتوي على صورة مصغرة، عنوان المشروع، ووصف موجز). يجب أن تكون قابلة للتصفية أو البحث إذا كان عدد المشاريع كبيراً.\n*   **صفحة تفصيلية لكل مشروع:** عند النقر على أي مشروع، يجب أن يتم توجيه المستخدم إلى صفحة مخصصة لهذا المشروع. هذه الصفحة يجب أن تحتوي على:\n    *   **عنوان المشروع:** كما هو مذكور في الملف المرفق.\n    *   **وصف تفصيلي:** النص الكامل للوصف من الملف المرفق، مع إمكانية تنسيقه بشكل جيد (فقرات، قوائم، إلخ).\n    *   **التقنيات المستخدمة:** قائمة بالتقنيات المذكورة في الملف المرفق، يمكن عرضها كعلامات (tags) أو أيقونات.\n    *   **معرض صور/فيديوهات:** يجب أن يكون هناك مكان لتحميل وعرض صور ولقطات شاشة وفيديوهات توضيحية لكل مشروع. هذا يعزز من فهم المشروع ويجعله أكثر جاذبية.\n    *   **روابط المشروع:** إذا كان المشروع منشوراً أو له مستودع كود (مثل GitHub)، يجب توفير روابط مباشرة إليه.\n\nيجب أن تكون لوحة تحكم الإدارة قادرة على إدارة جميع جوانب هذه المشاريع، بما في ذلك تحميل الوسائط وتحديث الروابط.\n\n### 9.3. السيرة الذاتية\n\nسيتم عرض السيرة الذاتية بشكل احترافي ومنظم، مع إمكانية تحديثها بالكامل من لوحة تحكم الإدارة. سيتم استيراد المحتوى الأولي من الملف المرفق `السيرة الذاتية.md`. يجب أن يشمل قسم السيرة الذاتية الأقسام التالية:\n\n*   **معلومات الاتصال:** الاسم، البريد الإلكتروني، رقم الهاتف، وروابط وسائل التواصل الاجتماعي (يمكن ربطها بقسم التواصل).\n*   **الملخص الاحترافي:** فقرة موجزة تسلط الضوء على الخبرات والمهارات الرئيسية.\n*   **التعليم:** تفاصيل الشهادات الأكاديمية والمؤسسات التعليمية.\n*   **الخبرات العملية:** (إذا وجدت) قائمة بالوظائف السابقة، المسميات الوظيفية، الفترات الزمنية، والمسؤوليات والإنجازات الرئيسية.\n*   **المهارات التقنية:** قائمة شاملة بالمهارات، مقسمة إلى فئات (مثل لغات البرمجة، أطر العمل، قواعد البيانات، الذكاء الاصطناعي، إلخ). يمكن عرضها كشريط تقدم (progress bar) أو أيقونات لتعزيز الجاذبية البصرية.\n*   **المشاريع:** قائمة مختصرة بالمشاريع الرئيسية، مع روابط لصفحات المشاريع التفصيلية.\n*   **الجوائز والشهادات:** (إذا وجدت) أي جوائز أو شهادات مهنية تم الحصول عليها.\n*   **المنشورات:** (إذا وجدت) قائمة بالمقالات أو الأبحاث المنشورة.\n\n### 9.4. قسم التواصل\n\nيجب أن يوفر الموقع طرق تواصل متعددة وواضحة للعملاء. سيتم توفير معلومات التواصل الأولية، ويجب أن تكون قابلة للتعديل والإضافة من لوحة تحكم الإدارة. يشمل ذلك:\n\n*   **عناوين البريد الإلكتروني:** `eng7mi@gmail.com`, `abodx1234freey@gmail.com`.\n*   **رقم الهاتف:** `+967771442176`.\n*   **روابط وسائل التواصل الاجتماعي:** `https://www.instagram.com/eng_7mi?igsh=MXhib3J4eHI2dnZ0dA==`. يجب أن تكون هناك أيقونات لكل منصة تواصل اجتماعي.\n*   **نموذج اتصال (Contact Form):** نموذج بسيط وفعال يسمح للزوار بإرسال رسائل مباشرة إلى البريد الإلكتروني للمبرمج. يجب أن يتضمن حقولاً للاسم، البريد الإلكتروني، الموضوع، والرسالة. يجب أن يكون النموذج آمناً ويمنع الرسائل غير المرغوب فيها (Spam).\n*   **خريطة الموقع (اختياري):** إذا كان هناك موقع فعلي للمبرمج، يمكن تضمين خريطة تفاعلية.\n\n### 9.5. ميزات إضافية مقترحة (لتعزيز الإبهار)\n\nلتحقيق مستوى عالٍ من الاحترافية والإبهار، يمكن للمطور إضافة الميزات التالية، مع إمكانية إدارتها بالكامل من لوحة تحكم الإدارة:\n\n*   **مدونة احترافية:** قسم للمقالات التقنية، تحديثات المشاريع، أو الأفكار الشخصية. يجب أن تدعم المدونة التنسيق الغني للمحتوى (Rich Text Editor)، وتصنيفات المقالات، وعلامات (Tags)، ونظام تعليقات (اختياري).\n*   **قسم الأسئلة الشائعة (FAQ):** قسم منظم للإجابة على الأسئلة المتكررة حول الخدمات أو العمليات. يجب أن يكون قابلاً للبحث.\n*   **شهادات العملاء (Testimonials):** قسم لعرض آراء العملاء السابقين حول جودة الخدمات. يجب أن يتضمن اسم العميل، صورته (اختياري)، والشهادة نفسها.\n*   **نظام حجز مبدئي:** إذا كان المبرمج يقدم استشارات أو جلسات، يمكن تضمين نظام حجز بسيط يسمح للعملاء بجدولة مواعيد.\n*   **معرض أعمال (Portfolio Gallery):** بالإضافة إلى قسم المشاريع، يمكن أن يكون هناك معرض صور/فيديوهات عام يعرض لقطات من أعمال متنوعة.\n*   **نظام بحث داخلي:** يسمح للمستخدمين بالبحث عن محتوى معين داخل الموقع (مثل المشاريع، المقالات، المهارات).\n*   **صفحة \n\n\nعن المبرمج (About Me): صفحة شخصية تعرض معلومات إضافية عن المبرمج، اهتماماته، وفلسفته في العمل.\n*   **دعم متعدد اللغات:** إذا كان هناك نية لاستهداف جمهور عالمي، يمكن إضافة دعم للغات متعددة (مثل العربية والإنجليزية).\n\n## 10. متطلبات النشر والاستضافة\n\nيجب أن يكون الموقع مصمماً بطريقة تسهل نشره واستضافته على منصات سحابية مثل Render أو أي منصة نشر أخرى مناسبة. يتضمن ذلك:\n\n*   **تكوين ملفات النشر:** يجب توفير جميع الملفات اللازمة للنشر السهل، مثل `Procfile` لـ Render، أو `Dockerfile` إذا كان النشر سيعتمد على Docker.\n*   **إدارة المتغيرات البيئية (Environment Variables):** يجب أن يتم التعامل مع الإعدادات الحساسة (مثل مفاتيح API، بيانات اعتماد قاعدة البيانات) كمتغيرات بيئية، وليس تضمينها مباشرة في الكود، لتعزيز الأمان وسهولة النشر.\n*   **استخدام قواعد بيانات سحابية:** يفضل استخدام قواعد بيانات سحابية (مثل PostgreSQL على Render أو Heroku Postgres) لضمان قابلية التوسع والأداء.\n*   **تجهيز الموقع للعمل في بيئة إنتاجية:** يشمل ذلك تجميع الملفات الثابتة (Static Files)، وضغط الأصول (Asset Compression)، وتكوين الخادم (مثل Gunicorn أو Nginx) لتقديم Django بشكل فعال.\n*   **دليل النشر:** يجب توفير دليل موجز وواضح لخطوات النشر على منصة Render أو منصة مشابهة.\n\n## 11. المرفقات\n\nيجب على وكيل الذكاء الاصطناعي الرجوع إلى الملفات المرفقة التالية للحصول على المحتوى التفصيلي:\n\n*   **أوصاف المشاريع الاحترافية لملف LinkedIn.md:** يحتوي على أوصاف تفصيلية لكل مشروع من المشاريع التسعة التي يرغب المبرمج في عرضها على الموقع. يجب استخدام هذه الأوصاف لإنشاء صفحات المشاريع الفردية.\n*   **السيرة الذاتية.md:** يحتوي على المحتوى الكامل للسيرة الذاتية للمبرمج، بما في ذلك معلومات الاتصال، الملخص الاحترافي، التعليم، المشاريع، والمهارات التقنية. يجب استخدام هذا المحتوى لإنشاء قسم السيرة الذاتية على الموقع.\n*   **BackgroundEraser_٢٠٢٥٠٨١١_١٩١٧٠٧٧٠٢.png:** هذه الصورة هي الشعار المقترح للموقع. يجب تحويلها إلى صيغ مختلفة (مثل SVG للحفاظ على الجودة عند التكبير، و PNG بأحجام مختلفة للاستخدامات المتنوعة) واستخدامها كشعار رئيسي للموقع.\n\n---\n\n","size_bytes":26986},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\n// Configure for development environment\nif (process.env.NODE_ENV === 'development') {\n  // Disable SSL verification for self-signed certificates\n  process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';\n}\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ \n  connectionString: process.env.DATABASE_URL,\n  ssl: process.env.NODE_ENV === 'development' ? false : true\n});\nexport const db = drizzle({ client: pool, schema });","size_bytes":746},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertServiceSchema, insertProjectSchema, insertCvDataSchema, \n  insertContactInfoSchema, insertContactMessageSchema, insertSiteSettingSchema,\n  insertBlogPostSchema, insertTestimonialSchema, insertNewsletterSubscriberSchema\n} from \"@shared/schema\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-secret-key\";\n\n// Middleware for authentication\nfunction authenticateToken(req: any, res: any, next: any) {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.status(401).json({ message: 'Access token required' });\n  }\n\n  jwt.verify(token, JWT_SECRET, (err: any, user: any) => {\n    if (err) {\n      return res.status(403).json({ message: 'Invalid token' });\n    }\n    req.user = user;\n    next();\n  });\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Public API Routes\n  \n  // Get all active services\n  app.get(\"/api/services\", async (req, res) => {\n    try {\n      const services = await storage.getActiveServices();\n      res.json(services);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch services\" });\n    }\n  });\n\n  // Get all active projects\n  app.get(\"/api/projects\", async (req, res) => {\n    try {\n      const { category, featured } = req.query;\n      let projects;\n      \n      if (featured === 'true') {\n        projects = await storage.getFeaturedProjects();\n      } else if (category) {\n        projects = await storage.getProjectsByCategory(category as string);\n      } else {\n        projects = await storage.getActiveProjects();\n      }\n      \n      res.json(projects);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch projects\" });\n    }\n  });\n\n  // Get single project\n  app.get(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const project = await storage.getProject(req.params.id);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      res.json(project);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch project\" });\n    }\n  });\n\n  // Get CV data by type\n  app.get(\"/api/cv/:type\", async (req, res) => {\n    try {\n      const cvData = await storage.getCvDataByType(req.params.type);\n      res.json(cvData);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch CV data\" });\n    }\n  });\n\n  // Get all CV data\n  app.get(\"/api/cv\", async (req, res) => {\n    try {\n      const cvData = await storage.getAllCvData();\n      res.json(cvData);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch CV data\" });\n    }\n  });\n\n  // Get contact info\n  app.get(\"/api/contact-info\", async (req, res) => {\n    try {\n      const contactInfo = await storage.getActiveContactInfo();\n      res.json(contactInfo);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch contact info\" });\n    }\n  });\n\n  // Submit contact form\n  app.post(\"/api/contact\", async (req, res) => {\n    try {\n      const validatedData = insertContactMessageSchema.parse(req.body);\n      const message = await storage.createContactMessage(validatedData);\n      \n      // TODO: Send email notification using nodemailer\n      // This would require setting up SMTP credentials\n      \n      res.status(201).json({ \n        message: \"Message sent successfully\",\n        id: message.id \n      });\n    } catch (error) {\n      if (error instanceof Error) {\n        res.status(400).json({ message: error.message });\n      } else {\n        res.status(500).json({ message: \"Failed to send message\" });\n      }\n    }\n  });\n\n  // Admin Authentication\n  \n  // Admin login\n  app.post(\"/api/admin/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      if (!username || !password) {\n        return res.status(400).json({ message: \"Username and password required\" });\n      }\n\n      const user = await storage.getAdminUserByUsername(username);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const validPassword = await bcrypt.compare(password, user.password);\n      if (!validPassword) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const token = jwt.sign(\n        { id: user.id, username: user.username },\n        JWT_SECRET,\n        { expiresIn: '24h' }\n      );\n\n      res.json({\n        token,\n        user: {\n          id: user.id,\n          username: user.username,\n          email: user.email\n        }\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  // Protected Admin Routes\n  \n  // Services Management\n  app.get(\"/api/admin/services\", authenticateToken, async (req, res) => {\n    try {\n      const services = await storage.getAllServices();\n      res.json(services);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch services\" });\n    }\n  });\n\n  app.post(\"/api/admin/services\", authenticateToken, async (req, res) => {\n    try {\n      const validatedData = insertServiceSchema.parse(req.body);\n      const service = await storage.createService(validatedData);\n      res.status(201).json(service);\n    } catch (error) {\n      if (error instanceof Error) {\n        res.status(400).json({ message: error.message });\n      } else {\n        res.status(500).json({ message: \"Failed to create service\" });\n      }\n    }\n  });\n\n  app.put(\"/api/admin/services/:id\", authenticateToken, async (req, res) => {\n    try {\n      const validatedData = insertServiceSchema.partial().parse(req.body);\n      const service = await storage.updateService(req.params.id, validatedData);\n      if (!service) {\n        return res.status(404).json({ message: \"Service not found\" });\n      }\n      res.json(service);\n    } catch (error) {\n      if (error instanceof Error) {\n        res.status(400).json({ message: error.message });\n      } else {\n        res.status(500).json({ message: \"Failed to update service\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/admin/services/:id\", authenticateToken, async (req, res) => {\n    try {\n      const success = await storage.deleteService(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Service not found\" });\n      }\n      res.json({ message: \"Service deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete service\" });\n    }\n  });\n\n  // Projects Management\n  app.get(\"/api/admin/projects\", authenticateToken, async (req, res) => {\n    try {\n      const projects = await storage.getAllProjects();\n      res.json(projects);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch projects\" });\n    }\n  });\n\n  app.post(\"/api/admin/projects\", authenticateToken, async (req, res) => {\n    try {\n      const validatedData = insertProjectSchema.parse(req.body);\n      const project = await storage.createProject(validatedData);\n      res.status(201).json(project);\n    } catch (error) {\n      if (error instanceof Error) {\n        res.status(400).json({ message: error.message });\n      } else {\n        res.status(500).json({ message: \"Failed to create project\" });\n      }\n    }\n  });\n\n  app.put(\"/api/admin/projects/:id\", authenticateToken, async (req, res) => {\n    try {\n      const validatedData = insertProjectSchema.partial().parse(req.body);\n      const project = await storage.updateProject(req.params.id, validatedData);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      res.json(project);\n    } catch (error) {\n      if (error instanceof Error) {\n        res.status(400).json({ message: error.message });\n      } else {\n        res.status(500).json({ message: \"Failed to update project\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/admin/projects/:id\", authenticateToken, async (req, res) => {\n    try {\n      const success = await storage.deleteProject(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      res.json({ message: \"Project deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete project\" });\n    }\n  });\n\n  // CV Data Management\n  app.get(\"/api/admin/cv\", authenticateToken, async (req, res) => {\n    try {\n      const cvData = await storage.getAllCvData();\n      res.json(cvData);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch CV data\" });\n    }\n  });\n\n  app.post(\"/api/admin/cv\", authenticateToken, async (req, res) => {\n    try {\n      const validatedData = insertCvDataSchema.parse(req.body);\n      const cvData = await storage.createCvData(validatedData);\n      res.status(201).json(cvData);\n    } catch (error) {\n      if (error instanceof Error) {\n        res.status(400).json({ message: error.message });\n      } else {\n        res.status(500).json({ message: \"Failed to create CV data\" });\n      }\n    }\n  });\n\n  app.put(\"/api/admin/cv/:id\", authenticateToken, async (req, res) => {\n    try {\n      const validatedData = insertCvDataSchema.partial().parse(req.body);\n      const cvData = await storage.updateCvData(req.params.id, validatedData);\n      if (!cvData) {\n        return res.status(404).json({ message: \"CV data not found\" });\n      }\n      res.json(cvData);\n    } catch (error) {\n      if (error instanceof Error) {\n        res.status(400).json({ message: error.message });\n      } else {\n        res.status(500).json({ message: \"Failed to update CV data\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/admin/cv/:id\", authenticateToken, async (req, res) => {\n    try {\n      const success = await storage.deleteCvData(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"CV data not found\" });\n      }\n      res.json({ message: \"CV data deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete CV data\" });\n    }\n  });\n\n  // Contact Info Management\n  app.get(\"/api/admin/contact-info\", authenticateToken, async (req, res) => {\n    try {\n      const contactInfo = await storage.getAllContactInfo();\n      res.json(contactInfo);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch contact info\" });\n    }\n  });\n\n  app.post(\"/api/admin/contact-info\", authenticateToken, async (req, res) => {\n    try {\n      const validatedData = insertContactInfoSchema.parse(req.body);\n      const contactInfo = await storage.createContactInfo(validatedData);\n      res.status(201).json(contactInfo);\n    } catch (error) {\n      if (error instanceof Error) {\n        res.status(400).json({ message: error.message });\n      } else {\n        res.status(500).json({ message: \"Failed to create contact info\" });\n      }\n    }\n  });\n\n  app.put(\"/api/admin/contact-info/:id\", authenticateToken, async (req, res) => {\n    try {\n      const validatedData = insertContactInfoSchema.partial().parse(req.body);\n      const contactInfo = await storage.updateContactInfo(req.params.id, validatedData);\n      if (!contactInfo) {\n        return res.status(404).json({ message: \"Contact info not found\" });\n      }\n      res.json(contactInfo);\n    } catch (error) {\n      if (error instanceof Error) {\n        res.status(400).json({ message: error.message });\n      } else {\n        res.status(500).json({ message: \"Failed to update contact info\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/admin/contact-info/:id\", authenticateToken, async (req, res) => {\n    try {\n      const success = await storage.deleteContactInfo(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Contact info not found\" });\n      }\n      res.json({ message: \"Contact info deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete contact info\" });\n    }\n  });\n\n  // Contact Messages Management\n  app.get(\"/api/admin/messages\", authenticateToken, async (req, res) => {\n    try {\n      const messages = await storage.getAllContactMessages();\n      res.json(messages);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch messages\" });\n    }\n  });\n\n  app.put(\"/api/admin/messages/:id/status\", authenticateToken, async (req, res) => {\n    try {\n      const { status } = req.body;\n      const message = await storage.updateContactMessageStatus(req.params.id, status);\n      if (!message) {\n        return res.status(404).json({ message: \"Message not found\" });\n      }\n      res.json(message);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update message status\" });\n    }\n  });\n\n  // Blog Posts - Public Routes\n  app.get(\"/api/blog\", async (req, res) => {\n    try {\n      const { category, featured } = req.query;\n      let posts;\n      \n      if (featured === 'true') {\n        posts = await storage.getFeaturedBlogPosts();\n      } else if (category) {\n        posts = await storage.getBlogPostsByCategory(category as string);\n      } else {\n        posts = await storage.getPublishedBlogPosts();\n      }\n      \n      res.json(posts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch blog posts\" });\n    }\n  });\n\n  app.get(\"/api/blog/:slug\", async (req, res) => {\n    try {\n      const post = await storage.getBlogPostBySlug(req.params.slug);\n      if (!post || !post.isPublished) {\n        return res.status(404).json({ message: \"Blog post not found\" });\n      }\n      \n      // Increment view count\n      await storage.incrementBlogPostViews(post.id);\n      \n      res.json(post);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch blog post\" });\n    }\n  });\n\n  // Testimonials - Public Routes\n  app.get(\"/api/testimonials\", async (req, res) => {\n    try {\n      const { featured, projectId } = req.query;\n      let testimonials;\n      \n      if (featured === 'true') {\n        testimonials = await storage.getFeaturedTestimonials();\n      } else if (projectId) {\n        testimonials = await storage.getTestimonialsByProject(projectId as string);\n      } else {\n        testimonials = await storage.getPublishedTestimonials();\n      }\n      \n      res.json(testimonials);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch testimonials\" });\n    }\n  });\n\n\n  // Newsletter Subscription\n  app.post(\"/api/newsletter/subscribe\", async (req, res) => {\n    try {\n      const parsed = insertNewsletterSubscriberSchema.parse(req.body);\n      \n      // Check if already subscribed\n      const existing = await storage.getNewsletterSubscriberByEmail(parsed.email);\n      if (existing) {\n        return res.status(400).json({ message: \"Email already subscribed\" });\n      }\n      \n      const subscriber = await storage.createNewsletterSubscriber(parsed);\n      res.json({ message: \"Successfully subscribed to newsletter\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to subscribe to newsletter\" });\n    }\n  });\n\n  app.post(\"/api/newsletter/unsubscribe\", async (req, res) => {\n    try {\n      const { email } = req.body;\n      const success = await storage.unsubscribeFromNewsletter(email);\n      if (!success) {\n        return res.status(404).json({ message: \"Email not found\" });\n      }\n      res.json({ message: \"Successfully unsubscribed from newsletter\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to unsubscribe from newsletter\" });\n    }\n  });\n\n  // Blog Posts - Admin Routes\n  app.get(\"/api/admin/blog\", authenticateToken, async (req, res) => {\n    try {\n      const posts = await storage.getAllBlogPosts();\n      res.json(posts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch blog posts\" });\n    }\n  });\n\n  app.post(\"/api/admin/blog\", authenticateToken, async (req, res) => {\n    try {\n      const parsed = insertBlogPostSchema.parse(req.body);\n      const post = await storage.createBlogPost(parsed);\n      res.json(post);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create blog post\" });\n    }\n  });\n\n  app.put(\"/api/admin/blog/:id\", authenticateToken, async (req, res) => {\n    try {\n      const parsed = insertBlogPostSchema.partial().parse(req.body);\n      const post = await storage.updateBlogPost(req.params.id, parsed);\n      if (!post) {\n        return res.status(404).json({ message: \"Blog post not found\" });\n      }\n      res.json(post);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update blog post\" });\n    }\n  });\n\n  app.delete(\"/api/admin/blog/:id\", authenticateToken, async (req, res) => {\n    try {\n      const success = await storage.deleteBlogPost(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Blog post not found\" });\n      }\n      res.json({ message: \"Blog post deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete blog post\" });\n    }\n  });\n\n  // Testimonials - Admin Routes\n  app.get(\"/api/admin/testimonials\", authenticateToken, async (req, res) => {\n    try {\n      const testimonials = await storage.getAllTestimonials();\n      res.json(testimonials);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch testimonials\" });\n    }\n  });\n\n  app.post(\"/api/admin/testimonials\", authenticateToken, async (req, res) => {\n    try {\n      const parsed = insertTestimonialSchema.parse(req.body);\n      const testimonial = await storage.createTestimonial(parsed);\n      res.json(testimonial);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create testimonial\" });\n    }\n  });\n\n  app.put(\"/api/admin/testimonials/:id\", authenticateToken, async (req, res) => {\n    try {\n      const parsed = insertTestimonialSchema.partial().parse(req.body);\n      const testimonial = await storage.updateTestimonial(req.params.id, parsed);\n      if (!testimonial) {\n        return res.status(404).json({ message: \"Testimonial not found\" });\n      }\n      res.json(testimonial);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update testimonial\" });\n    }\n  });\n\n  app.delete(\"/api/admin/testimonials/:id\", authenticateToken, async (req, res) => {\n    try {\n      const success = await storage.deleteTestimonial(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Testimonial not found\" });\n      }\n      res.json({ message: \"Testimonial deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete testimonial\" });\n    }\n  });\n\n  // Newsletter - Admin Routes\n  app.get(\"/api/admin/newsletter\", authenticateToken, async (req, res) => {\n    try {\n      const subscribers = await storage.getAllNewsletterSubscribers();\n      res.json(subscribers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch newsletter subscribers\" });\n    }\n  });\n\n  // Search API\n  app.get(\"/api/search\", async (req, res) => {\n    try {\n      const { q, type, category, limit = 20 } = req.query;\n      \n      if (!q || typeof q !== 'string' || q.length < 2) {\n        return res.json([]);\n      }\n      \n      const searchTerm = q.toLowerCase();\n      const results: any[] = [];\n      \n      // Search blog posts\n      if (!type || type === 'blog') {\n        const posts = await storage.getPublishedBlogPosts();\n        posts.forEach(post => {\n          if (\n            post.title.toLowerCase().includes(searchTerm) ||\n            post.titleEn?.toLowerCase().includes(searchTerm) ||\n            post.excerpt?.toLowerCase().includes(searchTerm) ||\n            post.excerptEn?.toLowerCase().includes(searchTerm) ||\n            post.tags?.some(tag => tag.toLowerCase().includes(searchTerm)) ||\n            post.tagsEn?.some(tag => tag.toLowerCase().includes(searchTerm))\n          ) {\n            results.push({\n              type: 'blog',\n              id: post.id,\n              title: post.title,\n              titleEn: post.titleEn,\n              excerpt: post.excerpt,\n              excerptEn: post.excerptEn,\n              url: `/blog/${post.slug}`,\n              category: post.category,\n              categoryEn: post.categoryEn,\n              tags: post.tags,\n              tagsEn: post.tagsEn,\n              publishedAt: post.publishedAt || post.createdAt\n            });\n          }\n        });\n      }\n      \n      // Search projects\n      if (!type || type === 'project') {\n        const projects = await storage.getAllProjects();\n        projects.filter(project => project.isActive).forEach(project => {\n          if (\n            project.title.toLowerCase().includes(searchTerm) ||\n            project.titleEn?.toLowerCase().includes(searchTerm) ||\n            project.description?.toLowerCase().includes(searchTerm) ||\n            project.descriptionEn?.toLowerCase().includes(searchTerm) ||\n            project.category?.toLowerCase().includes(searchTerm)\n          ) {\n            results.push({\n              type: 'project',\n              id: project.id,\n              title: project.title,\n              titleEn: project.titleEn,\n              excerpt: project.shortDescription || project.description,\n              excerptEn: project.shortDescriptionEn || project.descriptionEn,\n              url: `/projects/${project.id}`,\n              category: project.category,\n              categoryEn: project.category\n            });\n          }\n        });\n      }\n      \n      // Search testimonials\n      if (!type || type === 'testimonial') {\n        const testimonials = await storage.getPublishedTestimonials();\n        testimonials.forEach(testimonial => {\n          if (\n            testimonial.clientName.toLowerCase().includes(searchTerm) ||\n            testimonial.clientNameEn?.toLowerCase().includes(searchTerm) ||\n            testimonial.testimonial.toLowerCase().includes(searchTerm) ||\n            testimonial.testimonialEn?.toLowerCase().includes(searchTerm) ||\n            testimonial.clientCompany?.toLowerCase().includes(searchTerm) ||\n            testimonial.clientCompanyEn?.toLowerCase().includes(searchTerm)\n          ) {\n            results.push({\n              type: 'testimonial',\n              id: testimonial.id,\n              title: testimonial.clientName,\n              titleEn: testimonial.clientNameEn,\n              excerpt: testimonial.testimonial,\n              excerptEn: testimonial.testimonialEn,\n              url: '/testimonials',\n              rating: testimonial.rating,\n              clientName: testimonial.clientName,\n              clientNameEn: testimonial.clientNameEn\n            });\n          }\n        });\n      }\n      \n      // Filter by category if specified\n      const filteredResults = category && category !== 'all' \n        ? results.filter(result => \n            result.category === category || result.categoryEn === category\n          )\n        : results;\n      \n      // Limit results\n      const limitedResults = filteredResults.slice(0, parseInt(limit as string));\n      \n      res.json(limitedResults);\n    } catch (error) {\n      console.error(\"Search API error:\", error);\n      res.status(500).json({ message: \"Failed to perform search\" });\n    }\n  });\n\n  // Analytics - Admin Routes\n  app.get(\"/api/admin/analytics\", authenticateToken, async (req, res) => {\n    try {\n      const { type, days } = req.query;\n      let analytics;\n      \n      if (type) {\n        analytics = await storage.getAnalyticsByType(type as string, parseInt(days as string) || 30);\n      } else {\n        analytics = await storage.getPageViewStats(parseInt(days as string) || 30);\n      }\n      \n      res.json(analytics);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch analytics\" });\n    }\n  });\n\n  // Initialize default admin user if none exists\n  app.post(\"/api/admin/init\", async (req, res) => {\n    try {\n      // Check if any admin users exist\n      const existingUser = await storage.getAdminUserByUsername(\"admin\");\n      if (existingUser) {\n        return res.status(400).json({ message: \"Admin user already exists\" });\n      }\n\n      // Create default admin user\n      const hashedPassword = await bcrypt.hash(\"admin123\", 10);\n      const adminUser = await storage.createAdminUser({\n        username: \"admin\",\n        password: hashedPassword,\n        email: \"admin@alqudimitech.com\"\n      });\n\n      res.json({ \n        message: \"Default admin user created\",\n        username: adminUser.username \n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to initialize admin user\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":24810},"server/storage.ts":{"content":"import { \n  adminUsers, services, projects, cvData, contactInfo, contactMessages, siteSettings,\n  blogPosts, testimonials, newsletterSubscribers, analytics,\n  type AdminUser, type InsertAdminUser, type Service, type InsertService, \n  type Project, type InsertProject, type CvData, type InsertCvData,\n  type ContactInfo, type InsertContactInfo, type ContactMessage, type InsertContactMessage,\n  type SiteSetting, type InsertSiteSetting, type BlogPost, type InsertBlogPost,\n  type Testimonial, type InsertTestimonial, type NewsletterSubscriber, type InsertNewsletterSubscriber,\n  type Analytics, type InsertAnalytics\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, asc, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Admin Users\n  getAdminUser(id: string): Promise<AdminUser | undefined>;\n  getAdminUserByUsername(username: string): Promise<AdminUser | undefined>;\n  createAdminUser(user: InsertAdminUser): Promise<AdminUser>;\n\n  // Services\n  getAllServices(): Promise<Service[]>;\n  getActiveServices(): Promise<Service[]>;\n  getService(id: string): Promise<Service | undefined>;\n  createService(service: InsertService): Promise<Service>;\n  updateService(id: string, service: Partial<InsertService>): Promise<Service | undefined>;\n  deleteService(id: string): Promise<boolean>;\n\n  // Projects\n  getAllProjects(): Promise<Project[]>;\n  getActiveProjects(): Promise<Project[]>;\n  getFeaturedProjects(): Promise<Project[]>;\n  getProjectsByCategory(category: string): Promise<Project[]>;\n  getProject(id: string): Promise<Project | undefined>;\n  createProject(project: InsertProject): Promise<Project>;\n  updateProject(id: string, project: Partial<InsertProject>): Promise<Project | undefined>;\n  deleteProject(id: string): Promise<boolean>;\n\n  // CV Data\n  getCvDataByType(type: string): Promise<CvData[]>;\n  getAllCvData(): Promise<CvData[]>;\n  getCvDataItem(id: string): Promise<CvData | undefined>;\n  createCvData(cvData: InsertCvData): Promise<CvData>;\n  updateCvData(id: string, cvData: Partial<InsertCvData>): Promise<CvData | undefined>;\n  deleteCvData(id: string): Promise<boolean>;\n\n  // Contact Info\n  getAllContactInfo(): Promise<ContactInfo[]>;\n  getActiveContactInfo(): Promise<ContactInfo[]>;\n  getContactInfo(id: string): Promise<ContactInfo | undefined>;\n  createContactInfo(contactInfo: InsertContactInfo): Promise<ContactInfo>;\n  updateContactInfo(id: string, contactInfo: Partial<InsertContactInfo>): Promise<ContactInfo | undefined>;\n  deleteContactInfo(id: string): Promise<boolean>;\n\n  // Contact Messages\n  getAllContactMessages(): Promise<ContactMessage[]>;\n  getContactMessage(id: string): Promise<ContactMessage | undefined>;\n  createContactMessage(message: InsertContactMessage): Promise<ContactMessage>;\n  updateContactMessageStatus(id: string, status: string): Promise<ContactMessage | undefined>;\n  deleteContactMessage(id: string): Promise<boolean>;\n\n  // Site Settings\n  getAllSiteSettings(): Promise<SiteSetting[]>;\n  getSiteSettingsByCategory(category: string): Promise<SiteSetting[]>;\n  getSiteSetting(key: string): Promise<SiteSetting | undefined>;\n  createSiteSetting(setting: InsertSiteSetting): Promise<SiteSetting>;\n  updateSiteSetting(key: string, value: string): Promise<SiteSetting | undefined>;\n  deleteSiteSetting(key: string): Promise<boolean>;\n\n  // Blog Posts\n  getAllBlogPosts(): Promise<BlogPost[]>;\n  getPublishedBlogPosts(): Promise<BlogPost[]>;\n  getFeaturedBlogPosts(): Promise<BlogPost[]>;\n  getBlogPostsByCategory(category: string): Promise<BlogPost[]>;\n  getBlogPost(id: string): Promise<BlogPost | undefined>;\n  getBlogPostBySlug(slug: string): Promise<BlogPost | undefined>;\n  createBlogPost(post: InsertBlogPost): Promise<BlogPost>;\n  updateBlogPost(id: string, post: Partial<InsertBlogPost>): Promise<BlogPost | undefined>;\n  deleteBlogPost(id: string): Promise<boolean>;\n  incrementBlogPostViews(id: string): Promise<void>;\n\n  // Testimonials\n  getAllTestimonials(): Promise<Testimonial[]>;\n  getPublishedTestimonials(): Promise<Testimonial[]>;\n  getFeaturedTestimonials(): Promise<Testimonial[]>;\n  getTestimonialsByProject(projectId: string): Promise<Testimonial[]>;\n  getTestimonial(id: string): Promise<Testimonial | undefined>;\n  createTestimonial(testimonial: InsertTestimonial): Promise<Testimonial>;\n  updateTestimonial(id: string, testimonial: Partial<InsertTestimonial>): Promise<Testimonial | undefined>;\n  deleteTestimonial(id: string): Promise<boolean>;\n\n  // Newsletter\n  getAllNewsletterSubscribers(): Promise<NewsletterSubscriber[]>;\n  getActiveNewsletterSubscribers(): Promise<NewsletterSubscriber[]>;\n  getNewsletterSubscriber(id: string): Promise<NewsletterSubscriber | undefined>;\n  getNewsletterSubscriberByEmail(email: string): Promise<NewsletterSubscriber | undefined>;\n  createNewsletterSubscriber(subscriber: InsertNewsletterSubscriber): Promise<NewsletterSubscriber>;\n  unsubscribeFromNewsletter(email: string): Promise<boolean>;\n\n  // Analytics\n  createAnalyticsEntry(entry: InsertAnalytics): Promise<Analytics>;\n  getAnalyticsByType(type: string, days?: number): Promise<Analytics[]>;\n  getAnalyticsByDateRange(startDate: Date, endDate: Date): Promise<Analytics[]>;\n  getPageViewStats(days?: number): Promise<{ path: string; views: number }[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Admin Users\n  async getAdminUser(id: string): Promise<AdminUser | undefined> {\n    const [user] = await db.select().from(adminUsers).where(eq(adminUsers.id, id));\n    return user || undefined;\n  }\n\n  async getAdminUserByUsername(username: string): Promise<AdminUser | undefined> {\n    const [user] = await db.select().from(adminUsers).where(eq(adminUsers.username, username));\n    return user || undefined;\n  }\n\n  async createAdminUser(insertUser: InsertAdminUser): Promise<AdminUser> {\n    const [user] = await db.insert(adminUsers).values(insertUser).returning();\n    return user;\n  }\n\n  // Services\n  async getAllServices(): Promise<Service[]> {\n    return await db.select().from(services).orderBy(asc(services.order));\n  }\n\n  async getActiveServices(): Promise<Service[]> {\n    return await db.select().from(services)\n      .where(eq(services.isActive, true))\n      .orderBy(asc(services.order));\n  }\n\n  async getService(id: string): Promise<Service | undefined> {\n    const [service] = await db.select().from(services).where(eq(services.id, id));\n    return service || undefined;\n  }\n\n  async createService(service: InsertService): Promise<Service> {\n    const insertData: any = {\n      ...service,\n      features: service.features || [],\n      featuresEn: service.featuresEn || []\n    };\n    const [newService] = await db.insert(services).values(insertData).returning();\n    return newService;\n  }\n\n  async updateService(id: string, service: Partial<InsertService>): Promise<Service | undefined> {\n    const updateData: any = {\n      ...service,\n      updatedAt: new Date()\n    };\n    const [updated] = await db.update(services)\n      .set(updateData)\n      .where(eq(services.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async deleteService(id: string): Promise<boolean> {\n    const result = await db.delete(services).where(eq(services.id, id));\n    return result.rowCount !== null && result.rowCount > 0;\n  }\n\n  // Projects\n  async getAllProjects(): Promise<Project[]> {\n    return await db.select().from(projects).orderBy(desc(projects.createdAt));\n  }\n\n  async getActiveProjects(): Promise<Project[]> {\n    return await db.select().from(projects)\n      .where(eq(projects.isActive, true))\n      .orderBy(asc(projects.order), desc(projects.createdAt));\n  }\n\n  async getFeaturedProjects(): Promise<Project[]> {\n    return await db.select().from(projects)\n      .where(eq(projects.isFeatured, true))\n      .orderBy(asc(projects.order));\n  }\n\n  async getProjectsByCategory(category: string): Promise<Project[]> {\n    return await db.select().from(projects)\n      .where(eq(projects.category, category))\n      .orderBy(desc(projects.createdAt));\n  }\n\n  async getProject(id: string): Promise<Project | undefined> {\n    const [project] = await db.select().from(projects).where(eq(projects.id, id));\n    return project || undefined;\n  }\n\n  async createProject(project: InsertProject): Promise<Project> {\n    const insertData: any = {\n      ...project,\n      technologies: project.technologies || [],\n      images: project.images || []\n    };\n    const [newProject] = await db.insert(projects).values(insertData).returning();\n    return newProject;\n  }\n\n  async updateProject(id: string, project: Partial<InsertProject>): Promise<Project | undefined> {\n    const updateData: any = {\n      ...project,\n      updatedAt: new Date()\n    };\n    const [updated] = await db.update(projects)\n      .set(updateData)\n      .where(eq(projects.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async deleteProject(id: string): Promise<boolean> {\n    const result = await db.delete(projects).where(eq(projects.id, id));\n    return result.rowCount !== null && result.rowCount > 0;\n  }\n\n  // CV Data\n  async getCvDataByType(type: string): Promise<CvData[]> {\n    return await db.select().from(cvData)\n      .where(eq(cvData.type, type))\n      .orderBy(asc(cvData.order));\n  }\n\n  async getAllCvData(): Promise<CvData[]> {\n    return await db.select().from(cvData).orderBy(asc(cvData.order));\n  }\n\n  async getCvDataItem(id: string): Promise<CvData | undefined> {\n    const [item] = await db.select().from(cvData).where(eq(cvData.id, id));\n    return item || undefined;\n  }\n\n  async createCvData(cvDataItem: InsertCvData): Promise<CvData> {\n    const insertData: any = {\n      ...cvDataItem,\n      skills: cvDataItem.skills || []\n    };\n    const [newItem] = await db.insert(cvData).values(insertData).returning();\n    return newItem;\n  }\n\n  async updateCvData(id: string, cvDataItem: Partial<InsertCvData>): Promise<CvData | undefined> {\n    const updateData: any = {\n      ...cvDataItem,\n      updatedAt: new Date()\n    };\n    const [updated] = await db.update(cvData)\n      .set(updateData)\n      .where(eq(cvData.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async deleteCvData(id: string): Promise<boolean> {\n    const result = await db.delete(cvData).where(eq(cvData.id, id));\n    return result.rowCount !== null && result.rowCount > 0;\n  }\n\n  // Contact Info\n  async getAllContactInfo(): Promise<ContactInfo[]> {\n    return await db.select().from(contactInfo).orderBy(asc(contactInfo.order));\n  }\n\n  async getActiveContactInfo(): Promise<ContactInfo[]> {\n    return await db.select().from(contactInfo)\n      .where(eq(contactInfo.isActive, true))\n      .orderBy(asc(contactInfo.order));\n  }\n\n  async getContactInfo(id: string): Promise<ContactInfo | undefined> {\n    const [info] = await db.select().from(contactInfo).where(eq(contactInfo.id, id));\n    return info || undefined;\n  }\n\n  async createContactInfo(contactInfoItem: InsertContactInfo): Promise<ContactInfo> {\n    const [newInfo] = await db.insert(contactInfo).values(contactInfoItem).returning();\n    return newInfo;\n  }\n\n  async updateContactInfo(id: string, contactInfoItem: Partial<InsertContactInfo>): Promise<ContactInfo | undefined> {\n    const [updated] = await db.update(contactInfo)\n      .set(contactInfoItem)\n      .where(eq(contactInfo.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async deleteContactInfo(id: string): Promise<boolean> {\n    const result = await db.delete(contactInfo).where(eq(contactInfo.id, id));\n    return result.rowCount !== null && result.rowCount > 0;\n  }\n\n  // Contact Messages\n  async getAllContactMessages(): Promise<ContactMessage[]> {\n    return await db.select().from(contactMessages).orderBy(desc(contactMessages.createdAt));\n  }\n\n  async getContactMessage(id: string): Promise<ContactMessage | undefined> {\n    const [message] = await db.select().from(contactMessages).where(eq(contactMessages.id, id));\n    return message || undefined;\n  }\n\n  async createContactMessage(message: InsertContactMessage): Promise<ContactMessage> {\n    const [newMessage] = await db.insert(contactMessages).values(message).returning();\n    return newMessage;\n  }\n\n  async updateContactMessageStatus(id: string, status: string): Promise<ContactMessage | undefined> {\n    const [updated] = await db.update(contactMessages)\n      .set({ status })\n      .where(eq(contactMessages.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async deleteContactMessage(id: string): Promise<boolean> {\n    const result = await db.delete(contactMessages).where(eq(contactMessages.id, id));\n    return result.rowCount !== null && result.rowCount > 0;\n  }\n\n  // Site Settings\n  async getAllSiteSettings(): Promise<SiteSetting[]> {\n    return await db.select().from(siteSettings);\n  }\n\n  async getSiteSettingsByCategory(category: string): Promise<SiteSetting[]> {\n    return await db.select().from(siteSettings).where(eq(siteSettings.category, category));\n  }\n\n  async getSiteSetting(key: string): Promise<SiteSetting | undefined> {\n    const [setting] = await db.select().from(siteSettings).where(eq(siteSettings.key, key));\n    return setting || undefined;\n  }\n\n  async createSiteSetting(setting: InsertSiteSetting): Promise<SiteSetting> {\n    const [newSetting] = await db.insert(siteSettings).values(setting).returning();\n    return newSetting;\n  }\n\n  async updateSiteSetting(key: string, value: string): Promise<SiteSetting | undefined> {\n    const [updated] = await db.update(siteSettings)\n      .set({ value })\n      .where(eq(siteSettings.key, key))\n      .returning();\n    return updated || undefined;\n  }\n\n  async deleteSiteSetting(key: string): Promise<boolean> {\n    const result = await db.delete(siteSettings).where(eq(siteSettings.key, key));\n    return result.rowCount !== null && result.rowCount > 0;\n  }\n\n  // Blog Posts\n  async getAllBlogPosts(): Promise<BlogPost[]> {\n    return await db.select().from(blogPosts).orderBy(desc(blogPosts.createdAt));\n  }\n\n  async getPublishedBlogPosts(): Promise<BlogPost[]> {\n    return await db.select().from(blogPosts)\n      .where(eq(blogPosts.isPublished, true))\n      .orderBy(desc(blogPosts.publishedAt));\n  }\n\n  async getFeaturedBlogPosts(): Promise<BlogPost[]> {\n    return await db.select().from(blogPosts)\n      .where(eq(blogPosts.isFeatured, true))\n      .orderBy(desc(blogPosts.publishedAt));\n  }\n\n  async getBlogPostsByCategory(category: string): Promise<BlogPost[]> {\n    return await db.select().from(blogPosts)\n      .where(eq(blogPosts.category, category))\n      .orderBy(desc(blogPosts.publishedAt));\n  }\n\n  async getBlogPost(id: string): Promise<BlogPost | undefined> {\n    const [post] = await db.select().from(blogPosts).where(eq(blogPosts.id, id));\n    return post || undefined;\n  }\n\n  async getBlogPostBySlug(slug: string): Promise<BlogPost | undefined> {\n    const [post] = await db.select().from(blogPosts).where(eq(blogPosts.slug, slug));\n    return post || undefined;\n  }\n\n  async createBlogPost(post: InsertBlogPost): Promise<BlogPost> {\n    const insertData: any = {\n      ...post,\n      tags: post.tags || [],\n      tagsEn: post.tagsEn || []\n    };\n    const [newPost] = await db.insert(blogPosts).values(insertData).returning();\n    return newPost;\n  }\n\n  async updateBlogPost(id: string, post: Partial<InsertBlogPost>): Promise<BlogPost | undefined> {\n    const updateData: any = {\n      ...post,\n      updatedAt: new Date()\n    };\n    const [updated] = await db.update(blogPosts)\n      .set(updateData)\n      .where(eq(blogPosts.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async deleteBlogPost(id: string): Promise<boolean> {\n    const result = await db.delete(blogPosts).where(eq(blogPosts.id, id));\n    return result.rowCount !== null && result.rowCount > 0;\n  }\n\n  async incrementBlogPostViews(id: string): Promise<void> {\n    await db.update(blogPosts)\n      .set({ viewCount: sql`${blogPosts.viewCount} + 1` })\n      .where(eq(blogPosts.id, id));\n  }\n\n  // Testimonials\n  async getAllTestimonials(): Promise<Testimonial[]> {\n    return await db.select().from(testimonials).orderBy(asc(testimonials.order));\n  }\n\n  async getPublishedTestimonials(): Promise<Testimonial[]> {\n    return await db.select().from(testimonials)\n      .where(eq(testimonials.isPublished, true))\n      .orderBy(asc(testimonials.order));\n  }\n\n  async getFeaturedTestimonials(): Promise<Testimonial[]> {\n    return await db.select().from(testimonials)\n      .where(eq(testimonials.isFeatured, true))\n      .orderBy(asc(testimonials.order));\n  }\n\n  async getTestimonialsByProject(projectId: string): Promise<Testimonial[]> {\n    return await db.select().from(testimonials)\n      .where(eq(testimonials.projectId, projectId))\n      .orderBy(asc(testimonials.order));\n  }\n\n  async getTestimonial(id: string): Promise<Testimonial | undefined> {\n    const [testimonial] = await db.select().from(testimonials).where(eq(testimonials.id, id));\n    return testimonial || undefined;\n  }\n\n  async createTestimonial(testimonial: InsertTestimonial): Promise<Testimonial> {\n    const [newTestimonial] = await db.insert(testimonials).values(testimonial).returning();\n    return newTestimonial;\n  }\n\n  async updateTestimonial(id: string, testimonial: Partial<InsertTestimonial>): Promise<Testimonial | undefined> {\n    const updateData: any = {\n      ...testimonial,\n      updatedAt: new Date()\n    };\n    const [updated] = await db.update(testimonials)\n      .set(updateData)\n      .where(eq(testimonials.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async deleteTestimonial(id: string): Promise<boolean> {\n    const result = await db.delete(testimonials).where(eq(testimonials.id, id));\n    return result.rowCount !== null && result.rowCount > 0;\n  }\n\n  // Newsletter\n  async getAllNewsletterSubscribers(): Promise<NewsletterSubscriber[]> {\n    return await db.select().from(newsletterSubscribers).orderBy(desc(newsletterSubscribers.subscribedAt));\n  }\n\n  async getActiveNewsletterSubscribers(): Promise<NewsletterSubscriber[]> {\n    return await db.select().from(newsletterSubscribers)\n      .where(eq(newsletterSubscribers.isActive, true))\n      .orderBy(desc(newsletterSubscribers.subscribedAt));\n  }\n\n  async getNewsletterSubscriber(id: string): Promise<NewsletterSubscriber | undefined> {\n    const [subscriber] = await db.select().from(newsletterSubscribers).where(eq(newsletterSubscribers.id, id));\n    return subscriber || undefined;\n  }\n\n  async getNewsletterSubscriberByEmail(email: string): Promise<NewsletterSubscriber | undefined> {\n    const [subscriber] = await db.select().from(newsletterSubscribers).where(eq(newsletterSubscribers.email, email));\n    return subscriber || undefined;\n  }\n\n  async createNewsletterSubscriber(subscriber: InsertNewsletterSubscriber): Promise<NewsletterSubscriber> {\n    const [newSubscriber] = await db.insert(newsletterSubscribers).values(subscriber).returning();\n    return newSubscriber;\n  }\n\n  async unsubscribeFromNewsletter(email: string): Promise<boolean> {\n    const result = await db.update(newsletterSubscribers)\n      .set({ \n        isActive: false,\n        unsubscribedAt: new Date()\n      })\n      .where(eq(newsletterSubscribers.email, email));\n    return result.rowCount !== null && result.rowCount > 0;\n  }\n\n  // Analytics\n  async createAnalyticsEntry(entry: InsertAnalytics): Promise<Analytics> {\n    const insertData: any = {\n      ...entry,\n      metadata: entry.metadata || {}\n    };\n    const [newEntry] = await db.insert(analytics).values(insertData).returning();\n    return newEntry;\n  }\n\n  async getAnalyticsByType(type: string, days: number = 30): Promise<Analytics[]> {\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - days);\n    \n    return await db.select().from(analytics)\n      .where(eq(analytics.type, type))\n      .orderBy(desc(analytics.createdAt));\n  }\n\n  async getAnalyticsByDateRange(startDate: Date, endDate: Date): Promise<Analytics[]> {\n    return await db.select().from(analytics)\n      .orderBy(desc(analytics.createdAt));\n  }\n\n  async getPageViewStats(days: number = 30): Promise<{ path: string; views: number }[]> {\n    // This would normally use a more complex query with GROUP BY\n    // For now, returning a simplified version\n    const entries = await this.getAnalyticsByType('page_view', days);\n    const pathCounts: Record<string, number> = {};\n    \n    entries.forEach(entry => {\n      if (entry.path) {\n        pathCounts[entry.path] = (pathCounts[entry.path] || 0) + 1;\n      }\n    });\n    \n    return Object.entries(pathCounts).map(([path, views]) => ({ path, views }));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":20641},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean, json } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Admin Users\nexport const adminUsers = pgTable(\"admin_users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Services\nexport const services = pgTable(\"services\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  titleEn: text(\"title_en\"),\n  description: text(\"description\").notNull(),\n  descriptionEn: text(\"description_en\"),\n  icon: text(\"icon\").notNull(),\n  color: text(\"color\").notNull().default(\"blue\"),\n  features: json(\"features\").$type<string[]>().default([]),\n  featuresEn: json(\"features_en\").$type<string[]>().default([]),\n  isActive: boolean(\"is_active\").default(true),\n  order: integer(\"order\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Projects\nexport const projects = pgTable(\"projects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  titleEn: text(\"title_en\"),\n  description: text(\"description\").notNull(),\n  descriptionEn: text(\"description_en\"),\n  shortDescription: text(\"short_description\"),\n  shortDescriptionEn: text(\"short_description_en\"),\n  technologies: json(\"technologies\").$type<string[]>().default([]),\n  images: json(\"images\").$type<string[]>().default([]),\n  liveUrl: text(\"live_url\"),\n  githubUrl: text(\"github_url\"),\n  category: text(\"category\").notNull().default(\"web\"),\n  isActive: boolean(\"is_active\").default(true),\n  isFeatured: boolean(\"is_featured\").default(false),\n  order: integer(\"order\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// CV/Resume Data\nexport const cvData = pgTable(\"cv_data\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  type: text(\"type\").notNull(), // 'personal', 'summary', 'education', 'experience', 'skill', 'certification', 'project'\n  title: text(\"title\").notNull(),\n  titleEn: text(\"title_en\"),\n  description: text(\"description\"),\n  descriptionEn: text(\"description_en\"),\n  subtitle: text(\"subtitle\"), // Institution, company, etc.\n  subtitleEn: text(\"subtitle_en\"),\n  startDate: text(\"start_date\"),\n  endDate: text(\"end_date\"),\n  location: text(\"location\"),\n  locationEn: text(\"location_en\"),\n  skills: json(\"skills\").$type<string[]>().default([]),\n  level: integer(\"level\"), // For skills 1-5\n  url: text(\"url\"),\n  icon: text(\"icon\"),\n  isActive: boolean(\"is_active\").default(true),\n  order: integer(\"order\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Contact Information\nexport const contactInfo = pgTable(\"contact_info\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  type: text(\"type\").notNull(), // 'email', 'phone', 'social', 'address'\n  label: text(\"label\").notNull(),\n  labelEn: text(\"label_en\"),\n  value: text(\"value\").notNull(),\n  icon: text(\"icon\").notNull(),\n  url: text(\"url\"), // For social media links\n  isPrimary: boolean(\"is_primary\").default(false),\n  isActive: boolean(\"is_active\").default(true),\n  order: integer(\"order\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Contact Messages\nexport const contactMessages = pgTable(\"contact_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  subject: text(\"subject\").notNull(),\n  serviceType: text(\"service_type\"),\n  message: text(\"message\").notNull(),\n  status: text(\"status\").notNull().default(\"unread\"), // 'unread', 'read', 'replied'\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Site Settings\nexport const siteSettings = pgTable(\"site_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  key: text(\"key\").notNull().unique(),\n  value: text(\"value\").notNull(),\n  type: text(\"type\").notNull().default(\"text\"), // 'text', 'number', 'boolean', 'json'\n  category: text(\"category\").default(\"general\"),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Blog Posts\nexport const blogPosts = pgTable(\"blog_posts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  titleEn: text(\"title_en\"),\n  slug: text(\"slug\").notNull().unique(),\n  slugEn: text(\"slug_en\"),\n  content: text(\"content\").notNull(),\n  contentEn: text(\"content_en\"),\n  excerpt: text(\"excerpt\"),\n  excerptEn: text(\"excerpt_en\"),\n  featuredImage: text(\"featured_image\"),\n  tags: json(\"tags\").$type<string[]>().default([]),\n  tagsEn: json(\"tags_en\").$type<string[]>().default([]),\n  category: text(\"category\").notNull().default(\"general\"),\n  categoryEn: text(\"category_en\"),\n  isPublished: boolean(\"is_published\").default(false),\n  isFeatured: boolean(\"is_featured\").default(false),\n  publishedAt: timestamp(\"published_at\"),\n  viewCount: integer(\"view_count\").default(0),\n  readingTime: integer(\"reading_time\").default(5), // minutes\n  authorId: varchar(\"author_id\").references(() => adminUsers.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Testimonials\nexport const testimonials = pgTable(\"testimonials\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientName: text(\"client_name\").notNull(),\n  clientNameEn: text(\"client_name_en\"),\n  clientTitle: text(\"client_title\"),\n  clientTitleEn: text(\"client_title_en\"),\n  clientCompany: text(\"client_company\"),\n  clientCompanyEn: text(\"client_company_en\"),\n  testimonial: text(\"testimonial\").notNull(),\n  testimonialEn: text(\"testimonial_en\"),\n  rating: integer(\"rating\").notNull().default(5), // 1-5 stars\n  clientImage: text(\"client_image\"),\n  projectId: varchar(\"project_id\").references(() => projects.id),\n  isPublished: boolean(\"is_published\").default(true),\n  isFeatured: boolean(\"is_featured\").default(false),\n  order: integer(\"order\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Newsletter Subscribers\nexport const newsletterSubscribers = pgTable(\"newsletter_subscribers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  name: text(\"name\"),\n  isActive: boolean(\"is_active\").default(true),\n  subscribedAt: timestamp(\"subscribed_at\").defaultNow(),\n  unsubscribedAt: timestamp(\"unsubscribed_at\"),\n});\n\n// Analytics Data\nexport const analytics = pgTable(\"analytics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  type: text(\"type\").notNull(), // 'page_view', 'contact_form', 'project_view', 'download'\n  path: text(\"path\"),\n  userAgent: text(\"user_agent\"),\n  ip: text(\"ip\"),\n  country: text(\"country\"),\n  referrer: text(\"referrer\"),\n  sessionId: text(\"session_id\"),\n  metadata: json(\"metadata\").$type<Record<string, any>>().default({}),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertAdminUserSchema = createInsertSchema(adminUsers).pick({\n  username: true,\n  password: true,\n  email: true,\n});\n\nexport const insertServiceSchema = createInsertSchema(services).pick({\n  title: true,\n  titleEn: true,\n  description: true,\n  descriptionEn: true,\n  icon: true,\n  color: true,\n  features: true,\n  featuresEn: true,\n  isActive: true,\n  order: true,\n});\n\nexport const insertProjectSchema = createInsertSchema(projects).pick({\n  title: true,\n  titleEn: true,\n  description: true,\n  descriptionEn: true,\n  shortDescription: true,\n  shortDescriptionEn: true,\n  technologies: true,\n  images: true,\n  liveUrl: true,\n  githubUrl: true,\n  category: true,\n  isActive: true,\n  isFeatured: true,\n  order: true,\n});\n\nexport const insertCvDataSchema = createInsertSchema(cvData).pick({\n  type: true,\n  title: true,\n  titleEn: true,\n  description: true,\n  descriptionEn: true,\n  subtitle: true,\n  subtitleEn: true,\n  startDate: true,\n  endDate: true,\n  location: true,\n  locationEn: true,\n  skills: true,\n  level: true,\n  url: true,\n  icon: true,\n  isActive: true,\n  order: true,\n});\n\nexport const insertContactInfoSchema = createInsertSchema(contactInfo).pick({\n  type: true,\n  label: true,\n  labelEn: true,\n  value: true,\n  icon: true,\n  url: true,\n  isPrimary: true,\n  isActive: true,\n  order: true,\n});\n\nexport const insertContactMessageSchema = createInsertSchema(contactMessages).pick({\n  name: true,\n  email: true,\n  subject: true,\n  serviceType: true,\n  message: true,\n});\n\nexport const insertSiteSettingSchema = createInsertSchema(siteSettings).pick({\n  key: true,\n  value: true,\n  type: true,\n  category: true,\n});\n\nexport const insertBlogPostSchema = createInsertSchema(blogPosts).pick({\n  title: true,\n  titleEn: true,\n  slug: true,\n  slugEn: true,\n  content: true,\n  contentEn: true,\n  excerpt: true,\n  excerptEn: true,\n  featuredImage: true,\n  tags: true,\n  tagsEn: true,\n  category: true,\n  categoryEn: true,\n  isPublished: true,\n  isFeatured: true,\n  publishedAt: true,\n  readingTime: true,\n  authorId: true,\n});\n\nexport const insertTestimonialSchema = createInsertSchema(testimonials).pick({\n  clientName: true,\n  clientNameEn: true,\n  clientTitle: true,\n  clientTitleEn: true,\n  clientCompany: true,\n  clientCompanyEn: true,\n  testimonial: true,\n  testimonialEn: true,\n  rating: true,\n  clientImage: true,\n  projectId: true,\n  isPublished: true,\n  isFeatured: true,\n  order: true,\n});\n\nexport const insertNewsletterSubscriberSchema = createInsertSchema(newsletterSubscribers).pick({\n  email: true,\n  name: true,\n});\n\nexport const insertAnalyticsSchema = createInsertSchema(analytics).pick({\n  type: true,\n  path: true,\n  userAgent: true,\n  ip: true,\n  country: true,\n  referrer: true,\n  sessionId: true,\n  metadata: true,\n});\n\n// Types\nexport type AdminUser = typeof adminUsers.$inferSelect;\nexport type InsertAdminUser = z.infer<typeof insertAdminUserSchema>;\n\nexport type Service = typeof services.$inferSelect;\nexport type InsertService = z.infer<typeof insertServiceSchema>;\n\nexport type Project = typeof projects.$inferSelect;\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\n\nexport type CvData = typeof cvData.$inferSelect;\nexport type InsertCvData = z.infer<typeof insertCvDataSchema>;\n\nexport type ContactInfo = typeof contactInfo.$inferSelect;\nexport type InsertContactInfo = z.infer<typeof insertContactInfoSchema>;\n\nexport type ContactMessage = typeof contactMessages.$inferSelect;\nexport type InsertContactMessage = z.infer<typeof insertContactMessageSchema>;\n\nexport type SiteSetting = typeof siteSettings.$inferSelect;\nexport type InsertSiteSetting = z.infer<typeof insertSiteSettingSchema>;\n\nexport type BlogPost = typeof blogPosts.$inferSelect;\nexport type InsertBlogPost = z.infer<typeof insertBlogPostSchema>;\n\nexport type Testimonial = typeof testimonials.$inferSelect;\nexport type InsertTestimonial = z.infer<typeof insertTestimonialSchema>;\n\nexport type NewsletterSubscriber = typeof newsletterSubscribers.$inferSelect;\nexport type InsertNewsletterSubscriber = z.infer<typeof insertNewsletterSubscriberSchema>;\n\nexport type Analytics = typeof analytics.$inferSelect;\nexport type InsertAnalytics = z.infer<typeof insertAnalyticsSchema>;\n","size_bytes":11589},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"./components/ui/theme-provider\";\nimport { SoundManager } from \"./components/ui/sound-manager\";\nimport LiveChat from \"@/components/ui/live-chat\";\nimport Navbar from \"@/components/layout/navbar\";\nimport Footer from \"@/components/layout/footer\";\nimport HomeNew from \"@/pages/home-new\";\nimport AboutPage from \"@/pages/about-page\";\nimport ServicesPage from \"@/pages/services-page\";\nimport ProjectsPage from \"@/pages/projects-page\";\nimport ContactPage from \"@/pages/contact-page\";\nimport BlogPage from \"@/pages/blog-page\";\nimport BlogDetail from \"@/pages/blog-detail\";\nimport TestimonialsPage from \"@/pages/testimonials-page\";\nimport SearchPage from \"@/pages/search-page\";\nimport AdminLogin from \"@/pages/admin/login\";\nimport AdminDashboard from \"@/pages/admin/dashboard\";\nimport ProjectDetail from \"@/pages/project-detail\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Navbar />\n      <main className=\"flex-1\">\n        <Switch>\n          <Route path=\"/\" component={HomeNew} />\n          <Route path=\"/about\" component={AboutPage} />\n          <Route path=\"/services\" component={ServicesPage} />\n          <Route path=\"/projects\" component={ProjectsPage} />\n          <Route path=\"/contact\" component={ContactPage} />\n          <Route path=\"/blog\" component={BlogPage} />\n          <Route path=\"/blog/:slug\" component={BlogDetail} />\n          <Route path=\"/testimonials\" component={TestimonialsPage} />\n          <Route path=\"/search\" component={SearchPage} />\n          <Route path=\"/admin/login\" component={AdminLogin} />\n          <Route path=\"/admin/dashboard\" component={AdminDashboard} />\n          <Route path=\"/projects/:id\" component={ProjectDetail} />\n          <Route component={NotFound} />\n        </Switch>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <SoundManager>\n            <Toaster />\n            <LiveChat />\n            <Router />\n          </SoundManager>\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2493},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&family=Tajawal:wght@200;300;400;500;700;800;900&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(221.2, 83.2%, 53.3%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(221.2, 83.2%, 53.3%);\n  --radius: 0.75rem;\n  \n  /* Custom Variables */\n  --gradient-primary: linear-gradient(135deg, hsl(221.2, 83.2%, 53.3%) 0%, hsl(142.1, 76.2%, 36.3%) 25%, hsl(262.1, 83.3%, 57.8%) 50%, hsl(346.8, 77.2%, 49.8%) 75%, hsl(221.2, 83.2%, 53.3%) 100%);\n  --gradient-secondary: linear-gradient(135deg, hsl(262.1, 83.3%, 57.8%) 0%, hsl(346.8, 77.2%, 49.8%) 50%, hsl(221.2, 83.2%, 53.3%) 100%);\n  --gradient-accent: linear-gradient(45deg, hsl(346.8, 77.2%, 49.8%), hsl(262.1, 83.3%, 57.8%));\n  --glass-bg: rgba(255, 255, 255, 0.1);\n  --glass-border: rgba(255, 255, 255, 0.2);\n  --backdrop-blur: blur(10px);\n  \n  /* Arabic Fonts */\n  --font-arabic: 'Tajawal', sans-serif;\n  --font-english: 'Inter', sans-serif;\n  --font-sans: var(--font-arabic);\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  \n  /* Shadow Variables */\n  --shadow-2xs: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.05);\n  --shadow-xs: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.05);\n  --shadow-sm: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.05), 0px 1px 2px -1px hsl(221.2, 83.2%, 53.3%, 0.05);\n  --shadow: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.05), 0px 1px 2px -1px hsl(221.2, 83.2%, 53.3%, 0.05);\n  --shadow-md: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.1), 0px 2px 4px -1px hsl(221.2, 83.2%, 53.3%, 0.1);\n  --shadow-lg: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.1), 0px 4px 6px -1px hsl(221.2, 83.2%, 53.3%, 0.1);\n  --shadow-xl: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.25), 0px 8px 10px -1px hsl(221.2, 83.2%, 53.3%, 0.1);\n  --shadow-2xl: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.25);\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217.2, 91.2%, 59.8%);\n  --primary-foreground: hsl(222.2, 84%, 4.9%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(217.2, 32.6%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(224.3, 76.3%, 94.1%);\n  \n  /* Dark Mode Custom Variables */\n  --glass-bg: rgba(255, 255, 255, 0.05);\n  --glass-border: rgba(255, 255, 255, 0.1);\n  --backdrop-blur: blur(20px);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground transition-all duration-300;\n    font-family: var(--font-sans);\n  }\n  \n  html {\n    scroll-behavior: smooth;\n  }\n  \n  h1, h2, h3, h4, h5, h6 {\n    font-family: var(--font-arabic);\n    font-weight: 700;\n  }\n  \n  .en {\n    font-family: var(--font-english);\n  }\n}\n\n@layer components {\n  .gradient-text {\n    background: var(--gradient-primary);\n    background-size: 400% 400%;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n    color: transparent;\n    animation: gradient-shift 4s ease-in-out infinite;\n  }\n  \n  @keyframes gradient-shift {\n    0%, 100% {\n      background-position: 0% 50%;\n    }\n    50% {\n      background-position: 100% 50%;\n    }\n  }\n  \n  .text-shadow-lg {\n    text-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);\n  }\n  \n  .modern-card {\n    background: linear-gradient(145deg, rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.05));\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    border-radius: 20px;\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n  \n  .modern-card:hover {\n    transform: translateY(-10px) scale(1.02);\n    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.2);\n    border-color: rgba(255, 255, 255, 0.2);\n  }\n  \n  .glass-card {\n    background: var(--glass-bg);\n    backdrop-filter: var(--backdrop-blur);\n    border: 1px solid var(--glass-border);\n    box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);\n  }\n  \n  .hover-lift {\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n  \n  .hover-lift:hover {\n    transform: translateY(-8px);\n    box-shadow: var(--shadow-2xl);\n  }\n  \n  .particle-bg {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    z-index: -1;\n  }\n  \n  .floating-animation {\n    animation: floating 6s ease-in-out infinite;\n  }\n  \n  .scroll-reveal {\n    opacity: 0;\n    transform: translateY(30px);\n    transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n  \n  .scroll-reveal.revealed {\n    opacity: 1;\n    transform: translateY(0);\n  }\n  \n  .navigation-blur {\n    backdrop-filter: blur(20px);\n    background: rgba(255, 255, 255, 0.8);\n    border-bottom: 1px solid var(--border);\n  }\n  \n  .dark .navigation-blur {\n    background: rgba(15, 23, 42, 0.8);\n  }\n  \n  .skill-bar {\n    position: relative;\n    background: var(--muted);\n    border-radius: var(--radius);\n    overflow: hidden;\n    height: 8px;\n  }\n  \n  .skill-progress {\n    height: 100%;\n    background: var(--gradient-primary);\n    border-radius: var(--radius);\n    transition: width 2s ease-in-out;\n  }\n  \n  .project-card {\n    @apply cursor-pointer;\n    transition: all 0.3s ease;\n  }\n  \n  .project-card:hover {\n    transform: translateY(-4px);\n  }\n  \n  .project-card img {\n    transition: transform 0.3s ease;\n  }\n  \n  .project-card:hover img {\n    transform: scale(1.05);\n  }\n  \n  .contact-form {\n    @apply space-y-6;\n  }\n  \n  .form-input {\n    @apply w-full px-4 py-3 border border-input rounded-lg focus:ring-2 focus:ring-ring focus:border-transparent bg-background transition-all duration-200;\n  }\n  \n  .btn-primary {\n    @apply bg-primary text-primary-foreground px-8 py-4 rounded-lg font-semibold transition-all hover:scale-105 shadow-lg;\n  }\n  \n  .btn-primary:hover {\n    background: var(--primary);\n    filter: brightness(0.9);\n  }\n  \n  .btn-secondary {\n    @apply border border-border hover:bg-accent text-foreground px-8 py-4 rounded-lg font-semibold transition-all hover:scale-105;\n  }\n  \n  .social-link {\n    @apply flex items-center gap-3 px-6 py-3 rounded-lg hover:scale-105 transition-transform text-white font-semibold;\n  }\n  \n  .stats-card {\n    @apply glass-card rounded-lg p-4 hover-lift text-center;\n  }\n  \n  .service-card {\n    @apply bg-card border border-border rounded-xl p-8 hover-lift glass-card;\n  }\n  \n  .cv-section {\n    @apply bg-card border border-border rounded-xl p-8 glass-card;\n  }\n}\n\n@layer utilities {\n  .text-gradient {\n    @apply gradient-text;\n  }\n  \n  .rtl {\n    direction: rtl;\n  }\n  \n  .ltr {\n    direction: ltr;\n  }\n}\n\n@keyframes floating {\n  0%, 100% { \n    transform: translateY(0px); \n  }\n  50% { \n    transform: translateY(-20px); \n  }\n}\n\n@keyframes fadeInUp {\n  from {\n    opacity: 0;\n    transform: translateY(30px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes pulse-glow {\n  0%, 100% {\n    box-shadow: 0 0 5px var(--primary), 0 0 10px var(--primary), 0 0 15px var(--primary);\n  }\n  50% {\n    box-shadow: 0 0 10px var(--primary), 0 0 20px var(--primary), 0 0 30px var(--primary);\n  }\n}\n\n.animate-fade-in-up {\n  animation: fadeInUp 0.8s ease-out;\n}\n\n.animate-pulse-glow {\n  animation: pulse-glow 2s ease-in-out infinite;\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: var(--muted);\n}\n\n::-webkit-scrollbar-thumb {\n  background: var(--primary);\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(221.2, 83.2%, 45%);\n}\n\n/* Print styles */\n@media print {\n  .no-print {\n    display: none !important;\n  }\n  \n  body {\n    background: white !important;\n    color: black !important;\n  }\n  \n  .glass-card {\n    background: white !important;\n    border: 1px solid #ccc !important;\n    box-shadow: none !important;\n  }\n}\n","size_bytes":8879},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-sound.tsx":{"content":"import { useSound as useSoundBase } from \"../components/ui/sound-manager\";\n\nexport const useSound = useSoundBase;\n","size_bytes":114},"client/src/hooks/use-theme.tsx":{"content":"import { useTheme as useThemeBase } from \"../components/ui/theme-provider\";\n\nexport const useTheme = useThemeBase;\n","size_bytes":115},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"export function isAuthenticated(): boolean {\n  const token = localStorage.getItem(\"admin_token\");\n  return !!token;\n}\n\nexport function getAuthHeaders(): Record<string, string> {\n  const token = localStorage.getItem(\"admin_token\");\n  return token ? { \"Authorization\": `Bearer ${token}` } : {};\n}\n\nexport function getAdminUser() {\n  const userStr = localStorage.getItem(\"admin_user\");\n  try {\n    return userStr ? JSON.parse(userStr) : null;\n  } catch {\n    return null;\n  }\n}\n\nexport function logout() {\n  localStorage.removeItem(\"admin_token\");\n  localStorage.removeItem(\"admin_user\");\n}\n","size_bytes":588},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport HeroSection from \"@/components/sections/hero\";\nimport ServicesSection from \"@/components/sections/services\";\nimport ProjectsSection from \"@/components/sections/projects\";\nimport CVSection from \"@/components/sections/cv\";\nimport ContactSection from \"@/components/sections/contact\";\nimport { useEffect } from \"react\";\n\nexport default function Home() {\n  useEffect(() => {\n    // Scroll reveal animation observer\n    const observerOptions = {\n      threshold: 0.1,\n      rootMargin: '0px 0px -50px 0px'\n    };\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          entry.target.classList.add('revealed');\n        }\n      });\n    }, observerOptions);\n\n    // Observe all scroll-reveal elements\n    const scrollRevealElements = document.querySelectorAll('.scroll-reveal');\n    scrollRevealElements.forEach(el => {\n      observer.observe(el);\n    });\n\n    return () => {\n      scrollRevealElements.forEach(el => {\n        observer.unobserve(el);\n      });\n    };\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\" dir=\"rtl\">\n      <Header />\n      <main>\n        <HeroSection />\n        <ServicesSection />\n        <ProjectsSection />\n        <CVSection />\n        <ContactSection />\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":1453},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/project-detail.tsx":{"content":"import { useParams, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useSound } from \"@/hooks/use-sound\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport type { Project } from \"@shared/schema\";\n\nexport default function ProjectDetail() {\n  const { id } = useParams();\n  const [, setLocation] = useLocation();\n  const { playClickSound, playHoverSound } = useSound();\n\n  const { data: project, isLoading, error } = useQuery<Project>({\n    queryKey: [\"/api/projects\", id],\n    queryFn: async () => {\n      const response = await fetch(`/api/projects/${id}`);\n      if (!response.ok) throw new Error(\"Project not found\");\n      return response.json();\n    },\n  });\n\n  const handleBackToProjects = () => {\n    playClickSound();\n    setLocation(\"/#projects\");\n    // Scroll to projects section after navigation\n    setTimeout(() => {\n      const projectsSection = document.getElementById(\"projects\");\n      if (projectsSection) {\n        projectsSection.scrollIntoView({ behavior: \"smooth\" });\n      }\n    }, 100);\n  };\n\n  const handleExternalLink = (url: string | null | undefined) => {\n    if (!url || url === \"#\") return;\n    playClickSound();\n    window.open(url, \"_blank\", \"noopener noreferrer\");\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\" dir=\"rtl\">\n        <Header />\n        <main className=\"container mx-auto px-4 py-24\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"animate-pulse space-y-8\">\n              <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n              <div className=\"h-64 bg-muted rounded\"></div>\n              <div className=\"space-y-4\">\n                <div className=\"h-6 bg-muted rounded\"></div>\n                <div className=\"h-6 bg-muted rounded w-5/6\"></div>\n                <div className=\"h-6 bg-muted rounded w-4/6\"></div>\n              </div>\n            </div>\n          </div>\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (error || !project) {\n    return (\n      <div className=\"min-h-screen bg-background\" dir=\"rtl\">\n        <Header />\n        <main className=\"container mx-auto px-4 py-24\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <Card className=\"p-12\">\n              <i className=\"fas fa-exclamation-triangle text-6xl text-muted-foreground mb-6\"></i>\n              <h1 className=\"text-3xl font-bold mb-4\">المشروع غير موجود</h1>\n              <p className=\"text-muted-foreground mb-8\">\n                عذراً، المشروع الذي تبحث عنه غير متوفر أو تم حذفه.\n              </p>\n              <Button onClick={handleBackToProjects} className=\"btn-primary\">\n                <i className=\"fas fa-arrow-right ml-2\"></i>\n                العودة إلى المشاريع\n              </Button>\n            </Card>\n          </div>\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\" dir=\"rtl\">\n      <Header />\n      <main className=\"container mx-auto px-4 py-24\">\n        <div className=\"max-w-4xl mx-auto\">\n          {/* Back Button */}\n          <Button\n            variant=\"outline\"\n            onClick={handleBackToProjects}\n            onMouseEnter={playHoverSound}\n            className=\"mb-8\"\n            data-testid=\"button-back-to-projects\"\n          >\n            <i className=\"fas fa-arrow-right ml-2\"></i>\n            العودة إلى المشاريع\n          </Button>\n\n          {/* Project Header */}\n          <div className=\"mb-8\">\n            <h1 className=\"text-4xl md:text-5xl font-bold mb-4 gradient-text\">\n              {project.title}\n            </h1>\n            <div className=\"flex flex-wrap gap-2 mb-4\">\n              {project.technologies?.map((tech) => (\n                <Badge key={tech} variant=\"secondary\" className=\"px-3 py-1\">\n                  {tech}\n                </Badge>\n              ))}\n            </div>\n            <div className=\"flex gap-4\">\n              {project.liveUrl && project.liveUrl !== \"#\" && (\n                <Button\n                  onClick={() => handleExternalLink(project.liveUrl)}\n                  onMouseEnter={playHoverSound}\n                  className=\"btn-primary\"\n                  data-testid=\"button-view-live\"\n                >\n                  <i className=\"fas fa-external-link-alt ml-2\"></i>\n                  عرض المشروع المباشر\n                </Button>\n              )}\n              {project.githubUrl && project.githubUrl !== \"#\" && (\n                <Button\n                  onClick={() => handleExternalLink(project.githubUrl)}\n                  onMouseEnter={playHoverSound}\n                  variant=\"outline\"\n                  data-testid=\"button-view-github\"\n                >\n                  <i className=\"fab fa-github ml-2\"></i>\n                  عرض الكود المصدري\n                </Button>\n              )}\n            </div>\n          </div>\n\n          {/* Project Images */}\n          {project.images && project.images.length > 0 && (\n            <div className=\"mb-8\">\n              <div className=\"grid gap-4\">\n                {project.images.map((image, index) => (\n                  <div key={index} className=\"overflow-hidden rounded-xl shadow-lg\">\n                    <img\n                      src={image}\n                      alt={`${project.title} - صورة ${index + 1}`}\n                      className=\"w-full h-auto object-cover hover:scale-105 transition-transform duration-300\"\n                      data-testid={`project-image-${index}`}\n                    />\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Project Description */}\n          <Card className=\"p-8 mb-8 glass-card\">\n            <h2 className=\"text-2xl font-bold mb-6 flex items-center\">\n              <i className=\"fas fa-info-circle text-primary ml-3\"></i>\n              وصف المشروع\n            </h2>\n            <div className=\"prose prose-lg max-w-none text-muted-foreground\">\n              {project.description?.split('\\n').map((paragraph, index) => (\n                <p key={index} className=\"mb-4 leading-relaxed\">\n                  {paragraph}\n                </p>\n              ))}\n            </div>\n          </Card>\n\n          {/* Project Details */}\n          <Card className=\"p-8 glass-card\">\n            <h2 className=\"text-2xl font-bold mb-6 flex items-center\">\n              <i className=\"fas fa-cog text-primary ml-3\"></i>\n              تفاصيل تقنية\n            </h2>\n            <div className=\"grid md:grid-cols-2 gap-8\">\n              <div>\n                <h3 className=\"font-semibold text-lg mb-4\">التقنيات المستخدمة</h3>\n                <div className=\"space-y-2\">\n                  {project.technologies?.map((tech, index) => (\n                    <div key={index} className=\"flex items-center gap-2\">\n                      <i className=\"fas fa-check text-green-500\"></i>\n                      <span>{tech}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-lg mb-4\">معلومات إضافية</h3>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2\">\n                    <i className=\"fas fa-tag text-primary\"></i>\n                    <span>الفئة: {project.category}</span>\n                  </div>\n                  {project.isFeatured && (\n                    <div className=\"flex items-center gap-2\">\n                      <i className=\"fas fa-star text-yellow-500\"></i>\n                      <span>مشروع مميز</span>\n                    </div>\n                  )}\n                  <div className=\"flex items-center gap-2\">\n                    <i className=\"fas fa-calendar text-primary\"></i>\n                    <span>تاريخ الإنشاء: {new Date(project.createdAt).toLocaleDateString('ar')}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </Card>\n\n          {/* Call to Action */}\n          <div className=\"text-center mt-12\">\n            <h3 className=\"text-2xl font-bold mb-4\">هل لديك مشروع مشابه؟</h3>\n            <p className=\"text-muted-foreground mb-6\">\n              تواصل معنا لنناقش كيف يمكننا مساعدتك في تطوير مشروعك القادم\n            </p>\n            <Button\n              onClick={() => {\n                playClickSound();\n                setLocation(\"/#contact\");\n                setTimeout(() => {\n                  const contactSection = document.getElementById(\"contact\");\n                  if (contactSection) {\n                    contactSection.scrollIntoView({ behavior: \"smooth\" });\n                  }\n                }, 100);\n              }}\n              onMouseEnter={playHoverSound}\n              className=\"btn-primary\"\n              data-testid=\"button-contact-us\"\n            >\n              <i className=\"fas fa-envelope ml-2\"></i>\n              تواصل معنا\n            </Button>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":9490},"client/src/components/admin/cv-form.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { getAuthHeaders } from \"@/lib/auth\";\nimport { insertCvDataSchema, type CvData } from \"@shared/schema\";\nimport { useState } from \"react\";\n\ninterface CVFormProps {\n  cvData?: CvData;\n  onClose: () => void;\n}\n\nexport default function CVForm({ cvData, onClose }: CVFormProps) {\n  const [skills, setSkills] = useState<string[]>(cvData?.skills || []);\n  const [newSkill, setNewSkill] = useState(\"\");\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const form = useForm({\n    resolver: zodResolver(insertCvDataSchema),\n    defaultValues: {\n      type: cvData?.type || \"experience\",\n      title: cvData?.title || \"\",\n      titleEn: cvData?.titleEn || \"\",\n      description: cvData?.description || \"\",\n      descriptionEn: cvData?.descriptionEn || \"\",\n      subtitle: cvData?.subtitle || \"\",\n      subtitleEn: cvData?.subtitleEn || \"\",\n      startDate: cvData?.startDate || \"\",\n      endDate: cvData?.endDate || \"\",\n      location: cvData?.location || \"\",\n      locationEn: cvData?.locationEn || \"\",\n      skills: cvData?.skills || [],\n      level: cvData?.level || 1,\n      url: cvData?.url || \"\",\n      icon: cvData?.icon || \"fas fa-briefcase\",\n      isActive: cvData?.isActive ?? true,\n      order: cvData?.order || 0,\n    },\n  });\n\n  const mutation = useMutation({\n    mutationFn: async (data: any) => {\n      const payload = {\n        ...data,\n        skills,\n      };\n      \n      if (cvData?.id) {\n        const response = await fetch(`/api/admin/cv/${cvData.id}`, {\n          method: \"PUT\",\n          headers: {\n            ...getAuthHeaders(),\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(payload),\n        });\n        if (!response.ok) throw new Error(\"Failed to update CV data\");\n        return response.json();\n      } else {\n        return await apiRequest(\"POST\", \"/api/admin/cv\", payload);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/cv\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/cv\"] });\n      toast({\n        title: cvData?.id ? \"تم تحديث البيانات بنجاح\" : \"تم إضافة البيانات بنجاح\",\n      });\n      onClose();\n    },\n    onError: (error) => {\n      toast({\n        variant: \"destructive\",\n        title: \"خطأ\",\n        description: error instanceof Error ? error.message : \"حدث خطأ غير متوقع\",\n      });\n    },\n  });\n\n  const addSkill = () => {\n    if (newSkill.trim() && !skills.includes(newSkill.trim())) {\n      setSkills([...skills, newSkill.trim()]);\n      setNewSkill(\"\");\n    }\n  };\n\n  const removeSkill = (skill: string) => {\n    setSkills(skills.filter(s => s !== skill));\n  };\n\n  const onSubmit = (data: any) => {\n    mutation.mutate(data);\n  };\n\n  const typeOptions = [\n    { value: \"personal\", label: \"معلومات شخصية\" },\n    { value: \"summary\", label: \"ملخص مهني\" },\n    { value: \"education\", label: \"تعليم\" },\n    { value: \"experience\", label: \"خبرة\" },\n    { value: \"skill\", label: \"مهارة\" },\n    { value: \"certification\", label: \"شهادة\" },\n    { value: \"project\", label: \"مشروع\" },\n    { value: \"language\", label: \"لغة\" },\n    { value: \"hobby\", label: \"هواية\" },\n  ];\n\n  const iconOptions = [\n    { value: \"fas fa-user\", label: \"مستخدم\" },\n    { value: \"fas fa-graduation-cap\", label: \"تخرج\" },\n    { value: \"fas fa-briefcase\", label: \"حقيبة\" },\n    { value: \"fas fa-code\", label: \"كود\" },\n    { value: \"fas fa-certificate\", label: \"شهادة\" },\n    { value: \"fas fa-award\", label: \"جائزة\" },\n    { value: \"fas fa-trophy\", label: \"كأس\" },\n    { value: \"fas fa-star\", label: \"نجمة\" },\n    { value: \"fas fa-heart\", label: \"قلب\" },\n    { value: \"fas fa-globe\", label: \"كرة أرضية\" },\n  ];\n\n  return (\n    <Card className=\"max-w-4xl mx-auto\">\n      <CardHeader>\n        <CardTitle>\n          {cvData?.id ? \"تعديل بيانات السيرة الذاتية\" : \"إضافة بيانات جديدة للسيرة الذاتية\"}\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"type\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>نوع البيانات</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-cv-type\">\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {typeOptions.map((type) => (\n                          <SelectItem key={type.value} value={type.value}>\n                            {type.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"icon\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>الأيقونة</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-cv-icon\">\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {iconOptions.map((icon) => (\n                          <SelectItem key={icon.value} value={icon.value}>\n                            <div className=\"flex items-center gap-2\">\n                              <i className={icon.value}></i>\n                              {icon.label}\n                            </div>\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"title\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>العنوان (العربية)</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-cv-title\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"titleEn\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>العنوان (الإنجليزية)</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-cv-title-en\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"subtitle\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>العنوان الفرعي (العربية)</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-cv-subtitle\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"subtitleEn\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>العنوان الفرعي (الإنجليزية)</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-cv-subtitle-en\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>الوصف (العربية)</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        {...field} \n                        rows={4} \n                        data-testid=\"textarea-cv-description\" \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"descriptionEn\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>الوصف (الإنجليزية)</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        {...field} \n                        rows={4} \n                        data-testid=\"textarea-cv-description-en\" \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid md:grid-cols-4 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"startDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>تاريخ البداية</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-cv-start-date\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"endDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>تاريخ النهاية</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-cv-end-date\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"location\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>الموقع</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-cv-location\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"level\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>المستوى (1-5)</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        type=\"number\" \n                        min=\"1\" \n                        max=\"5\"\n                        onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                        data-testid=\"input-cv-level\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"url\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>الرابط</FormLabel>\n                  <FormControl>\n                    <Input {...field} data-testid=\"input-cv-url\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Skills */}\n            <div>\n              <label className=\"text-sm font-medium\">المهارات</label>\n              <div className=\"flex gap-2 mt-2\">\n                <Input\n                  value={newSkill}\n                  onChange={(e) => setNewSkill(e.target.value)}\n                  placeholder=\"أضف مهارة جديدة\"\n                  onKeyPress={(e) => e.key === \"Enter\" && (e.preventDefault(), addSkill())}\n                  data-testid=\"input-new-skill\"\n                />\n                <Button type=\"button\" onClick={addSkill} data-testid=\"button-add-skill\">\n                  إضافة\n                </Button>\n              </div>\n              <div className=\"flex flex-wrap gap-2 mt-3\">\n                {skills.map((skill) => (\n                  <div key={skill} className=\"flex items-center gap-2 bg-primary/10 px-3 py-1 rounded-full\">\n                    <span className=\"text-sm\">{skill}</span>\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeSkill(skill)}\n                      className=\"h-4 w-4 p-0\"\n                      data-testid={`button-remove-skill-${skill}`}\n                    >\n                      ×\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"isActive\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel className=\"text-base\">نشط</FormLabel>\n                      <div className=\"text-sm text-muted-foreground\">\n                        إظهار البيانات في الموقع\n                      </div>\n                    </div>\n                    <FormControl>\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"switch-cv-active\"\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"order\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>ترتيب العرض</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        type=\"number\" \n                        onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                        data-testid=\"input-cv-order\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"flex gap-4\">\n              <Button \n                type=\"submit\" \n                disabled={mutation.isPending}\n                data-testid=\"button-save-cv\"\n              >\n                {mutation.isPending ? \"جاري الحفظ...\" : \"حفظ البيانات\"}\n              </Button>\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={onClose}\n                data-testid=\"button-cancel-cv\"\n              >\n                إلغاء\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":17037},"client/src/components/admin/project-form.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { getAuthHeaders } from \"@/lib/auth\";\nimport { insertProjectSchema, type Project } from \"@shared/schema\";\nimport { useState } from \"react\";\n\ninterface ProjectFormProps {\n  project?: Project;\n  onClose: () => void;\n}\n\nexport default function ProjectForm({ project, onClose }: ProjectFormProps) {\n  const [technologies, setTechnologies] = useState<string[]>(project?.technologies || []);\n  const [images, setImages] = useState<string[]>(project?.images || []);\n  const [newTech, setNewTech] = useState(\"\");\n  const [newImage, setNewImage] = useState(\"\");\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const form = useForm({\n    resolver: zodResolver(insertProjectSchema),\n    defaultValues: {\n      title: project?.title || \"\",\n      titleEn: project?.titleEn || \"\",\n      description: project?.description || \"\",\n      descriptionEn: project?.descriptionEn || \"\",\n      shortDescription: project?.shortDescription || \"\",\n      shortDescriptionEn: project?.shortDescriptionEn || \"\",\n      technologies: project?.technologies || [],\n      images: project?.images || [],\n      liveUrl: project?.liveUrl || \"\",\n      githubUrl: project?.githubUrl || \"\",\n      category: project?.category || \"web\",\n      isActive: project?.isActive ?? true,\n      isFeatured: project?.isFeatured ?? false,\n      order: project?.order || 0,\n    },\n  });\n\n  const mutation = useMutation({\n    mutationFn: async (data: any) => {\n      const payload = {\n        ...data,\n        technologies,\n        images,\n      };\n      \n      if (project?.id) {\n        const response = await fetch(`/api/admin/projects/${project.id}`, {\n          method: \"PUT\",\n          headers: {\n            ...getAuthHeaders(),\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(payload),\n        });\n        if (!response.ok) throw new Error(\"Failed to update project\");\n        return response.json();\n      } else {\n        return await apiRequest(\"POST\", \"/api/admin/projects\", payload);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/projects\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      toast({\n        title: project?.id ? \"تم تحديث المشروع بنجاح\" : \"تم إضافة المشروع بنجاح\",\n      });\n      onClose();\n    },\n    onError: (error) => {\n      toast({\n        variant: \"destructive\",\n        title: \"خطأ\",\n        description: error instanceof Error ? error.message : \"حدث خطأ غير متوقع\",\n      });\n    },\n  });\n\n  const addTechnology = () => {\n    if (newTech.trim() && !technologies.includes(newTech.trim())) {\n      setTechnologies([...technologies, newTech.trim()]);\n      setNewTech(\"\");\n    }\n  };\n\n  const removeTechnology = (tech: string) => {\n    setTechnologies(technologies.filter(t => t !== tech));\n  };\n\n  const addImage = () => {\n    if (newImage.trim() && !images.includes(newImage.trim())) {\n      setImages([...images, newImage.trim()]);\n      setNewImage(\"\");\n    }\n  };\n\n  const removeImage = (image: string) => {\n    setImages(images.filter(i => i !== image));\n  };\n\n  const onSubmit = (data: any) => {\n    mutation.mutate(data);\n  };\n\n  const categories = [\n    { value: \"web\", label: \"تطوير الويب\" },\n    { value: \"mobile\", label: \"تطبيقات الموبايل\" },\n    { value: \"ai\", label: \"الذكاء الاصطناعي\" },\n    { value: \"desktop\", label: \"تطبيقات سطح المكتب\" },\n    { value: \"blockchain\", label: \"البلوك تشين\" },\n    { value: \"iot\", label: \"إنترنت الأشياء\" },\n  ];\n\n  return (\n    <Card className=\"max-w-4xl mx-auto\">\n      <CardHeader>\n        <CardTitle>\n          {project?.id ? \"تعديل المشروع\" : \"إضافة مشروع جديد\"}\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"title\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>العنوان (العربية)</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-project-title\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"titleEn\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>العنوان (الإنجليزية)</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-project-title-en\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>الوصف التفصيلي</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      {...field} \n                      rows={6} \n                      data-testid=\"textarea-project-description\" \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"shortDescription\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>الوصف المختصر</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        {...field} \n                        rows={3} \n                        data-testid=\"textarea-project-short-description\" \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"category\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>الفئة</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-project-category\">\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {categories.map((category) => (\n                          <SelectItem key={category.value} value={category.value}>\n                            {category.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Technologies */}\n            <div>\n              <label className=\"text-sm font-medium\">التقنيات المستخدمة</label>\n              <div className=\"flex gap-2 mt-2\">\n                <Input\n                  value={newTech}\n                  onChange={(e) => setNewTech(e.target.value)}\n                  placeholder=\"أضف تقنية جديدة\"\n                  onKeyPress={(e) => e.key === \"Enter\" && (e.preventDefault(), addTechnology())}\n                  data-testid=\"input-new-technology\"\n                />\n                <Button type=\"button\" onClick={addTechnology} data-testid=\"button-add-technology\">\n                  إضافة\n                </Button>\n              </div>\n              <div className=\"flex flex-wrap gap-2 mt-3\">\n                {technologies.map((tech) => (\n                  <div key={tech} className=\"flex items-center gap-2 bg-primary/10 px-3 py-1 rounded-full\">\n                    <span className=\"text-sm\">{tech}</span>\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeTechnology(tech)}\n                      className=\"h-4 w-4 p-0\"\n                      data-testid={`button-remove-tech-${tech}`}\n                    >\n                      ×\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Images */}\n            <div>\n              <label className=\"text-sm font-medium\">صور المشروع</label>\n              <div className=\"flex gap-2 mt-2\">\n                <Input\n                  value={newImage}\n                  onChange={(e) => setNewImage(e.target.value)}\n                  placeholder=\"رابط الصورة\"\n                  onKeyPress={(e) => e.key === \"Enter\" && (e.preventDefault(), addImage())}\n                  data-testid=\"input-new-image\"\n                />\n                <Button type=\"button\" onClick={addImage} data-testid=\"button-add-image\">\n                  إضافة\n                </Button>\n              </div>\n              <div className=\"space-y-2 mt-3\">\n                {images.map((image, index) => (\n                  <div key={index} className=\"flex items-center gap-2 p-2 border rounded\">\n                    <img src={image} alt={`صورة ${index + 1}`} className=\"w-12 h-12 object-cover rounded\" />\n                    <span className=\"flex-1 text-sm truncate\">{image}</span>\n                    <Button\n                      type=\"button\"\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      onClick={() => removeImage(image)}\n                      data-testid={`button-remove-image-${index}`}\n                    >\n                      حذف\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"liveUrl\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>رابط المشروع المباشر</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-project-live-url\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"githubUrl\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>رابط الكود المصدري</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-project-github-url\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid md:grid-cols-3 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"isActive\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel className=\"text-base\">نشط</FormLabel>\n                      <div className=\"text-sm text-muted-foreground\">\n                        إظهار المشروع في الموقع\n                      </div>\n                    </div>\n                    <FormControl>\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"switch-project-active\"\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"isFeatured\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel className=\"text-base\">مميز</FormLabel>\n                      <div className=\"text-sm text-muted-foreground\">\n                        عرض في المشاريع المميزة\n                      </div>\n                    </div>\n                    <FormControl>\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"switch-project-featured\"\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"order\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>ترتيب العرض</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        type=\"number\" \n                        onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                        data-testid=\"input-project-order\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"flex gap-4\">\n              <Button \n                type=\"submit\" \n                disabled={mutation.isPending}\n                data-testid=\"button-save-project\"\n              >\n                {mutation.isPending ? \"جاري الحفظ...\" : \"حفظ المشروع\"}\n              </Button>\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={onClose}\n                data-testid=\"button-cancel-project\"\n              >\n                إلغاء\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":15338},"client/src/components/admin/service-form.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { getAuthHeaders } from \"@/lib/auth\";\nimport { insertServiceSchema, type Service } from \"@shared/schema\";\nimport { useState } from \"react\";\n\ninterface ServiceFormProps {\n  service?: Service;\n  onClose: () => void;\n}\n\nexport default function ServiceForm({ service, onClose }: ServiceFormProps) {\n  const [features, setFeatures] = useState<string[]>(service?.features || []);\n  const [featuresEn, setFeaturesEn] = useState<string[]>(service?.featuresEn || []);\n  const [newFeature, setNewFeature] = useState(\"\");\n  const [newFeatureEn, setNewFeatureEn] = useState(\"\");\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const form = useForm({\n    resolver: zodResolver(insertServiceSchema),\n    defaultValues: {\n      title: service?.title || \"\",\n      titleEn: service?.titleEn || \"\",\n      description: service?.description || \"\",\n      descriptionEn: service?.descriptionEn || \"\",\n      icon: service?.icon || \"fas fa-cog\",\n      color: service?.color || \"blue\",\n      features: service?.features || [],\n      featuresEn: service?.featuresEn || [],\n      isActive: service?.isActive ?? true,\n      order: service?.order || 0,\n    },\n  });\n\n  const mutation = useMutation({\n    mutationFn: async (data: any) => {\n      const payload = {\n        ...data,\n        features,\n        featuresEn,\n      };\n      \n      if (service?.id) {\n        const response = await fetch(`/api/admin/services/${service.id}`, {\n          method: \"PUT\",\n          headers: {\n            ...getAuthHeaders(),\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(payload),\n        });\n        if (!response.ok) throw new Error(\"Failed to update service\");\n        return response.json();\n      } else {\n        return await apiRequest(\"POST\", \"/api/admin/services\", payload);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/services\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      toast({\n        title: service?.id ? \"تم تحديث الخدمة بنجاح\" : \"تم إضافة الخدمة بنجاح\",\n      });\n      onClose();\n    },\n    onError: (error) => {\n      toast({\n        variant: \"destructive\",\n        title: \"خطأ\",\n        description: error instanceof Error ? error.message : \"حدث خطأ غير متوقع\",\n      });\n    },\n  });\n\n  const addFeature = () => {\n    if (newFeature.trim() && !features.includes(newFeature.trim())) {\n      setFeatures([...features, newFeature.trim()]);\n      setNewFeature(\"\");\n    }\n  };\n\n  const removeFeature = (feature: string) => {\n    setFeatures(features.filter(f => f !== feature));\n  };\n\n  const addFeatureEn = () => {\n    if (newFeatureEn.trim() && !featuresEn.includes(newFeatureEn.trim())) {\n      setFeaturesEn([...featuresEn, newFeatureEn.trim()]);\n      setNewFeatureEn(\"\");\n    }\n  };\n\n  const removeFeatureEn = (feature: string) => {\n    setFeaturesEn(featuresEn.filter(f => f !== feature));\n  };\n\n  const onSubmit = (data: any) => {\n    mutation.mutate(data);\n  };\n\n  const colorOptions = [\n    { value: \"blue\", label: \"أزرق\" },\n    { value: \"green\", label: \"أخضر\" },\n    { value: \"purple\", label: \"بنفسجي\" },\n    { value: \"orange\", label: \"برتقالي\" },\n    { value: \"cyan\", label: \"سماوي\" },\n    { value: \"red\", label: \"أحمر\" },\n    { value: \"pink\", label: \"وردي\" },\n    { value: \"indigo\", label: \"نيلي\" },\n  ];\n\n  const iconOptions = [\n    { value: \"fas fa-globe\", label: \"موقع ويب\" },\n    { value: \"fas fa-mobile-alt\", label: \"موبايل\" },\n    { value: \"fas fa-brain\", label: \"ذكاء اصطناعي\" },\n    { value: \"fas fa-database\", label: \"قاعدة بيانات\" },\n    { value: \"fas fa-cloud\", label: \"سحابة\" },\n    { value: \"fas fa-shield-alt\", label: \"أمان\" },\n    { value: \"fas fa-cog\", label: \"إعدادات\" },\n    { value: \"fas fa-code\", label: \"برمجة\" },\n    { value: \"fas fa-tools\", label: \"أدوات\" },\n    { value: \"fas fa-rocket\", label: \"صاروخ\" },\n  ];\n\n  return (\n    <Card className=\"max-w-4xl mx-auto\">\n      <CardHeader>\n        <CardTitle>\n          {service?.id ? \"تعديل الخدمة\" : \"إضافة خدمة جديدة\"}\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"title\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>العنوان (العربية)</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-service-title\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"titleEn\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>العنوان (الإنجليزية)</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-service-title-en\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>الوصف (العربية)</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        {...field} \n                        rows={4} \n                        data-testid=\"textarea-service-description\" \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"descriptionEn\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>الوصف (الإنجليزية)</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        {...field} \n                        rows={4} \n                        data-testid=\"textarea-service-description-en\" \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"icon\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>الأيقونة</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-service-icon\">\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {iconOptions.map((icon) => (\n                          <SelectItem key={icon.value} value={icon.value}>\n                            <div className=\"flex items-center gap-2\">\n                              <i className={icon.value}></i>\n                              {icon.label}\n                            </div>\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"color\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>اللون</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-service-color\">\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {colorOptions.map((color) => (\n                          <SelectItem key={color.value} value={color.value}>\n                            {color.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Features Arabic */}\n            <div>\n              <label className=\"text-sm font-medium\">الميزات (العربية)</label>\n              <div className=\"flex gap-2 mt-2\">\n                <Input\n                  value={newFeature}\n                  onChange={(e) => setNewFeature(e.target.value)}\n                  placeholder=\"أضف ميزة جديدة\"\n                  onKeyPress={(e) => e.key === \"Enter\" && (e.preventDefault(), addFeature())}\n                  data-testid=\"input-new-feature\"\n                />\n                <Button type=\"button\" onClick={addFeature} data-testid=\"button-add-feature\">\n                  إضافة\n                </Button>\n              </div>\n              <div className=\"flex flex-wrap gap-2 mt-3\">\n                {features.map((feature) => (\n                  <div key={feature} className=\"flex items-center gap-2 bg-primary/10 px-3 py-1 rounded-full\">\n                    <span className=\"text-sm\">{feature}</span>\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeFeature(feature)}\n                      className=\"h-4 w-4 p-0\"\n                      data-testid={`button-remove-feature-${feature}`}\n                    >\n                      ×\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Features English */}\n            <div>\n              <label className=\"text-sm font-medium\">الميزات (الإنجليزية)</label>\n              <div className=\"flex gap-2 mt-2\">\n                <Input\n                  value={newFeatureEn}\n                  onChange={(e) => setNewFeatureEn(e.target.value)}\n                  placeholder=\"Add new feature\"\n                  onKeyPress={(e) => e.key === \"Enter\" && (e.preventDefault(), addFeatureEn())}\n                  data-testid=\"input-new-feature-en\"\n                />\n                <Button type=\"button\" onClick={addFeatureEn} data-testid=\"button-add-feature-en\">\n                  إضافة\n                </Button>\n              </div>\n              <div className=\"flex flex-wrap gap-2 mt-3\">\n                {featuresEn.map((feature) => (\n                  <div key={feature} className=\"flex items-center gap-2 bg-secondary/10 px-3 py-1 rounded-full\">\n                    <span className=\"text-sm\">{feature}</span>\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeFeatureEn(feature)}\n                      className=\"h-4 w-4 p-0\"\n                      data-testid={`button-remove-feature-en-${feature}`}\n                    >\n                      ×\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"isActive\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel className=\"text-base\">نشط</FormLabel>\n                      <div className=\"text-sm text-muted-foreground\">\n                        إظهار الخدمة في الموقع\n                      </div>\n                    </div>\n                    <FormControl>\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"switch-service-active\"\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"order\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>ترتيب العرض</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        type=\"number\" \n                        onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                        data-testid=\"input-service-order\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"flex gap-4\">\n              <Button \n                type=\"submit\" \n                disabled={mutation.isPending}\n                data-testid=\"button-save-service\"\n              >\n                {mutation.isPending ? \"جاري الحفظ...\" : \"حفظ الخدمة\"}\n              </Button>\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={onClose}\n                data-testid=\"button-cancel-service\"\n              >\n                إلغاء\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":15005},"client/src/components/layout/footer.tsx":{"content":"import { useSound } from \"@/hooks/use-sound\";\nimport logoImage from \"@assets/file_00000000dc5c6230b26693599c1254a6_1757187540048.png\";\n\nexport default function Footer() {\n  const { playHoverSound } = useSound();\n\n  const quickLinks = [\n    { href: \"#home\", label: \"الرئيسية\" },\n    { href: \"#services\", label: \"الخدمات\" },\n    { href: \"#projects\", label: \"المشاريع\" },\n    { href: \"#cv\", label: \"السيرة الذاتية\" },\n    { href: \"#contact\", label: \"التواصل\" },\n  ];\n\n  const handleLinkClick = (href: string) => {\n    if (href.startsWith(\"#\")) {\n      const element = document.querySelector(href);\n      if (element) {\n        element.scrollIntoView({ behavior: \"smooth\" });\n      }\n    }\n  };\n\n  return (\n    <footer className=\"bg-card border-t border-border py-12\">\n      <div className=\"container mx-auto px-4 lg:px-8\">\n        <div className=\"grid md:grid-cols-4 gap-8\">\n          {/* Company Info */}\n          <div className=\"md:col-span-2\">\n            <div className=\"flex items-center space-x-3 rtl:space-x-reverse mb-4\">\n              <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center p-1\">\n                <img \n                  src={logoImage} \n                  alt=\"Alqudimi Technology Logo\" \n                  className=\"w-full h-full object-contain\" \n                />\n              </div>\n              <div>\n                <h3 className=\"text-xl font-bold gradient-text\">Alqudimi Technology</h3>\n                <p className=\"text-xs text-muted-foreground\">تكنولوجيا القديمي</p>\n              </div>\n            </div>\n            <p className=\"text-muted-foreground mb-4 leading-relaxed\">\n              نحن نقدم حلول برمجية مبتكرة ومتطورة تساعد الشركات والأفراد على تحقيق أهدافهم التقنية \n              بأعلى معايير الجودة والاحترافية.\n            </p>\n            <div className=\"flex gap-4\">\n              <a\n                href=\"https://www.instagram.com/eng_7mi?igsh=MXhib3J4eHI2dnZ0dA==\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"w-10 h-10 bg-accent rounded-lg flex items-center justify-center hover:scale-110 transition-transform\"\n                onMouseEnter={playHoverSound}\n                data-testid=\"social-instagram\"\n              >\n                <i className=\"fab fa-instagram text-accent-foreground\"></i>\n              </a>\n              <a\n                href=\"https://www.linkedin.com/in/abdulaziz-alqudimi-09020037a?utm_source=share&utm_campaign=share_via&utm_content=profile&utm_medium=android_app\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"w-10 h-10 bg-accent rounded-lg flex items-center justify-center hover:scale-110 transition-transform\"\n                onMouseEnter={playHoverSound}\n                data-testid=\"social-linkedin\"\n              >\n                <i className=\"fab fa-linkedin text-accent-foreground\"></i>\n              </a>\n              <a\n                href=\"https://github.com/Alqudimi\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"w-10 h-10 bg-accent rounded-lg flex items-center justify-center hover:scale-110 transition-transform\"\n                onMouseEnter={playHoverSound}\n                data-testid=\"social-github\"\n              >\n                <i className=\"fab fa-github text-accent-foreground\"></i>\n              </a>\n            </div>\n          </div>\n\n          {/* Quick Links */}\n          <div>\n            <h4 className=\"font-semibold text-lg mb-4\">روابط سريعة</h4>\n            <ul className=\"space-y-2\">\n              {quickLinks.map((link) => (\n                <li key={link.href}>\n                  <button\n                    onClick={() => handleLinkClick(link.href)}\n                    onMouseEnter={playHoverSound}\n                    className=\"text-muted-foreground hover:text-primary transition-colors\"\n                    data-testid={`footer-link-${link.href.slice(1)}`}\n                  >\n                    {link.label}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          {/* Contact Info */}\n          <div>\n            <h4 className=\"font-semibold text-lg mb-4\">معلومات الاتصال</h4>\n            <div className=\"space-y-3 text-muted-foreground\">\n              <div className=\"flex items-center gap-2\">\n                <i className=\"fas fa-envelope text-primary\"></i>\n                <span className=\"text-sm\">eng7mi@gmail.com</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <i className=\"fas fa-envelope text-primary\"></i>\n                <span className=\"text-sm\">abodx1234freey@gmail.com</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <i className=\"fas fa-phone text-primary\"></i>\n                <span className=\"text-sm\">+967771442176</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <i className=\"fas fa-map-marker-alt text-primary\"></i>\n                <span className=\"text-sm\">صنعاء، اليمن</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"border-t border-border pt-8 mt-8 text-center\">\n          <p className=\"text-muted-foreground\">\n            © 2024 Alqudimi Technology. جميع الحقوق محفوظة.\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":5662},"client/src/components/layout/header.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"@/hooks/use-theme\";\nimport { useSound } from \"@/hooks/use-sound\";\nimport { Moon, Sun, Volume2, VolumeX, Menu, X } from \"lucide-react\";\nimport logoImage from \"@assets/file_00000000dc5c6230b26693599c1254a6_1757187540048.png\";\n\nexport default function Header() {\n  const [isScrolled, setIsScrolled] = useState(false);\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const { theme, toggleTheme } = useTheme();\n  const { soundEnabled, toggleSound, playHoverSound, playClickSound } = useSound();\n  const [location] = useLocation();\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY > 50);\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  const handleNavClick = (href: string) => {\n    playClickSound();\n    setIsMobileMenuOpen(false);\n    \n    if (href.startsWith(\"#\")) {\n      const element = document.querySelector(href);\n      if (element) {\n        element.scrollIntoView({ behavior: \"smooth\" });\n      }\n    }\n  };\n\n  const navItems = [\n    { href: \"#home\", label: \"الرئيسية\" },\n    { href: \"#services\", label: \"الخدمات\" },\n    { href: \"#projects\", label: \"المشاريع\" },\n    { href: \"#cv\", label: \"السيرة الذاتية\" },\n    { href: \"#contact\", label: \"التواصل\" },\n  ];\n\n  return (\n    <>\n      <nav\n        className={`fixed top-0 left-0 right-0 z-50 transition-all duration-300 ${\n          isScrolled ? \"navigation-blur\" : \"bg-transparent\"\n        }`}\n      >\n        <div className=\"container mx-auto px-4 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            {/* Logo and Brand */}\n            <div className=\"flex items-center space-x-3 rtl:space-x-reverse\">\n              <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center p-1\">\n                <img \n                  src={logoImage} \n                  alt=\"Alqudimi Technology Logo\" \n                  className=\"w-full h-full object-contain\" \n                />\n              </div>\n              <div className=\"hidden sm:block\">\n                <h1 className=\"text-xl font-bold gradient-text\">Alqudimi Technology</h1>\n                <p className=\"text-xs text-muted-foreground\">تكنولوجيا القديمي</p>\n              </div>\n            </div>\n\n            {/* Desktop Navigation */}\n            <div className=\"hidden md:flex items-center space-x-8 rtl:space-x-reverse\">\n              {navItems.map((item) => (\n                <button\n                  key={item.href}\n                  onClick={() => handleNavClick(item.href)}\n                  onMouseEnter={playHoverSound}\n                  className=\"text-foreground hover:text-primary transition-colors\"\n                  data-testid={`nav-${item.href.slice(1)}`}\n                >\n                  {item.label}\n                </button>\n              ))}\n            </div>\n\n            {/* Controls */}\n            <div className=\"flex items-center space-x-2 rtl:space-x-reverse\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => {\n                  toggleSound();\n                  playHoverSound();\n                }}\n                onMouseEnter={playHoverSound}\n                className=\"hover:bg-accent\"\n                data-testid=\"button-sound-toggle\"\n              >\n                {soundEnabled ? (\n                  <Volume2 className=\"h-5 w-5 text-muted-foreground\" />\n                ) : (\n                  <VolumeX className=\"h-5 w-5 text-muted-foreground\" />\n                )}\n              </Button>\n              \n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => {\n                  toggleTheme();\n                  playClickSound();\n                }}\n                onMouseEnter={playHoverSound}\n                className=\"hover:bg-accent\"\n                data-testid=\"button-theme-toggle\"\n              >\n                {theme === \"dark\" ? (\n                  <Sun className=\"h-5 w-5 text-muted-foreground\" />\n                ) : (\n                  <Moon className=\"h-5 w-5 text-muted-foreground\" />\n                )}\n              </Button>\n\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"md:hidden hover:bg-accent\"\n                onClick={() => {\n                  setIsMobileMenuOpen(!isMobileMenuOpen);\n                  playClickSound();\n                }}\n                data-testid=\"button-mobile-menu\"\n              >\n                {isMobileMenuOpen ? (\n                  <X className=\"h-5 w-5 text-muted-foreground\" />\n                ) : (\n                  <Menu className=\"h-5 w-5 text-muted-foreground\" />\n                )}\n              </Button>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Mobile Menu */}\n      {isMobileMenuOpen && (\n        <div className=\"fixed inset-0 z-40 bg-background/95 backdrop-blur-sm md:hidden\">\n          <div className=\"fixed top-16 inset-x-0 bg-card border-b border-border\">\n            <div className=\"px-4 py-6 space-y-4\">\n              {navItems.map((item) => (\n                <button\n                  key={item.href}\n                  onClick={() => handleNavClick(item.href)}\n                  className=\"block w-full text-right px-4 py-2 text-lg font-semibold text-foreground hover:text-primary hover:bg-accent rounded-lg transition-colors\"\n                  data-testid={`mobile-nav-${item.href.slice(1)}`}\n                >\n                  {item.label}\n                </button>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n","size_bytes":5938},"client/src/components/sections/contact.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useSound } from \"@/hooks/use-sound\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { ContactInfo } from \"@shared/schema\";\n\nconst contactFormSchema = z.object({\n  name: z.string().min(1, \"الاسم مطلوب\"),\n  email: z.string().email(\"البريد الإلكتروني غير صحيح\"),\n  subject: z.string().min(1, \"الموضوع مطلوب\"),\n  serviceType: z.string().optional(),\n  message: z.string().min(10, \"الرسالة يجب أن تكون 10 أحرف على الأقل\"),\n});\n\ntype ContactFormData = z.infer<typeof contactFormSchema>;\n\nexport default function ContactSection() {\n  const { toast } = useToast();\n  const { playClickSound, playHoverSound, playNotificationSound } = useSound();\n  const queryClient = useQueryClient();\n\n  const { data: contactInfo = [] } = useQuery<ContactInfo[]>({\n    queryKey: [\"/api/contact-info\"],\n  });\n\n  const form = useForm<ContactFormData>({\n    resolver: zodResolver(contactFormSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      subject: \"\",\n      serviceType: \"\",\n      message: \"\",\n    },\n  });\n\n  const submitMutation = useMutation({\n    mutationFn: (data: ContactFormData) => apiRequest(\"POST\", \"/api/contact\", data),\n    onSuccess: () => {\n      playNotificationSound();\n      toast({\n        title: \"تم إرسال الرسالة بنجاح!\",\n        description: \"سنتواصل معك في أقرب وقت ممكن\",\n      });\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        variant: \"destructive\",\n        title: \"خطأ في إرسال الرسالة\",\n        description: error instanceof Error ? error.message : \"حدث خطأ غير متوقع\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ContactFormData) => {\n    playClickSound();\n    submitMutation.mutate(data);\n  };\n\n  // Default contact information in case API fails\n  const defaultContactInfo = [\n    {\n      type: \"email\",\n      label: \"البريد الإلكتروني الأول\",\n      value: \"eng7mi@gmail.com\",\n      icon: \"fas fa-envelope\",\n      isPrimary: true,\n    },\n    {\n      type: \"email\", \n      label: \"البريد الإلكتروني الثاني\",\n      value: \"abodx1234freey@gmail.com\",\n      icon: \"fas fa-envelope\",\n      isPrimary: false,\n    },\n    {\n      type: \"phone\",\n      label: \"رقم الهاتف\",\n      value: \"+967771442176\",\n      icon: \"fas fa-phone\",\n      isPrimary: true,\n    },\n    {\n      type: \"address\",\n      label: \"الموقع\",\n      value: \"صنعاء، اليمن\",\n      icon: \"fas fa-map-marker-alt\",\n      isPrimary: true,\n    },\n  ];\n\n  const displayContactInfo = contactInfo.length > 0 ? contactInfo : defaultContactInfo;\n  \n  const emails = displayContactInfo.filter(info => info.type === \"email\");\n  const phones = displayContactInfo.filter(info => info.type === \"phone\");\n  const addresses = displayContactInfo.filter(info => info.type === \"address\");\n\n  const serviceOptions = [\n    { value: \"web-development\", label: \"تطوير موقع ويب\" },\n    { value: \"mobile-development\", label: \"تطوير تطبيق موبايل\" },\n    { value: \"ai-services\", label: \"خدمات الذكاء الاصطناعي\" },\n    { value: \"database-management\", label: \"إدارة قواعد البيانات\" },\n    { value: \"cloud-services\", label: \"الخدمات السحابية\" },\n    { value: \"cybersecurity\", label: \"الأمن السيبراني\" },\n    { value: \"consultation\", label: \"استشارة تقنية\" },\n    { value: \"other\", label: \"أخرى\" },\n  ];\n\n  return (\n    <section id=\"contact\" className=\"py-20\">\n      <div className=\"container mx-auto px-4 lg:px-8\">\n        <div className=\"text-center mb-16 scroll-reveal\">\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-6\">تواصل معنا</h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            هل لديك مشروع أو فكرة تريد تطويرها؟ تواصل معنا لنناقش كيف يمكننا مساعدتك في تحقيق أهدافك\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-12 max-w-6xl mx-auto\">\n          {/* Contact Information */}\n          <div className=\"space-y-8 scroll-reveal\">\n            <Card className=\"p-8 glass-card\" data-testid=\"contact-info-card\">\n              <h3 className=\"text-2xl font-bold mb-6\">معلومات الاتصال</h3>\n              <div className=\"space-y-6\">\n                {/* Email */}\n                {emails.map((email, index) => (\n                  <div key={index} className=\"flex items-center gap-4\">\n                    <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                      <i className={`${email.icon} text-primary`}></i>\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold\">{email.label}</h4>\n                      <a\n                        href={`mailto:${email.value}`}\n                        className=\"text-muted-foreground hover:text-primary transition-colors\"\n                        onMouseEnter={playHoverSound}\n                        data-testid={`email-${index}`}\n                      >\n                        {email.value}\n                      </a>\n                    </div>\n                  </div>\n                ))}\n\n                {/* Phone */}\n                {phones.map((phone, index) => (\n                  <div key={index} className=\"flex items-center gap-4\">\n                    <div className=\"w-12 h-12 bg-secondary/10 rounded-lg flex items-center justify-center\">\n                      <i className={`${phone.icon} text-secondary`}></i>\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold\">{phone.label}</h4>\n                      <a\n                        href={`tel:${phone.value}`}\n                        className=\"text-muted-foreground hover:text-primary transition-colors\"\n                        onMouseEnter={playHoverSound}\n                        data-testid={`phone-${index}`}\n                      >\n                        {phone.value}\n                      </a>\n                    </div>\n                  </div>\n                ))}\n\n                {/* Location */}\n                {addresses.map((address, index) => (\n                  <div key={index} className=\"flex items-center gap-4\">\n                    <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center\">\n                      <i className={`${address.icon} text-accent-foreground`}></i>\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold\">{address.label}</h4>\n                      <p className=\"text-muted-foreground\">{address.value}</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </Card>\n\n            {/* Social Media */}\n            <Card className=\"p-8 glass-card\" data-testid=\"social-media-card\">\n              <h3 className=\"text-2xl font-bold mb-6\">وسائل التواصل الاجتماعي</h3>\n              <div className=\"flex flex-wrap gap-4\">\n                <a\n                  href=\"https://www.instagram.com/eng_7mi?igsh=MXhib3J4eHI2dnZ0dA==\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"social-link bg-gradient-to-r from-pink-500 to-purple-600\"\n                  onMouseEnter={playHoverSound}\n                  data-testid=\"social-instagram-main\"\n                >\n                  <i className=\"fab fa-instagram text-xl\"></i>\n                  <span>Instagram</span>\n                </a>\n                <a\n                  href=\"#\"\n                  className=\"social-link bg-blue-600\"\n                  onMouseEnter={playHoverSound}\n                  data-testid=\"social-linkedin-main\"\n                >\n                  <i className=\"fab fa-linkedin text-xl\"></i>\n                  <span>LinkedIn</span>\n                </a>\n                <a\n                  href=\"#\"\n                  className=\"social-link bg-gray-800\"\n                  onMouseEnter={playHoverSound}\n                  data-testid=\"social-github-main\"\n                >\n                  <i className=\"fab fa-github text-xl\"></i>\n                  <span>GitHub</span>\n                </a>\n                <a\n                  href=\"#\"\n                  className=\"social-link bg-blue-500\"\n                  onMouseEnter={playHoverSound}\n                  data-testid=\"social-twitter-main\"\n                >\n                  <i className=\"fab fa-twitter text-xl\"></i>\n                  <span>Twitter</span>\n                </a>\n              </div>\n            </Card>\n          </div>\n\n          {/* Contact Form */}\n          <Card className=\"p-8 scroll-reveal glass-card\" data-testid=\"contact-form-card\">\n            <h3 className=\"text-2xl font-bold mb-6\">أرسل رسالة</h3>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"contact-form\">\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>الاسم الكامل</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            placeholder=\"أدخل اسمك الكامل\"\n                            className=\"form-input\"\n                            data-testid=\"input-contact-name\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>البريد الإلكتروني</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            type=\"email\"\n                            placeholder=\"your@email.com\"\n                            className=\"form-input\"\n                            data-testid=\"input-contact-email\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"subject\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>الموضوع</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          placeholder=\"موضوع الرسالة\"\n                          className=\"form-input\"\n                          data-testid=\"input-contact-subject\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"serviceType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>نوع الخدمة</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger className=\"form-input\" data-testid=\"select-service-type\">\n                            <SelectValue placeholder=\"اختر نوع الخدمة\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {serviceOptions.map((option) => (\n                            <SelectItem key={option.value} value={option.value}>\n                              {option.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"message\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>الرسالة</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          {...field}\n                          rows={6}\n                          placeholder=\"اكتب رسالتك هنا...\"\n                          className=\"form-input resize-none\"\n                          data-testid=\"textarea-contact-message\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button\n                  type=\"submit\"\n                  disabled={submitMutation.isPending}\n                  onMouseEnter={playHoverSound}\n                  className=\"w-full btn-primary\"\n                  data-testid=\"button-send-message\"\n                >\n                  {submitMutation.isPending ? (\n                    <>\n                      <i className=\"fas fa-spinner fa-spin ml-2\"></i>\n                      جاري الإرسال...\n                    </>\n                  ) : (\n                    <>\n                      <i className=\"fas fa-paper-plane ml-2\"></i>\n                      إرسال الرسالة\n                    </>\n                  )}\n                </Button>\n              </form>\n            </Form>\n          </Card>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":14703},"client/src/components/sections/cv.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { useSound } from \"@/hooks/use-sound\";\nimport type { CvData } from \"@shared/schema\";\n\nexport default function CVSection() {\n  const { playClickSound, playHoverSound } = useSound();\n\n  const { data: cvData = [], isLoading } = useQuery<CvData[]>({\n    queryKey: [\"/api/cv\"],\n  });\n\n  const getCvDataByType = (type: string) => {\n    return cvData.filter(item => item.type === type && item.isActive);\n  };\n\n  const handleDownloadCV = async () => {\n    playClickSound();\n    try {\n      // Generate CV data for download\n      const cvContent = generateCVContent();\n      \n      // Create and download as text file for now (can be enhanced to PDF later)\n      const blob = new Blob([cvContent], { type: 'text/plain;charset=utf-8' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = 'عبدالعزيز_محمد_القديمي_CV.txt';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n      \n      // Show success message\n      console.log(\"CV downloaded successfully\");\n    } catch (error) {\n      console.error('Error downloading CV:', error);\n    }\n  };\n\n  const generateCVContent = () => {\n    const summaryData = getCvDataByType('summary').length > 0 ? getCvDataByType('summary') : mockCvData.summary;\n    const skillsData = getCvDataByType('skill').length > 0 ? getCvDataByType('skill') : mockCvData.skills;\n    const educationData = getCvDataByType('education').length > 0 ? getCvDataByType('education') : mockCvData.education;\n    const experienceData = getCvDataByType('experience').length > 0 ? getCvDataByType('experience') : mockCvData.experience;\n    const certificationsData = getCvDataByType('certification').length > 0 ? getCvDataByType('certification') : mockCvData.certifications;\n\n    let content = `\n==============================================\nعبدالعزيز محمد القديمي - السيرة الذاتية\nAbdulaziz Mohammed Alqudimi - Resume\n==============================================\n\n`;\n    \n    // Summary\n    content += `الملخص المهني / Professional Summary:\n`;\n    content += `${summaryData[0]?.description || summaryData[0]?.title}\\n\\n`;\n    \n    // Skills\n    content += `المهارات / Skills:\\n`;\n    skillsData.forEach(skill => {\n      const stars = '★'.repeat(skill.level || 5);\n      content += `• ${skill.title}: ${stars}\\n`;\n    });\n    content += `\\n`;\n    \n    // Experience\n    content += `الخبرة العملية / Work Experience:\\n`;\n    experienceData.forEach(exp => {\n      content += `• ${exp.title} - ${exp.subtitle || ''} (${exp.startDate || ''} - ${exp.endDate || ''})\\n`;\n      if ('description' in exp && exp.description) content += `  ${exp.description}\\n`;\n    });\n    content += `\\n`;\n    \n    // Education\n    content += `التعليم / Education:\\n`;\n    educationData.forEach(edu => {\n      content += `• ${edu.title} - ${edu.subtitle} (${edu.startDate} - ${edu.endDate})\\n`;\n    });\n    content += `\\n`;\n    \n    // Certifications\n    content += `الشهادات والجوائز / Certifications & Awards:\\n`;\n    certificationsData.forEach(cert => {\n      content += `• ${cert.title} - ${cert.subtitle}\\n`;\n    });\n    \n    content += `\\n==============================================\\nتم إنشاء هذه السيرة الذاتية من موقع Alqudimi Technology\\nGenerated from Alqudimi Technology Website\\n==============================================`;\n    \n    return content;\n  };\n\n  // Mock data structure for when no CV data is loaded\n  const mockCvData = {\n    summary: [{\n      title: \"الملخص المهني\",\n      description: `مطور برمجيات محترف مع أكثر من 5 سنوات من الخبرة في تطوير تطبيقات الويب والموبايل والذكاء الاصطناعي. \n      متخصص في استخدام التقنيات الحديثة مثل Python، JavaScript، React، Django، وتقنيات الذكاء الاصطناعي. \n      شغوف بحل المشاكل التقنية المعقدة وتقديم حلول مبتكرة تلبي احتياجات العملاء.`\n    }],\n    skills: [\n      { title: \"Python\", level: 5 },\n      { title: \"JavaScript\", level: 4 },\n      { title: \"Java\", level: 4 },\n      { title: \"Django/Flask\", level: 5 },\n      { title: \"React/Vue.js\", level: 4 },\n      { title: \"TensorFlow/PyTorch\", level: 4 },\n    ],\n    education: [{\n      title: \"بكالوريوس علوم الحاسوب\",\n      subtitle: \"جامعة صنعاء\",\n      startDate: \"2018\",\n      endDate: \"2022\"\n    }, {\n      title: \"دبلوم البرمجة المتقدمة\",\n      subtitle: \"معهد التقنيات المتقدمة\",\n      startDate: \"2017\",\n      endDate: \"2018\"\n    }],\n    experience: [{\n      title: \"مطور برمجيات كبير\",\n      subtitle: \"مطور مستقل\",\n      startDate: \"2020\",\n      endDate: \"الآن\"\n    }, {\n      title: \"مطور تطبيقات الويب\",\n      subtitle: \"شركة التقنيات الذكية\",\n      startDate: \"2019\",\n      endDate: \"2020\"\n    }],\n    certifications: [{\n      title: \"شهادة AWS Solutions Architect\",\n      subtitle: \"Amazon Web Services - 2023\",\n      icon: \"fas fa-award\"\n    }, {\n      title: \"جائزة أفضل مطور شاب\",\n      subtitle: \"مؤتمر التقنية - 2022\",\n      icon: \"fas fa-trophy\"\n    }]\n  };\n\n  const summary = getCvDataByType('summary').length > 0 ? getCvDataByType('summary') : mockCvData.summary;\n  const skills = getCvDataByType('skill').length > 0 ? getCvDataByType('skill') : mockCvData.skills;\n  const education = getCvDataByType('education').length > 0 ? getCvDataByType('education') : mockCvData.education;\n  const experience = getCvDataByType('experience').length > 0 ? getCvDataByType('experience') : mockCvData.experience;\n  const certifications = getCvDataByType('certification').length > 0 ? getCvDataByType('certification') : mockCvData.certifications;\n\n  const renderSkillBar = (skill: any) => (\n    <div key={skill.title || skill.id} className=\"flex items-center justify-between\">\n      <span>{skill.title}</span>\n      <div className=\"flex gap-1\">\n        {[...Array(5)].map((_, i) => (\n          <div\n            key={i}\n            className={`w-4 h-2 rounded ${\n              i < (skill.level || 0) ? 'bg-primary' : 'bg-muted'\n            }`}\n          />\n        ))}\n      </div>\n    </div>\n  );\n\n  if (isLoading) {\n    return (\n      <section className=\"py-20 bg-muted/30\">\n        <div className=\"container mx-auto px-4 lg:px-8\">\n          <div className=\"max-w-4xl mx-auto space-y-8\">\n            {[...Array(4)].map((_, i) => (\n              <Card key={i} className=\"cv-section animate-pulse\">\n                <div className=\"h-8 bg-muted rounded mb-6 w-48\"></div>\n                <div className=\"space-y-4\">\n                  <div className=\"h-4 bg-muted rounded\"></div>\n                  <div className=\"h-4 bg-muted rounded\"></div>\n                  <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                </div>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section id=\"cv\" className=\"py-20 bg-muted/30\">\n      <div className=\"container mx-auto px-4 lg:px-8\">\n        <div className=\"text-center mb-16 scroll-reveal\">\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-6\">السيرة الذاتية</h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            تعرف على خلفيتي المهنية ومهاراتي التقنية وخبراتي في مجال تطوير البرمجيات\n          </p>\n        </div>\n\n        <div className=\"max-w-4xl mx-auto\">\n          {/* Professional Summary */}\n          <Card className=\"cv-section mb-8 scroll-reveal\" data-testid=\"cv-summary\">\n            <h3 className=\"text-2xl font-bold mb-6 flex items-center\">\n              <i className=\"fas fa-user-tie text-primary ml-3\"></i>\n              الملخص المهني\n            </h3>\n            {summary.map((item, index) => (\n              <p key={index} className=\"text-lg text-muted-foreground leading-relaxed\">\n                {item.description}\n              </p>\n            ))}\n          </Card>\n\n          {/* Skills Section */}\n          <Card className=\"cv-section mb-8 scroll-reveal\" data-testid=\"cv-skills\">\n            <h3 className=\"text-2xl font-bold mb-6 flex items-center\">\n              <i className=\"fas fa-code text-primary ml-3\"></i>\n              المهارات التقنية\n            </h3>\n            <div className=\"grid md:grid-cols-2 gap-8\">\n              <div>\n                <h4 className=\"font-semibold text-lg mb-4\">لغات البرمجة</h4>\n                <div className=\"space-y-3\">\n                  {skills.slice(0, 3).map(renderSkillBar)}\n                </div>\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-lg mb-4\">الأطر والمكتبات</h4>\n                <div className=\"space-y-3\">\n                  {skills.slice(3, 6).map(renderSkillBar)}\n                </div>\n              </div>\n            </div>\n          </Card>\n\n          {/* Education & Experience */}\n          <div className=\"grid md:grid-cols-2 gap-8\">\n            {/* Education */}\n            <Card className=\"cv-section scroll-reveal\" data-testid=\"cv-education\">\n              <h3 className=\"text-2xl font-bold mb-6 flex items-center\">\n                <i className=\"fas fa-graduation-cap text-primary ml-3\"></i>\n                التعليم\n              </h3>\n              <div className=\"space-y-6\">\n                {education.map((item, index) => (\n                  <div key={index} className=\"border-r-4 border-primary pr-4\">\n                    <h4 className=\"font-semibold text-lg\">{item.title}</h4>\n                    <p className=\"text-muted-foreground\">{item.subtitle}</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {item.startDate} - {item.endDate}\n                    </p>\n                  </div>\n                ))}\n              </div>\n            </Card>\n\n            {/* Experience */}\n            <Card className=\"cv-section scroll-reveal\" data-testid=\"cv-experience\">\n              <h3 className=\"text-2xl font-bold mb-6 flex items-center\">\n                <i className=\"fas fa-briefcase text-primary ml-3\"></i>\n                الخبرة المهنية\n              </h3>\n              <div className=\"space-y-6\">\n                {experience.map((item, index) => (\n                  <div key={index} className={`border-r-4 pr-4 ${index === 0 ? 'border-primary' : 'border-secondary'}`}>\n                    <h4 className=\"font-semibold text-lg\">{item.title}</h4>\n                    <p className=\"text-muted-foreground\">{item.subtitle}</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {item.startDate} - {item.endDate}\n                    </p>\n                  </div>\n                ))}\n              </div>\n            </Card>\n          </div>\n\n          {/* Certifications */}\n          <Card className=\"cv-section mt-8 scroll-reveal\" data-testid=\"cv-certifications\">\n            <h3 className=\"text-2xl font-bold mb-6 flex items-center\">\n              <i className=\"fas fa-certificate text-primary ml-3\"></i>\n              الشهادات والجوائز\n            </h3>\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              {certifications.map((cert, index) => (\n                <div key={index} className=\"flex items-center gap-4\" onMouseEnter={playHoverSound}>\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                    <i className={`${cert.icon || 'fas fa-award'} text-primary`}></i>\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold\">{cert.title}</h4>\n                    <p className=\"text-sm text-muted-foreground\">{cert.subtitle}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </Card>\n\n          {/* Download CV Button */}\n          <div className=\"text-center mt-12 scroll-reveal\">\n            <Button\n              onClick={handleDownloadCV}\n              onMouseEnter={playHoverSound}\n              className=\"btn-primary\"\n              data-testid=\"button-download-cv-main\"\n            >\n              <i className=\"fas fa-download ml-2\"></i>\n              تحميل السيرة الذاتية PDF\n            </Button>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":12868},"client/src/components/sections/hero.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useSound } from \"@/hooks/use-sound\";\n\nexport default function HeroSection() {\n  const [isVisible, setIsVisible] = useState(false);\n  const { playClickSound, playHoverSound } = useSound();\n\n  useEffect(() => {\n    setIsVisible(true);\n  }, []);\n\n  const stats = [\n    { value: \"150+\", label: \"مشروع منجز\", icon: \"fas fa-rocket\" },\n    { value: \"7+\", label: \"سنوات خبرة\", icon: \"fas fa-calendar-alt\" },\n    { value: \"50+\", label: \"تقنية متقدمة\", icon: \"fas fa-cogs\" },\n    { value: \"100%\", label: \"رضا العملاء\", icon: \"fas fa-heart\" },\n  ];\n\n  const handleScrollToProjects = () => {\n    playClickSound();\n    const projectsSection = document.getElementById(\"projects\");\n    if (projectsSection) {\n      projectsSection.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  const handleDownloadCV = () => {\n    playClickSound();\n    // Scroll to CV section\n    const cvSection = document.getElementById(\"cv\");\n    if (cvSection) {\n      cvSection.scrollIntoView({ behavior: \"smooth\" });\n      // After scrolling, trigger the download from CV section\n      setTimeout(() => {\n        const downloadButton = document.querySelector('[data-testid=\"button-download-cv\"]') as HTMLButtonElement;\n        if (downloadButton) {\n          downloadButton.click();\n        }\n      }, 1000);\n    }\n  };\n\n  return (\n    <section id=\"home\" className=\"relative min-h-screen flex items-center justify-center overflow-hidden pt-16 pb-8\">\n      <div className=\"particle-bg\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-primary/5 to-secondary/5\"></div>\n        {/* Animated particles would be implemented with Canvas or WebGL */}\n      </div>\n\n      <div className=\"container mx-auto px-4 lg:px-8 text-center relative z-10\">\n        <div className={`max-w-4xl mx-auto transition-all duration-1000 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'}`}>\n          {/* 3D Logo Placeholder */}\n          <div className=\"w-32 h-32 mx-auto mb-8 floating-animation\">\n            <div className=\"w-full h-full bg-gradient-to-br from-primary to-secondary rounded-2xl shadow-2xl flex items-center justify-center\">\n              <i className=\"fas fa-laptop-code text-white text-4xl\"></i>\n            </div>\n          </div>\n\n          <h1 className=\"text-5xl md:text-8xl font-bold mb-6\">\n            <span className=\"gradient-text text-shadow-lg\">Alqudimi Technology</span>\n          </h1>\n\n          <p className=\"text-xl md:text-3xl text-muted-foreground mb-8 leading-relaxed font-light\">\n            حلول تقنية متطورة ومبتكرة لمستقبل رقمي متقدم\n          </p>\n          \n          <div className=\"text-lg md:text-xl text-primary/80 mb-8 font-medium\">\n            Advanced Technology Solutions for a Digital Future\n          </div>\n\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center mb-12\">\n            <Button\n              onClick={handleScrollToProjects}\n              onMouseEnter={playHoverSound}\n              className=\"btn-primary\"\n              data-testid=\"button-explore-projects\"\n            >\n              <i className=\"fas fa-rocket ml-2\"></i>\n              استكشف مشاريعي\n            </Button>\n            <Button\n              onClick={handleDownloadCV}\n              onMouseEnter={playHoverSound}\n              variant=\"outline\"\n              className=\"btn-secondary\"\n              data-testid=\"button-download-cv\"\n            >\n              <i className=\"fas fa-download ml-2\"></i>\n              تحميل السيرة الذاتية\n            </Button>\n          </div>\n\n          {/* Key Stats */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 max-w-4xl mx-auto\">\n            {stats.map((stat, index) => (\n              <div \n                key={index} \n                className=\"modern-card p-6 text-center group\"\n                style={{ animationDelay: `${index * 0.2}s` }}\n                data-testid={`stat-${index}`}\n              >\n                <div className=\"text-3xl mb-3 text-primary group-hover:scale-110 transition-transform duration-300\">\n                  <i className={stat.icon}></i>\n                </div>\n                <div className=\"text-3xl font-bold gradient-text mb-2\">{stat.value}</div>\n                <div className=\"text-sm text-muted-foreground font-medium\">{stat.label}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4597},"client/src/components/sections/projects.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { useSound } from \"@/hooks/use-sound\";\nimport type { Project } from \"@shared/schema\";\n\nexport default function ProjectsSection() {\n  const [activeFilter, setActiveFilter] = useState(\"all\");\n  const { playClickSound, playHoverSound } = useSound();\n  const [, setLocation] = useLocation();\n\n  const { data: projects = [], isLoading } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"],\n  });\n\n  const categories = [\n    { id: \"all\", label: \"جميع المشاريع\" },\n    { id: \"web\", label: \"مواقع الويب\" },\n    { id: \"mobile\", label: \"تطبيقات الموبايل\" },\n    { id: \"ai\", label: \"الذكاء الاصطناعي\" },\n    { id: \"desktop\", label: \"تطبيقات سطح المكتب\" },\n  ];\n\n  const filteredProjects = projects.filter(project => \n    activeFilter === \"all\" || project.category === activeFilter\n  );\n\n  const handleFilterClick = (categoryId: string) => {\n    setActiveFilter(categoryId);\n    playClickSound();\n  };\n\n  const handleProjectClick = (projectId: string) => {\n    playClickSound();\n    setLocation(`/projects/${projectId}`);\n  };\n\n  const handleViewMore = () => {\n    playClickSound();\n    // Scroll to top of projects section for better UX\n    const projectsSection = document.getElementById(\"projects\");\n    if (projectsSection) {\n      projectsSection.scrollIntoView({ behavior: \"smooth\" });\n    }\n    // Show a message that more projects will be added\n    console.log(\"More projects coming soon!\");\n  };\n\n  // Mock data for when no projects are loaded from API\n  const mockProjects = [\n    {\n      id: \"ecommerce-platform\",\n      title: \"منصة التجارة الإلكترونية\",\n      shortDescription: \"متجر إلكتروني متكامل مع نظام دفع آمن وإدارة المخزون وتحليلات المبيعات\",\n      technologies: [\"Django\", \"React\", \"PostgreSQL\"],\n      images: [\"https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"],\n      category: \"web\",\n      liveUrl: \"#\",\n      githubUrl: \"#\",\n    },\n    {\n      id: \"ai-chatbot\",\n      title: \"مساعد ذكي بالذكاء الاصطناعي\",\n      shortDescription: \"روبوت محادثة ذكي يتفهم اللغة الطبيعية ويقدم إجابات دقيقة ومفيدة\",\n      technologies: [\"Python\", \"NLP\", \"TensorFlow\"],\n      images: [\"https://images.unsplash.com/photo-1531746790731-6c087fecd65a?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"],\n      category: \"ai\",\n      liveUrl: \"#\",\n      githubUrl: \"#\",\n    },\n    {\n      id: \"task-manager-app\",\n      title: \"تطبيق إدارة المهام\",\n      shortDescription: \"تطبيق موبايل لإدارة المهام والمشاريع مع ميزات التعاون الجماعي والتزامن\",\n      technologies: [\"React Native\", \"Firebase\", \"Redux\"],\n      images: [\"https://images.unsplash.com/photo-1512941937669-90a1b58e7e9c?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"],\n      category: \"mobile\",\n      liveUrl: \"#\",\n      githubUrl: \"#\",\n    },\n  ];\n\n  const projectsToDisplay = projects.length > 0 ? filteredProjects : mockProjects.filter(p => \n    activeFilter === \"all\" || p.category === activeFilter\n  );\n\n  if (isLoading) {\n    return (\n      <section className=\"py-20\">\n        <div className=\"container mx-auto px-4 lg:px-8\">\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {[...Array(6)].map((_, i) => (\n              <Card key={i} className=\"overflow-hidden animate-pulse\">\n                <div className=\"w-full h-48 bg-muted\"></div>\n                <div className=\"p-6\">\n                  <div className=\"flex gap-2 mb-4\">\n                    <div className=\"h-6 w-16 bg-muted rounded-full\"></div>\n                    <div className=\"h-6 w-16 bg-muted rounded-full\"></div>\n                  </div>\n                  <div className=\"h-6 bg-muted rounded mb-3\"></div>\n                  <div className=\"h-20 bg-muted rounded mb-4\"></div>\n                  <div className=\"flex justify-between items-center\">\n                    <div className=\"h-4 w-24 bg-muted rounded\"></div>\n                    <div className=\"flex gap-2\">\n                      <div className=\"h-4 w-4 bg-muted rounded\"></div>\n                      <div className=\"h-4 w-4 bg-muted rounded\"></div>\n                    </div>\n                  </div>\n                </div>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section id=\"projects\" className=\"py-20\">\n      <div className=\"container mx-auto px-4 lg:px-8\">\n        <div className=\"text-center mb-16 scroll-reveal\">\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-6\">معرض المشاريع</h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            استعرض مجموعة من أفضل المشاريع التي تم تطويرها بأحدث التقنيات ووفقاً لأعلى معايير الجودة\n          </p>\n        </div>\n\n        {/* Project Filter Tabs */}\n        <div className=\"flex flex-wrap justify-center gap-4 mb-12 scroll-reveal\">\n          {categories.map((category) => (\n            <Button\n              key={category.id}\n              onClick={() => handleFilterClick(category.id)}\n              onMouseEnter={playHoverSound}\n              variant={activeFilter === category.id ? \"default\" : \"outline\"}\n              className=\"px-6 py-3 font-semibold transition-all hover:scale-105\"\n              data-testid={`filter-${category.id}`}\n            >\n              {category.label}\n            </Button>\n          ))}\n        </div>\n\n        {/* Projects Grid */}\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {projectsToDisplay.map((project, index) => (\n            <Card\n              key={project.id}\n              className=\"project-card overflow-hidden hover-lift scroll-reveal glass-card\"\n              onClick={() => handleProjectClick(project.id)}\n              onMouseEnter={playHoverSound}\n              data-testid={`project-${project.id}`}\n              style={{ animationDelay: `${index * 0.1}s` }}\n            >\n              {project.images && project.images.length > 0 && (\n                <img\n                  src={project.images[0]}\n                  alt={project.title}\n                  className=\"w-full h-48 object-cover\"\n                />\n              )}\n              \n              <div className=\"p-6\">\n                <div className=\"flex flex-wrap gap-2 mb-4\">\n                  {project.technologies?.map((tech) => (\n                    <span\n                      key={tech}\n                      className=\"bg-primary/10 text-primary px-3 py-1 rounded-full text-sm\"\n                    >\n                      {tech}\n                    </span>\n                  ))}\n                </div>\n                \n                <h3 className=\"text-xl font-bold mb-3\">{project.title}</h3>\n                \n                <p className=\"text-muted-foreground mb-4\">\n                  {project.shortDescription || project.description}\n                </p>\n                \n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-primary hover:underline cursor-pointer\">\n                    عرض التفاصيل\n                  </span>\n                  <div className=\"flex gap-2\">\n                    {project.liveUrl && (\n                      <i className=\"fas fa-external-link-alt text-muted-foreground hover:text-primary cursor-pointer\"></i>\n                    )}\n                    {project.githubUrl && (\n                      <i className=\"fab fa-github text-muted-foreground hover:text-primary cursor-pointer\"></i>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n\n        {projectsToDisplay.length === 0 && (\n          <div className=\"text-center py-12\">\n            <p className=\"text-muted-foreground text-lg\">\n              لا توجد مشاريع في هذه الفئة حالياً\n            </p>\n          </div>\n        )}\n\n        <div className=\"text-center mt-12\">\n          <Button\n            onClick={handleViewMore}\n            onMouseEnter={playHoverSound}\n            className=\"btn-primary\"\n            data-testid=\"button-view-more-projects\"\n          >\n            عرض المزيد من المشاريع\n          </Button>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":8775},"client/src/components/sections/services.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useState, useEffect } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { useSound } from \"@/hooks/use-sound\";\nimport type { Service } from \"@shared/schema\";\n\nexport default function ServicesSection() {\n  const [visibleServices, setVisibleServices] = useState<number[]>([]);\n  const { playHoverSound } = useSound();\n\n  const { data: services = [], isLoading } = useQuery<Service[]>({\n    queryKey: [\"/api/services\"],\n  });\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry, index) => {\n          if (entry.isIntersecting) {\n            setTimeout(() => {\n              setVisibleServices(prev => [...prev, index]);\n            }, index * 200);\n          }\n        });\n      },\n      { threshold: 0.1 }\n    );\n\n    const serviceElements = document.querySelectorAll('.service-card');\n    serviceElements.forEach(el => observer.observe(el));\n\n    return () => observer.disconnect();\n  }, [services]);\n\n  const defaultServices = [\n    {\n      id: \"web-dev\",\n      title: \"تطوير المواقع الإلكترونية\",\n      description: \"تطوير مواقع ويب متجاوبة وسريعة باستخدام أحدث التقنيات مثل React، Vue.js، و Django\",\n      icon: \"fas fa-globe\",\n      color: \"blue\",\n      features: [\"مواقع تجارية\", \"متاجر إلكترونية\", \"مواقع إدارية\"]\n    },\n    {\n      id: \"mobile-dev\",\n      title: \"تطوير تطبيقات الموبايل\",\n      description: \"تطبيقات موبايل عالية الأداء لمنصات iOS و Android باستخدام React Native و Flutter\",\n      icon: \"fas fa-mobile-alt\",\n      color: \"green\",\n      features: [\"تطبيقات iOS\", \"تطبيقات Android\", \"تطبيقات هجينة\"]\n    },\n    {\n      id: \"ai-services\",\n      title: \"الذكاء الاصطناعي\",\n      description: \"حلول ذكية متقدمة باستخدام تقنيات Machine Learning و Natural Language Processing\",\n      icon: \"fas fa-brain\",\n      color: \"purple\",\n      features: [\"تعلم الآلة\", \"معالجة اللغات\", \"رؤية الحاسوب\"]\n    },\n    {\n      id: \"database\",\n      title: \"إدارة قواعد البيانات\",\n      description: \"تصميم وإدارة قواعد بيانات قوية وآمنة باستخدام PostgreSQL، MongoDB، و MySQL\",\n      icon: \"fas fa-database\",\n      color: \"orange\",\n      features: [\"تصميم قواعد البيانات\", \"تحسين الأداء\", \"أمان البيانات\"]\n    },\n    {\n      id: \"cloud\",\n      title: \"الحوسبة السحابية\",\n      description: \"نشر وإدارة التطبيقات على الخدمات السحابية مثل AWS، Google Cloud، و Azure\",\n      icon: \"fas fa-cloud\",\n      color: \"cyan\",\n      features: [\"نشر التطبيقات\", \"إدارة الخوادم\", \"مراقبة الأداء\"]\n    },\n    {\n      id: \"security\",\n      title: \"الأمن السيبراني\",\n      description: \"حماية شاملة للتطبيقات والبيانات مع تطبيق أفضل ممارسات الأمان والتشفير\",\n      icon: \"fas fa-shield-alt\",\n      color: \"red\",\n      features: [\"تدقيق الأمان\", \"حماية البيانات\", \"اختبار الاختراق\"]\n    }\n  ];\n\n  const servicesToDisplay = services.length > 0 ? services : defaultServices;\n\n  const getColorClasses = (color: string) => {\n    const colorMap: Record<string, string> = {\n      blue: \"from-blue-500 to-blue-600\",\n      green: \"from-green-500 to-green-600\",\n      purple: \"from-purple-500 to-purple-600\",\n      orange: \"from-orange-500 to-orange-600\",\n      cyan: \"from-cyan-500 to-cyan-600\",\n      red: \"from-red-500 to-red-600\",\n    };\n    return colorMap[color] || \"from-blue-500 to-blue-600\";\n  };\n\n  if (isLoading) {\n    return (\n      <section className=\"py-20 bg-muted/30\">\n        <div className=\"container mx-auto px-4 lg:px-8\">\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {[...Array(6)].map((_, i) => (\n              <div key={i} className=\"service-card animate-pulse\">\n                <div className=\"w-16 h-16 bg-muted rounded-lg mb-6\"></div>\n                <div className=\"h-6 bg-muted rounded mb-4\"></div>\n                <div className=\"h-20 bg-muted rounded mb-6\"></div>\n                <div className=\"space-y-2\">\n                  <div className=\"h-4 bg-muted rounded\"></div>\n                  <div className=\"h-4 bg-muted rounded\"></div>\n                  <div className=\"h-4 bg-muted rounded\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section id=\"services\" className=\"py-20 bg-muted/30\">\n      <div className=\"container mx-auto px-4 lg:px-8\">\n        <div className=\"text-center mb-16 scroll-reveal\">\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-6\">خدماتنا البرمجية</h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            نقدم حلول برمجية شاملة تغطي جميع احتياجاتك التقنية بأعلى معايير الجودة والاحترافية\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {servicesToDisplay.map((service, index) => (\n            <Card\n              key={service.id}\n              className={`service-card transition-all duration-500 ${\n                visibleServices.includes(index) \n                  ? 'opacity-100 translate-y-0' \n                  : 'opacity-0 translate-y-10'\n              }`}\n              onMouseEnter={playHoverSound}\n              data-testid={`service-${service.id}`}\n            >\n              <div className={`w-16 h-16 bg-gradient-to-br ${getColorClasses(service.color)} rounded-lg flex items-center justify-center mb-6`}>\n                <i className={`${service.icon} text-white text-2xl`}></i>\n              </div>\n              \n              <h3 className=\"text-2xl font-bold mb-4\">{service.title}</h3>\n              \n              <p className=\"text-muted-foreground mb-6\">\n                {service.description}\n              </p>\n              \n              <ul className=\"space-y-2 text-sm\">\n                {(service.features || []).map((feature, featureIndex) => (\n                  <li key={featureIndex} className=\"flex items-center\">\n                    <i className=\"fas fa-check text-green-500 ml-2\"></i>\n                    {feature}\n                  </li>\n                ))}\n              </ul>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":6765},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/sound-manager.tsx":{"content":"import { createContext, useContext, useState, useEffect } from \"react\";\n\ntype SoundContextType = {\n  soundEnabled: boolean;\n  toggleSound: () => void;\n  playHoverSound: () => void;\n  playClickSound: () => void;\n  playNotificationSound: () => void;\n};\n\nconst SoundContext = createContext<SoundContextType | undefined>(undefined);\n\ninterface SoundManagerProps {\n  children: React.ReactNode;\n}\n\nexport function SoundManager({ children }: SoundManagerProps) {\n  const [soundEnabled, setSoundEnabled] = useState(() => {\n    if (typeof window !== \"undefined\") {\n      return localStorage.getItem(\"sound-enabled\") !== \"false\";\n    }\n    return true;\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\"sound-enabled\", soundEnabled.toString());\n  }, [soundEnabled]);\n\n  const playSound = (frequency: number, duration: number) => {\n    if (!soundEnabled) return;\n    \n    try {\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      const oscillator = audioContext.createOscillator();\n      const gainNode = audioContext.createGain();\n      \n      oscillator.connect(gainNode);\n      gainNode.connect(audioContext.destination);\n      \n      oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime);\n      oscillator.type = \"sine\";\n      \n      gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);\n      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);\n      \n      oscillator.start(audioContext.currentTime);\n      oscillator.stop(audioContext.currentTime + duration);\n    } catch (error) {\n      console.log(\"Sound playback failed:\", error);\n    }\n  };\n\n  const playHoverSound = () => playSound(800, 0.1);\n  const playClickSound = () => playSound(1000, 0.15);\n  const playNotificationSound = () => playSound(600, 0.3);\n\n  const toggleSound = () => {\n    setSoundEnabled(prev => !prev);\n    if (!soundEnabled) {\n      playClickSound();\n    }\n  };\n\n  const value = {\n    soundEnabled,\n    toggleSound,\n    playHoverSound,\n    playClickSound,\n    playNotificationSound,\n  };\n\n  return (\n    <SoundContext.Provider value={value}>\n      {children}\n    </SoundContext.Provider>\n  );\n}\n\nexport const useSound = () => {\n  const context = useContext(SoundContext);\n  if (!context) {\n    throw new Error(\"useSound must be used within a SoundManager\");\n  }\n  return context;\n};\n","size_bytes":2367},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"light\",\n  setTheme: () => null,\n  toggleTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"light\",\n  storageKey = \"alqudimi-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    if (typeof window !== \"undefined\") {\n      return (localStorage.getItem(storageKey) as Theme) || defaultTheme;\n    }\n    return defaultTheme;\n  });\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    root.setAttribute(\"data-theme\", theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (newTheme: Theme) => {\n      localStorage.setItem(storageKey, newTheme);\n      setTheme(newTheme);\n    },\n    toggleTheme: () => {\n      const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n      localStorage.setItem(storageKey, newTheme);\n      setTheme(newTheme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1731},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/admin/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useSound } from \"@/hooks/use-sound\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isAuthenticated, getAuthHeaders } from \"@/lib/auth\";\nimport ProjectForm from \"@/components/admin/project-form\";\nimport ServiceForm from \"@/components/admin/service-form\";\nimport CVForm from \"@/components/admin/cv-form\";\nimport type { Project, Service, CvData, ContactMessage } from \"@shared/schema\";\n\nexport default function AdminDashboard() {\n  const [, setLocation] = useLocation();\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [editingProject, setEditingProject] = useState<Project | null>(null);\n  const [editingService, setEditingService] = useState<Service | null>(null);\n  const [editingCvData, setEditingCvData] = useState<CvData | null>(null);\n  const { toast } = useToast();\n  const { playClickSound } = useSound();\n  const queryClient = useQueryClient();\n\n  // Check authentication on mount\n  useEffect(() => {\n    if (!isAuthenticated()) {\n      setLocation(\"/admin/login\");\n    }\n  }, [setLocation]);\n\n  // Queries\n  const { data: projects = [], isLoading: projectsLoading } = useQuery<Project[]>({\n    queryKey: [\"/api/admin/projects\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/projects\", {\n        headers: getAuthHeaders(),\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch projects\");\n      return response.json();\n    },\n    enabled: isAuthenticated(),\n  });\n\n  const { data: services = [], isLoading: servicesLoading } = useQuery<Service[]>({\n    queryKey: [\"/api/admin/services\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/services\", {\n        headers: getAuthHeaders(),\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch services\");\n      return response.json();\n    },\n    enabled: isAuthenticated(),\n  });\n\n  const { data: cvData = [], isLoading: cvLoading } = useQuery<CvData[]>({\n    queryKey: [\"/api/admin/cv\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/cv\", {\n        headers: getAuthHeaders(),\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch CV data\");\n      return response.json();\n    },\n    enabled: isAuthenticated(),\n  });\n\n  const { data: messages = [], isLoading: messagesLoading } = useQuery<ContactMessage[]>({\n    queryKey: [\"/api/admin/messages\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/messages\", {\n        headers: getAuthHeaders(),\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch messages\");\n      return response.json();\n    },\n    enabled: isAuthenticated(),\n  });\n\n  // Delete mutations\n  const deleteProjectMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/admin/projects/${id}`, undefined),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/projects\"] });\n      toast({ title: \"تم حذف المشروع بنجاح\" });\n    },\n    onError: () => {\n      toast({ variant: \"destructive\", title: \"فشل في حذف المشروع\" });\n    },\n  });\n\n  const deleteServiceMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/admin/services/${id}`, undefined),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/services\"] });\n      toast({ title: \"تم حذف الخدمة بنجاح\" });\n    },\n    onError: () => {\n      toast({ variant: \"destructive\", title: \"فشل في حذف الخدمة\" });\n    },\n  });\n\n  const deleteCvDataMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/admin/cv/${id}`, undefined),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/cv\"] });\n      toast({ title: \"تم حذف البيانات بنجاح\" });\n    },\n    onError: () => {\n      toast({ variant: \"destructive\", title: \"فشل في حذف البيانات\" });\n    },\n  });\n\n  const updateMessageStatusMutation = useMutation({\n    mutationFn: ({ id, status }: { id: string; status: string }) => \n      apiRequest(\"PUT\", `/api/admin/messages/${id}/status`, { status }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/messages\"] });\n      toast({ title: \"تم تحديث حالة الرسالة\" });\n    },\n    onError: () => {\n      toast({ variant: \"destructive\", title: \"فشل في تحديث حالة الرسالة\" });\n    },\n  });\n\n  const handleLogout = () => {\n    playClickSound();\n    localStorage.removeItem(\"admin_token\");\n    localStorage.removeItem(\"admin_user\");\n    setLocation(\"/admin/login\");\n  };\n\n  const handleDeleteProject = (id: string) => {\n    if (confirm(\"هل أنت متأكد من حذف هذا المشروع؟\")) {\n      deleteProjectMutation.mutate(id);\n    }\n  };\n\n  const handleDeleteService = (id: string) => {\n    if (confirm(\"هل أنت متأكد من حذف هذه الخدمة؟\")) {\n      deleteServiceMutation.mutate(id);\n    }\n  };\n\n  const handleDeleteCvData = (id: string) => {\n    if (confirm(\"هل أنت متأكد من حذف هذه البيانات؟\")) {\n      deleteCvDataMutation.mutate(id);\n    }\n  };\n\n  const handleMarkAsRead = (id: string) => {\n    updateMessageStatusMutation.mutate({ id, status: \"read\" });\n  };\n\n  const unreadCount = messages.filter(m => m.status === \"unread\").length;\n\n  if (!isAuthenticated()) {\n    return null; // Will redirect to login\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\" dir=\"rtl\">\n      <header className=\"border-b border-border bg-card\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-cogs text-primary-foreground\"></i>\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-bold\">لوحة التحكم الإدارية</h1>\n                <p className=\"text-sm text-muted-foreground\">إدارة محتوى الموقع</p>\n              </div>\n            </div>\n            <Button onClick={handleLogout} variant=\"outline\" data-testid=\"button-logout\">\n              <i className=\"fas fa-sign-out-alt ml-2\"></i>\n              تسجيل الخروج\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"container mx-auto px-4 py-8\">\n        <Tabs value={activeTab} onValueChange={setActiveTab}>\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">نظرة عامة</TabsTrigger>\n            <TabsTrigger value=\"projects\" data-testid=\"tab-projects\">المشاريع</TabsTrigger>\n            <TabsTrigger value=\"services\" data-testid=\"tab-services\">الخدمات</TabsTrigger>\n            <TabsTrigger value=\"cv\" data-testid=\"tab-cv\">السيرة الذاتية</TabsTrigger>\n            <TabsTrigger value=\"messages\" data-testid=\"tab-messages\">\n              الرسائل {unreadCount > 0 && <Badge variant=\"destructive\" className=\"ml-1\">{unreadCount}</Badge>}\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">المشاريع</CardTitle>\n                  <i className=\"fas fa-project-diagram text-muted-foreground\"></i>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{projects.length}</div>\n                  <p className=\"text-xs text-muted-foreground\">إجمالي المشاريع</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">الخدمات</CardTitle>\n                  <i className=\"fas fa-tools text-muted-foreground\"></i>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{services.length}</div>\n                  <p className=\"text-xs text-muted-foreground\">إجمالي الخدمات</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">بيانات السيرة</CardTitle>\n                  <i className=\"fas fa-user text-muted-foreground\"></i>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{cvData.length}</div>\n                  <p className=\"text-xs text-muted-foreground\">عناصر السيرة الذاتية</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">الرسائل</CardTitle>\n                  <i className=\"fas fa-envelope text-muted-foreground\"></i>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{messages.length}</div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {unreadCount} غير مقروءة\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"projects\" className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-3xl font-bold\">إدارة المشاريع</h2>\n              <Button \n                onClick={() => setEditingProject({} as Project)} \n                data-testid=\"button-add-project\"\n              >\n                <i className=\"fas fa-plus ml-2\"></i>\n                إضافة مشروع جديد\n              </Button>\n            </div>\n\n            {editingProject && (\n              <ProjectForm\n                project={editingProject.id ? editingProject : undefined}\n                onClose={() => setEditingProject(null)}\n              />\n            )}\n\n            <div className=\"grid gap-6\">\n              {projectsLoading ? (\n                <div>جاري التحميل...</div>\n              ) : (\n                projects.map((project) => (\n                  <Card key={project.id}>\n                    <CardHeader>\n                      <div className=\"flex justify-between items-start\">\n                        <div>\n                          <CardTitle>{project.title}</CardTitle>\n                          <p className=\"text-muted-foreground mt-2\">\n                            {project.shortDescription}\n                          </p>\n                          <div className=\"flex gap-2 mt-2\">\n                            <Badge variant={project.isActive ? \"default\" : \"secondary\"}>\n                              {project.isActive ? \"نشط\" : \"غير نشط\"}\n                            </Badge>\n                            {project.isFeatured && (\n                              <Badge variant=\"outline\">مميز</Badge>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => setEditingProject(project)}\n                            data-testid={`button-edit-project-${project.id}`}\n                          >\n                            تعديل\n                          </Button>\n                          <Button \n                            variant=\"destructive\" \n                            size=\"sm\"\n                            onClick={() => handleDeleteProject(project.id)}\n                            data-testid={`button-delete-project-${project.id}`}\n                          >\n                            حذف\n                          </Button>\n                        </div>\n                      </div>\n                    </CardHeader>\n                  </Card>\n                ))\n              )}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"services\" className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-3xl font-bold\">إدارة الخدمات</h2>\n              <Button \n                onClick={() => setEditingService({} as Service)} \n                data-testid=\"button-add-service\"\n              >\n                <i className=\"fas fa-plus ml-2\"></i>\n                إضافة خدمة جديدة\n              </Button>\n            </div>\n\n            {editingService && (\n              <ServiceForm\n                service={editingService.id ? editingService : undefined}\n                onClose={() => setEditingService(null)}\n              />\n            )}\n\n            <div className=\"grid gap-6\">\n              {servicesLoading ? (\n                <div>جاري التحميل...</div>\n              ) : (\n                services.map((service) => (\n                  <Card key={service.id}>\n                    <CardHeader>\n                      <div className=\"flex justify-between items-start\">\n                        <div>\n                          <CardTitle>{service.title}</CardTitle>\n                          <p className=\"text-muted-foreground mt-2\">\n                            {service.description}\n                          </p>\n                          <Badge \n                            variant={service.isActive ? \"default\" : \"secondary\"}\n                            className=\"mt-2\"\n                          >\n                            {service.isActive ? \"نشط\" : \"غير نشط\"}\n                          </Badge>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => setEditingService(service)}\n                            data-testid={`button-edit-service-${service.id}`}\n                          >\n                            تعديل\n                          </Button>\n                          <Button \n                            variant=\"destructive\" \n                            size=\"sm\"\n                            onClick={() => handleDeleteService(service.id)}\n                            data-testid={`button-delete-service-${service.id}`}\n                          >\n                            حذف\n                          </Button>\n                        </div>\n                      </div>\n                    </CardHeader>\n                  </Card>\n                ))\n              )}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"cv\" className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-3xl font-bold\">إدارة السيرة الذاتية</h2>\n              <Button \n                onClick={() => setEditingCvData({} as CvData)} \n                data-testid=\"button-add-cv-data\"\n              >\n                <i className=\"fas fa-plus ml-2\"></i>\n                إضافة بيانات جديدة\n              </Button>\n            </div>\n\n            {editingCvData && (\n              <CVForm\n                cvData={editingCvData.id ? editingCvData : undefined}\n                onClose={() => setEditingCvData(null)}\n              />\n            )}\n\n            <div className=\"grid gap-6\">\n              {cvLoading ? (\n                <div>جاري التحميل...</div>\n              ) : (\n                cvData.map((item) => (\n                  <Card key={item.id}>\n                    <CardHeader>\n                      <div className=\"flex justify-between items-start\">\n                        <div>\n                          <div className=\"flex items-center gap-2\">\n                            <Badge>{item.type}</Badge>\n                            <CardTitle>{item.title}</CardTitle>\n                          </div>\n                          {item.subtitle && (\n                            <p className=\"text-muted-foreground mt-1\">{item.subtitle}</p>\n                          )}\n                          {item.description && (\n                            <p className=\"text-muted-foreground mt-2 text-sm\">\n                              {item.description.substring(0, 150)}...\n                            </p>\n                          )}\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => setEditingCvData(item)}\n                            data-testid={`button-edit-cv-${item.id}`}\n                          >\n                            تعديل\n                          </Button>\n                          <Button \n                            variant=\"destructive\" \n                            size=\"sm\"\n                            onClick={() => handleDeleteCvData(item.id)}\n                            data-testid={`button-delete-cv-${item.id}`}\n                          >\n                            حذف\n                          </Button>\n                        </div>\n                      </div>\n                    </CardHeader>\n                  </Card>\n                ))\n              )}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"messages\" className=\"space-y-6\">\n            <h2 className=\"text-3xl font-bold\">إدارة الرسائل</h2>\n\n            <div className=\"grid gap-6\">\n              {messagesLoading ? (\n                <div>جاري التحميل...</div>\n              ) : (\n                messages.map((message) => (\n                  <Card key={message.id}>\n                    <CardHeader>\n                      <div className=\"flex justify-between items-start\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2 mb-2\">\n                            <CardTitle className=\"text-lg\">{message.subject}</CardTitle>\n                            <Badge \n                              variant={message.status === \"unread\" ? \"destructive\" : \"secondary\"}\n                            >\n                              {message.status === \"unread\" ? \"غير مقروءة\" : \"مقروءة\"}\n                            </Badge>\n                          </div>\n                          <div className=\"space-y-1 text-sm text-muted-foreground\">\n                            <p><strong>من:</strong> {message.name}</p>\n                            <p><strong>البريد:</strong> {message.email}</p>\n                            {message.serviceType && (\n                              <p><strong>نوع الخدمة:</strong> {message.serviceType}</p>\n                            )}\n                            <p><strong>التاريخ:</strong> {new Date(message.createdAt).toLocaleString('ar')}</p>\n                          </div>\n                          <div className=\"mt-3 p-3 bg-muted rounded-lg\">\n                            <p className=\"text-sm\">{message.message}</p>\n                          </div>\n                        </div>\n                        <div className=\"flex flex-col gap-2\">\n                          {message.status === \"unread\" && (\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\"\n                              onClick={() => handleMarkAsRead(message.id)}\n                              data-testid={`button-mark-read-${message.id}`}\n                            >\n                              وضع علامة مقروءة\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    </CardHeader>\n                  </Card>\n                ))\n              )}\n              \n              {messages.length === 0 && (\n                <Card>\n                  <CardContent className=\"text-center py-8\">\n                    <i className=\"fas fa-inbox text-4xl text-muted-foreground mb-4\"></i>\n                    <p className=\"text-muted-foreground\">لا توجد رسائل</p>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </TabsContent>\n        </Tabs>\n      </main>\n    </div>\n  );\n}\n","size_bytes":21453},"client/src/pages/admin/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useSound } from \"@/hooks/use-sound\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst loginSchema = z.object({\n  username: z.string().min(1, \"اسم المستخدم مطلوب\"),\n  password: z.string().min(1, \"كلمة المرور مطلوبة\"),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\n\nexport default function AdminLogin() {\n  const [, setLocation] = useLocation();\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n  const { playClickSound } = useSound();\n\n  const form = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const onSubmit = async (data: LoginForm) => {\n    try {\n      setIsLoading(true);\n      playClickSound();\n      \n      const response = await apiRequest(\"POST\", \"/api/admin/login\", data);\n      const result = await response.json();\n      \n      // Store token in localStorage\n      localStorage.setItem(\"admin_token\", result.token);\n      localStorage.setItem(\"admin_user\", JSON.stringify(result.user));\n      \n      toast({\n        title: \"تم تسجيل الدخول بنجاح\",\n        description: `أهلاً بك ${result.user.username}`,\n      });\n      \n      setLocation(\"/admin/dashboard\");\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"خطأ في تسجيل الدخول\",\n        description: error instanceof Error ? error.message : \"فشل في تسجيل الدخول\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/5 to-secondary/5\" dir=\"rtl\">\n      <div className=\"particle-bg\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-primary/5 to-secondary/5\"></div>\n      </div>\n      \n      <Card className=\"w-full max-w-md mx-4 glass-card\">\n        <CardHeader className=\"text-center\">\n          <div className=\"w-16 h-16 bg-gradient-to-br from-primary to-secondary rounded-xl mx-auto mb-4 flex items-center justify-center\">\n            <i className=\"fas fa-shield-alt text-white text-2xl\"></i>\n          </div>\n          <CardTitle className=\"text-2xl gradient-text\">لوحة التحكم الإدارية</CardTitle>\n          <p className=\"text-muted-foreground\">سجل الدخول للوصول إلى لوحة التحكم</p>\n        </CardHeader>\n        \n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>اسم المستخدم</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"text\"\n                        placeholder=\"أدخل اسم المستخدم\"\n                        className=\"form-input\"\n                        data-testid=\"input-username\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>كلمة المرور</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"password\"\n                        placeholder=\"أدخل كلمة المرور\"\n                        className=\"form-input\"\n                        data-testid=\"input-password\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <Button\n                type=\"submit\"\n                disabled={isLoading}\n                className=\"w-full btn-primary\"\n                data-testid=\"button-login\"\n              >\n                {isLoading ? (\n                  <>\n                    <i className=\"fas fa-spinner fa-spin ml-2\"></i>\n                    جاري تسجيل الدخول...\n                  </>\n                ) : (\n                  <>\n                    <i className=\"fas fa-sign-in-alt ml-2\"></i>\n                    تسجيل الدخول\n                  </>\n                )}\n              </Button>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5218},"client/src/components/ui/live-chat.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useSound } from \"@/hooks/use-sound\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Message {\n  id: string;\n  text: string;\n  sender: \"user\" | \"admin\";\n  timestamp: Date;\n}\n\nexport default function LiveChat() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: \"1\",\n      text: \"مرحباً بك في Alqudimi Technology! كيف يمكنني مساعدتك اليوم؟\",\n      sender: \"admin\",\n      timestamp: new Date()\n    }\n  ]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { playClickSound, playNotificationSound } = useSound();\n  const { toast } = useToast();\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleSendMessage = () => {\n    if (!newMessage.trim()) return;\n\n    playClickSound();\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      text: newMessage,\n      sender: \"user\",\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setNewMessage(\"\");\n    setIsTyping(true);\n\n    // Simulate admin response\n    setTimeout(() => {\n      setIsTyping(false);\n      const adminResponse: Message = {\n        id: (Date.now() + 1).toString(),\n        text: \"شكراً لرسالتك! سنقوم بالرد عليك في أقرب وقت ممكن. يمكنك أيضاً التواصل معنا مباشرة عبر الهاتف أو البريد الإلكتروني.\",\n        sender: \"admin\",\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, adminResponse]);\n      \n      if (!isOpen) {\n        setUnreadCount(prev => prev + 1);\n        playNotificationSound();\n      }\n    }, 1500);\n  };\n\n  const handleToggleChat = () => {\n    playClickSound();\n    setIsOpen(!isOpen);\n    if (!isOpen) {\n      setUnreadCount(0);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\") {\n      handleSendMessage();\n    }\n  };\n\n  return (\n    <>\n      {/* Chat Toggle Button */}\n      <div className=\"fixed bottom-6 right-6 z-50\">\n        <Button\n          onClick={handleToggleChat}\n          className=\"w-16 h-16 rounded-full bg-gradient-to-r from-primary to-secondary shadow-lg hover:scale-110 transition-all duration-300 relative\"\n          data-testid=\"button-toggle-chat\"\n        >\n          <i className={`fas ${isOpen ? 'fa-times' : 'fa-comments'} text-white text-xl`}></i>\n          {unreadCount > 0 && (\n            <span className=\"absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full w-6 h-6 flex items-center justify-center animate-pulse\">\n              {unreadCount}\n            </span>\n          )}\n        </Button>\n      </div>\n\n      {/* Chat Window */}\n      {isOpen && (\n        <div className=\"fixed bottom-24 right-6 z-40 w-80 h-96 animate-in slide-in-from-bottom-2 duration-300\">\n          <Card className=\"modern-card h-full flex flex-col\">\n            <CardHeader className=\"bg-gradient-to-r from-primary to-secondary text-white rounded-t-lg p-4\">\n              <CardTitle className=\"flex items-center gap-2 text-lg\">\n                <i className=\"fas fa-headset\"></i>\n                تواصل مع Alqudimi Technology\n              </CardTitle>\n              <p className=\"text-xs opacity-90\">نحن هنا للمساعدة</p>\n            </CardHeader>\n            \n            <CardContent className=\"flex-1 flex flex-col p-0\">\n              <ScrollArea className=\"flex-1 p-4\">\n                <div className=\"space-y-4\">\n                  {messages.map((message) => (\n                    <div\n                      key={message.id}\n                      className={`flex ${message.sender === \"user\" ? \"justify-end\" : \"justify-start\"}`}\n                    >\n                      <div\n                        className={`max-w-[80%] p-3 rounded-lg ${\n                          message.sender === \"user\"\n                            ? \"bg-primary text-primary-foreground\"\n                            : \"bg-muted text-muted-foreground\"\n                        }`}\n                      >\n                        <p className=\"text-sm\">{message.text}</p>\n                        <p className=\"text-xs opacity-70 mt-1\">\n                          {message.timestamp.toLocaleTimeString('ar-SA', { \n                            hour: '2-digit', \n                            minute: '2-digit' \n                          })}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                  \n                  {isTyping && (\n                    <div className=\"flex justify-start\">\n                      <div className=\"bg-muted text-muted-foreground p-3 rounded-lg\">\n                        <div className=\"flex space-x-1\">\n                          <div className=\"w-2 h-2 bg-current rounded-full animate-bounce\"></div>\n                          <div className=\"w-2 h-2 bg-current rounded-full animate-bounce delay-100\"></div>\n                          <div className=\"w-2 h-2 bg-current rounded-full animate-bounce delay-200\"></div>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                  \n                  <div ref={messagesEndRef} />\n                </div>\n              </ScrollArea>\n              \n              <div className=\"p-4 border-t\">\n                <div className=\"flex gap-2\">\n                  <Input\n                    value={newMessage}\n                    onChange={(e) => setNewMessage(e.target.value)}\n                    onKeyPress={handleKeyPress}\n                    placeholder=\"اكتب رسالتك هنا...\"\n                    className=\"flex-1\"\n                    data-testid=\"input-chat-message\"\n                  />\n                  <Button\n                    onClick={handleSendMessage}\n                    size=\"sm\"\n                    className=\"bg-primary hover:bg-primary/90\"\n                    data-testid=\"button-send-message\"\n                  >\n                    <i className=\"fas fa-paper-plane\"></i>\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </>\n  );\n}","size_bytes":6768},"client/src/App-new.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"./components/ui/theme-provider\";\nimport { SoundManager } from \"./components/ui/sound-manager\";\nimport LiveChat from \"@/components/ui/live-chat\";\nimport Navbar from \"@/components/layout/navbar\";\nimport Footer from \"@/components/layout/footer\";\nimport HomeNew from \"@/pages/home-new\";\nimport AboutPage from \"@/pages/about-page\";\nimport ServicesPage from \"@/pages/services-page\";\nimport ProjectsPage from \"@/pages/projects-page\";\nimport ContactPage from \"@/pages/contact-page\";\nimport AdminLogin from \"@/pages/admin/login\";\nimport AdminDashboard from \"@/pages/admin/dashboard\";\nimport ProjectDetail from \"@/pages/project-detail\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Navbar />\n      <main className=\"flex-1\">\n        <Switch>\n          <Route path=\"/\" component={HomeNew} />\n          <Route path=\"/about\" component={AboutPage} />\n          <Route path=\"/services\" component={ServicesPage} />\n          <Route path=\"/projects\" component={ProjectsPage} />\n          <Route path=\"/contact\" component={ContactPage} />\n          <Route path=\"/admin/login\" component={AdminLogin} />\n          <Route path=\"/admin/dashboard\" component={AdminDashboard} />\n          <Route path=\"/projects/:id\" component={ProjectDetail} />\n          <Route component={NotFound} />\n        </Switch>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <SoundManager>\n            <Toaster />\n            <LiveChat />\n            <Router />\n          </SoundManager>\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":2056},"client/src/components/layout/navbar.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { useSound } from \"@/hooks/use-sound\";\nimport GlobalSearch from \"@/components/search/global-search\";\n\nexport default function Navbar() {\n  const [isScrolled, setIsScrolled] = useState(false);\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [location] = useLocation();\n  const { playClickSound, playHoverSound } = useSound();\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY > 20);\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  const navItems = [\n    { name: \"الرئيسية\", path: \"/\", icon: \"fas fa-home\" },\n    { name: \"من نحن\", path: \"/about\", icon: \"fas fa-user-friends\" },\n    { name: \"خدماتنا\", path: \"/services\", icon: \"fas fa-cogs\" },\n    { name: \"مشاريعنا\", path: \"/projects\", icon: \"fas fa-folder-open\" },\n    { name: \"المدونة\", path: \"/blog\", icon: \"fas fa-blog\" },\n    { name: \"آراء العملاء\", path: \"/testimonials\", icon: \"fas fa-star\" },\n    { name: \"تواصل معنا\", path: \"/contact\", icon: \"fas fa-phone\" }\n  ];\n\n  const isActive = (path: string) => {\n    return location === path || (path !== \"/\" && location.startsWith(path));\n  };\n\n  return (\n    <nav className={`fixed top-0 left-0 right-0 z-50 transition-all duration-300 ${\n      isScrolled \n        ? \"bg-white/95 dark:bg-slate-900/95 backdrop-blur-lg shadow-lg\" \n        : \"bg-transparent\"\n    }`}>\n      <div className=\"container mx-auto px-4\">\n        <div className=\"flex items-center justify-between h-16 lg:h-20\">\n          {/* Logo */}\n          <Link to=\"/\" onClick={playClickSound}>\n            <div className=\"flex items-center gap-3 hover:scale-105 transition-transform duration-300\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-blue-600 to-purple-600 rounded-xl flex items-center justify-center p-1\">\n                <img \n                  src=\"/attached_assets/alqudimi-logo.png\" \n                  alt=\"Alqudimi Technology Logo\" \n                  className=\"w-full h-full object-contain\" \n                />\n              </div>\n              <div className=\"hidden sm:block\">\n                <h1 className=\"text-xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n                  Alqudimi Technology\n                </h1>\n                <p className=\"text-xs text-slate-600 dark:text-slate-400\">\n                  Advanced Tech Solutions\n                </p>\n              </div>\n            </div>\n          </Link>\n\n          {/* Desktop Navigation */}\n          <div className=\"hidden lg:flex items-center gap-8\">\n            {navItems.map((item) => (\n              <Link \n                key={item.path} \n                to={item.path}\n                onClick={playClickSound}\n                onMouseEnter={playHoverSound}\n              >\n                <div className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-all duration-300 hover:bg-blue-50 dark:hover:bg-slate-800 ${\n                  isActive(item.path) \n                    ? \"text-blue-600 bg-blue-50 dark:bg-slate-800\" \n                    : \"text-slate-700 dark:text-slate-300\"\n                }`}>\n                  <i className={`${item.icon} text-sm`}></i>\n                  <span className=\"font-medium\">{item.name}</span>\n                </div>\n              </Link>\n            ))}\n          </div>\n\n          {/* Right Side Actions */}\n          <div className=\"flex items-center gap-4\">\n            {/* Search */}\n            <div className=\"hidden md:block\">\n              <GlobalSearch \n                variant=\"header\" \n                placeholder=\"ابحث في الموقع...\"\n              />\n            </div>\n            \n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              className=\"hidden lg:flex w-10 h-10 p-0\"\n              onClick={playClickSound}\n              data-testid=\"button-theme-toggle\"\n            >\n              <i className=\"fas fa-sun dark:hidden\"></i>\n              <i className=\"fas fa-moon hidden dark:block\"></i>\n            </Button>\n            \n            {/* CTA Button - Desktop */}\n            <div className=\"hidden lg:block\">\n              <Link to=\"/contact\">\n                <Button \n                  className=\"bg-blue-600 hover:bg-blue-700 text-white px-6\"\n                  onClick={playClickSound}\n                  onMouseEnter={playHoverSound}\n                  data-testid=\"button-nav-cta\"\n                >\n                  <i className=\"fas fa-rocket ml-2\"></i>\n                  ابدأ مشروعك\n                </Button>\n              </Link>\n            </div>\n\n            {/* Mobile Menu Toggle */}\n            <Sheet open={isMobileMenuOpen} onOpenChange={setIsMobileMenuOpen}>\n              <SheetTrigger asChild>\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\" \n                  className=\"lg:hidden w-10 h-10 p-0\"\n                  onClick={playClickSound}\n                  data-testid=\"button-mobile-menu\"\n                >\n                  <i className=\"fas fa-bars text-xl\"></i>\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"right\" className=\"w-80 p-0\">\n                <div className=\"flex flex-col h-full\">\n                  {/* Mobile Menu Header */}\n                  <div className=\"p-6 border-b border-slate-200 dark:border-slate-700\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"w-12 h-12 bg-gradient-to-br from-blue-600 to-purple-600 rounded-xl flex items-center justify-center p-1\">\n                        <img \n                          src=\"/attached_assets/alqudimi-logo.png\" \n                          alt=\"Alqudimi Technology Logo\" \n                          className=\"w-full h-full object-contain\" \n                        />\n                      </div>\n                      <div>\n                        <h2 className=\"text-lg font-bold text-slate-800 dark:text-white\">\n                          Alqudimi Technology\n                        </h2>\n                        <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n                          Advanced Tech Solutions\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Mobile Menu Items */}\n                  <div className=\"flex-1 p-6\">\n                    <div className=\"space-y-2\">\n                      {navItems.map((item) => (\n                        <Link \n                          key={item.path} \n                          to={item.path}\n                          onClick={() => {\n                            playClickSound();\n                            setIsMobileMenuOpen(false);\n                          }}\n                        >\n                          <div className={`flex items-center gap-4 p-4 rounded-xl transition-all duration-300 ${\n                            isActive(item.path)\n                              ? \"bg-blue-600 text-white shadow-lg\"\n                              : \"hover:bg-slate-100 dark:hover:bg-slate-800 text-slate-700 dark:text-slate-300\"\n                          }`}>\n                            <i className={`${item.icon} w-5 text-center`}></i>\n                            <span className=\"font-medium\">{item.name}</span>\n                            {isActive(item.path) && (\n                              <i className=\"fas fa-circle text-xs mr-auto\"></i>\n                            )}\n                          </div>\n                        </Link>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Mobile Menu Footer */}\n                  <div className=\"p-6 border-t border-slate-200 dark:border-slate-700\">\n                    <Link to=\"/contact\" onClick={() => setIsMobileMenuOpen(false)}>\n                      <Button \n                        className=\"w-full bg-blue-600 hover:bg-blue-700 text-white py-3\"\n                        onClick={playClickSound}\n                        data-testid=\"button-mobile-cta\"\n                      >\n                        <i className=\"fas fa-rocket ml-2\"></i>\n                        ابدأ مشروعك الآن\n                      </Button>\n                    </Link>\n                  </div>\n                </div>\n              </SheetContent>\n            </Sheet>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}","size_bytes":8775},"client/src/pages/about-page.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useSound } from \"@/hooks/use-sound\";\n\ntype CVData = {\n  id: string;\n  type: string;\n  title: string;\n  company?: string;\n  description: string;\n  startDate?: string;\n  endDate?: string;\n  order: number;\n  isActive: boolean;\n};\n\nexport default function AboutPage() {\n  const { playClickSound, playHoverSound } = useSound();\n  \n  const { data: cvData = [], isLoading } = useQuery<CVData[]>({\n    queryKey: [\"/api/cv\"]\n  });\n\n  const stats = [\n    { value: \"150+\", label: \"مشروع مكتمل\", icon: \"fas fa-rocket\" },\n    { value: \"7+\", label: \"سنوات خبرة\", icon: \"fas fa-calendar\" },\n    { value: \"50+\", label: \"تقنية متقنة\", icon: \"fas fa-cogs\" },\n    { value: \"100%\", label: \"رضا العملاء\", icon: \"fas fa-heart\" }\n  ];\n\n  const team = [\n    {\n      name: \"عبدالعزيز محمد القديمي\",\n      role: \"مؤسس ومطور رئيسي\",\n      image: \"/api/placeholder/150/150\",\n      skills: [\"React\", \"Node.js\", \"Python\", \"AI\"],\n      social: {\n        linkedin: \"#\",\n        github: \"#\",\n        twitter: \"#\"\n      }\n    }\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 dark:from-slate-900 dark:to-blue-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-slate-600 dark:text-slate-300\">جاري تحميل المعلومات...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const summary = cvData.find(item => item.type === 'summary');\n  const experience = cvData.filter(item => item.type === 'experience' && item.isActive);\n  const education = cvData.filter(item => item.type === 'education' && item.isActive);\n  const skills = cvData.filter(item => item.type === 'skill' && item.isActive);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 dark:from-slate-900 dark:to-blue-900 pt-20\">\n      {/* Hero Section */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 dark:text-white mb-6\">\n              <span className=\"bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n                من نحن\n              </span>\n            </h1>\n            <p className=\"text-xl text-slate-600 dark:text-slate-300 mb-8 leading-relaxed\">\n              {summary?.description || \"شركة Alqudimi Technology هي شركة تقنية رائدة متخصصة في تطوير الحلول الرقمية المبتكرة\"}\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link to=\"/contact\">\n                <Button \n                  size=\"lg\"\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white px-8 py-3\"\n                  onClick={playClickSound}\n                  data-testid=\"button-contact-us\"\n                >\n                  <i className=\"fas fa-phone ml-2\"></i>\n                  تواصل معنا\n                </Button>\n              </Link>\n              <Link to=\"/projects\">\n                <Button \n                  size=\"lg\"\n                  variant=\"outline\"\n                  className=\"border-blue-600 text-blue-600 hover:bg-blue-50 px-8 py-3\"\n                  onClick={playClickSound}\n                  data-testid=\"button-our-work\"\n                >\n                  <i className=\"fas fa-folder-open ml-2\"></i>\n                  أعمالنا\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Stats Section */}\n      <section className=\"py-16 bg-white dark:bg-slate-800\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6 max-w-4xl mx-auto\">\n            {stats.map((stat, index) => (\n              <div \n                key={index}\n                className=\"text-center p-6 bg-gradient-to-br from-blue-50 to-purple-50 dark:from-slate-700 dark:to-slate-600 rounded-2xl hover:shadow-lg transition-shadow duration-300\"\n                style={{ animationDelay: `${index * 100}ms` }}\n              >\n                <div className=\"text-3xl mb-3 text-blue-600\">\n                  <i className={stat.icon}></i>\n                </div>\n                <div className=\"text-3xl font-bold text-slate-800 dark:text-white mb-2\">\n                  {stat.value}\n                </div>\n                <div className=\"text-sm text-slate-600 dark:text-slate-300 font-medium\">\n                  {stat.label}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Experience Section */}\n      {experience.length > 0 && (\n        <section className=\"py-16\">\n          <div className=\"container mx-auto px-4\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-slate-800 dark:text-white text-center mb-12\">\n              خبراتنا\n            </h2>\n            <div className=\"max-w-4xl mx-auto space-y-6\">\n              {experience\n                .sort((a, b) => a.order - b.order)\n                .map((exp, index) => (\n                  <Card \n                    key={exp.id}\n                    className=\"hover:shadow-lg transition-shadow duration-300 border-0 shadow-md\"\n                    style={{ animationDelay: `${index * 100}ms` }}\n                  >\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-4\">\n                        <div>\n                          <h3 className=\"text-xl font-bold text-slate-800 dark:text-white mb-2\">\n                            {exp.title}\n                          </h3>\n                          {exp.company && (\n                            <p className=\"text-blue-600 font-medium mb-2\">{exp.company}</p>\n                          )}\n                        </div>\n                        {(exp.startDate || exp.endDate) && (\n                          <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800 md:ml-4\">\n                            {exp.startDate} - {exp.endDate || 'الحالي'}\n                          </Badge>\n                        )}\n                      </div>\n                      <p className=\"text-slate-600 dark:text-slate-300 leading-relaxed\">\n                        {exp.description}\n                      </p>\n                    </CardContent>\n                  </Card>\n                ))}\n            </div>\n          </div>\n        </section>\n      )}\n\n      {/* Skills Section */}\n      {skills.length > 0 && (\n        <section className=\"py-16 bg-white dark:bg-slate-800\">\n          <div className=\"container mx-auto px-4\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-slate-800 dark:text-white text-center mb-12\">\n              مهاراتنا التقنية\n            </h2>\n            <div className=\"max-w-4xl mx-auto\">\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {skills\n                  .sort((a, b) => a.order - b.order)\n                  .map((skill, index) => (\n                    <div \n                      key={skill.id}\n                      className=\"p-4 bg-slate-50 dark:bg-slate-700 rounded-xl hover:bg-slate-100 dark:hover:bg-slate-600 transition-colors duration-300\"\n                      style={{ animationDelay: `${index * 50}ms` }}\n                    >\n                      <h3 className=\"font-bold text-slate-800 dark:text-white mb-2\">\n                        {skill.title}\n                      </h3>\n                      <p className=\"text-sm text-slate-600 dark:text-slate-300\">\n                        {skill.description}\n                      </p>\n                    </div>\n                  ))}\n              </div>\n            </div>\n          </div>\n        </section>\n      )}\n\n      {/* Team Section */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-4\">\n          <h2 className=\"text-3xl md:text-4xl font-bold text-slate-800 dark:text-white text-center mb-12\">\n            فريق العمل\n          </h2>\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {team.map((member, index) => (\n                <Card \n                  key={index}\n                  className=\"text-center hover:shadow-xl transition-all duration-300 border-0 shadow-lg\"\n                  onMouseEnter={playHoverSound}\n                >\n                  <CardContent className=\"p-6\">\n                    <div className=\"w-24 h-24 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-4\">\n                      <i className=\"fas fa-user text-white text-2xl\"></i>\n                    </div>\n                    <h3 className=\"text-xl font-bold text-slate-800 dark:text-white mb-2\">\n                      {member.name}\n                    </h3>\n                    <p className=\"text-blue-600 font-medium mb-4\">{member.role}</p>\n                    <div className=\"flex flex-wrap gap-2 justify-center mb-4\">\n                      {member.skills.map((skill, skillIndex) => (\n                        <Badge key={skillIndex} variant=\"secondary\" className=\"bg-blue-100 text-blue-800\">\n                          {skill}\n                        </Badge>\n                      ))}\n                    </div>\n                    <div className=\"flex justify-center space-x-3\">\n                      <Button variant=\"ghost\" size=\"sm\" className=\"w-10 h-10 p-0\">\n                        <i className=\"fab fa-linkedin text-blue-600\"></i>\n                      </Button>\n                      <Button variant=\"ghost\" size=\"sm\" className=\"w-10 h-10 p-0\">\n                        <i className=\"fab fa-github text-slate-600\"></i>\n                      </Button>\n                      <Button variant=\"ghost\" size=\"sm\" className=\"w-10 h-10 p-0\">\n                        <i className=\"fab fa-twitter text-blue-400\"></i>\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 bg-gradient-to-r from-blue-600 to-purple-600\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"text-3xl md:text-4xl font-bold text-white mb-4\">\n            انضم إلى عائلة عملائنا المميزين\n          </h2>\n          <p className=\"text-xl text-blue-100 mb-8 max-w-2xl mx-auto\">\n            دعنا نساعدك في تحقيق أهدافك التقنية بخبرتنا ومهاراتنا المتقدمة\n          </p>\n          <Link to=\"/contact\">\n            <Button \n              size=\"lg\"\n              variant=\"secondary\"\n              className=\"bg-white text-blue-600 hover:bg-blue-50 px-8 py-3\"\n              onClick={playClickSound}\n              data-testid=\"button-join-clients\"\n            >\n              <i className=\"fas fa-handshake ml-2\"></i>\n              ابدأ التعاون معنا\n            </Button>\n          </Link>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":11720},"client/src/pages/contact-page.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useSound } from \"@/hooks/use-sound\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ntype ContactInfo = {\n  id: string;\n  type: string;\n  value: string;\n  label: string;\n  icon: string;\n  order: number;\n  isActive: boolean;\n};\n\nconst messageSchema = z.object({\n  name: z.string().min(2, \"الاسم يجب أن يكون على الأقل حرفين\"),\n  email: z.string().email(\"البريد الإلكتروني غير صحيح\"),\n  subject: z.string().min(5, \"الموضوع يجب أن يكون على الأقل 5 أحرف\"),\n  message: z.string().min(10, \"الرسالة يجب أن تكون على الأقل 10 أحرف\")\n});\n\ntype MessageForm = z.infer<typeof messageSchema>;\n\nexport default function ContactPage() {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n  const { playClickSound, playHoverSound } = useSound();\n  const queryClient = useQueryClient();\n\n  const { data: contactInfo = [], isLoading } = useQuery<ContactInfo[]>({\n    queryKey: [\"/api/contact-info\"]\n  });\n\n  const form = useForm<MessageForm>({\n    resolver: zodResolver(messageSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      subject: \"\",\n      message: \"\"\n    }\n  });\n\n  const sendMessageMutation = useMutation({\n    mutationFn: (data: MessageForm) => apiRequest(\"/api/contact\", {\n      method: \"POST\",\n      body: JSON.stringify(data)\n    }),\n    onSuccess: () => {\n      toast({\n        title: \"تم إرسال الرسالة\",\n        description: \"شكراً لك! سنتواصل معك قريباً\",\n      });\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/contact\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"خطأ في الإرسال\",\n        description: \"حدث خطأ، يرجى المحاولة مرة أخرى\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const onSubmit = async (data: MessageForm) => {\n    setIsSubmitting(true);\n    playClickSound();\n    await sendMessageMutation.mutateAsync(data);\n    setIsSubmitting(false);\n  };\n\n  const contactMethods = [\n    {\n      title: \"تواصل سريع\",\n      description: \"للاستفسارات السريعة\",\n      icon: \"fas fa-comments\",\n      color: \"bg-blue-500\",\n      action: \"Live Chat\"\n    },\n    {\n      title: \"مكالمة مباشرة\",\n      description: \"للمناقشات التفصيلية\",\n      icon: \"fas fa-phone\",\n      color: \"bg-green-500\",\n      action: \"Call Now\"\n    },\n    {\n      title: \"البريد الإلكتروني\",\n      description: \"للرسائل المفصلة\",\n      icon: \"fas fa-envelope\",\n      color: \"bg-purple-500\",\n      action: \"Send Email\"\n    },\n    {\n      title: \"واتساب\",\n      description: \"للتواصل الفوري\",\n      icon: \"fab fa-whatsapp\",\n      color: \"bg-green-600\",\n      action: \"WhatsApp\"\n    }\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 dark:from-slate-900 dark:to-blue-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-slate-600 dark:text-slate-300\">جاري تحميل معلومات التواصل...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 dark:from-slate-900 dark:to-blue-900 pt-20\">\n      {/* Header */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <div className=\"max-w-3xl mx-auto\">\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 dark:text-white mb-6\">\n              <span className=\"bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n                تواصل معنا\n              </span>\n            </h1>\n            <p className=\"text-xl text-slate-600 dark:text-slate-300 mb-8\">\n              نحن هنا لمساعدتك في تحقيق أهدافك التقنية. تواصل معنا بالطريقة التي تفضلها\n            </p>\n          </div>\n        </div>\n      </section>\n\n      <div className=\"container mx-auto px-4 pb-16\">\n        <div className=\"grid lg:grid-cols-2 gap-12\">\n          {/* Contact Form */}\n          <div>\n            <Card className=\"border-0 shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"text-2xl font-bold text-slate-800 dark:text-white\">\n                  أرسل لنا رسالة\n                </CardTitle>\n                <p className=\"text-slate-600 dark:text-slate-300\">\n                  املأ النموذج أدناه وسنتواصل معك في أقرب وقت\n                </p>\n              </CardHeader>\n              <CardContent>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-slate-700 dark:text-slate-300\">الاسم</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"اسمك الكامل\" \n                                {...field}\n                                className=\"border-slate-300 focus:border-blue-500\"\n                                data-testid=\"input-name\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-slate-700 dark:text-slate-300\">البريد الإلكتروني</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"your@email.com\" \n                                type=\"email\"\n                                {...field}\n                                className=\"border-slate-300 focus:border-blue-500\"\n                                data-testid=\"input-email\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                    <FormField\n                      control={form.control}\n                      name=\"subject\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-slate-700 dark:text-slate-300\">موضوع الرسالة</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"ما هو موضوع رسالتك؟\" \n                              {...field}\n                              className=\"border-slate-300 focus:border-blue-500\"\n                              data-testid=\"input-subject\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"message\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-slate-700 dark:text-slate-300\">الرسالة</FormLabel>\n                          <FormControl>\n                            <Textarea \n                              placeholder=\"اكتب رسالتك هنا...\"\n                              className=\"min-h-[120px] border-slate-300 focus:border-blue-500\"\n                              {...field}\n                              data-testid=\"textarea-message\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full bg-blue-600 hover:bg-blue-700 text-white py-3\"\n                      disabled={isSubmitting}\n                      onMouseEnter={playHoverSound}\n                      data-testid=\"button-send-message\"\n                    >\n                      {isSubmitting ? (\n                        <>\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white ml-2\"></div>\n                          جاري الإرسال...\n                        </>\n                      ) : (\n                        <>\n                          <i className=\"fas fa-paper-plane ml-2\"></i>\n                          إرسال الرسالة\n                        </>\n                      )}\n                    </Button>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Contact Methods */}\n          <div className=\"space-y-8\">\n            {/* Quick Contact Methods */}\n            <div>\n              <h2 className=\"text-2xl font-bold text-slate-800 dark:text-white mb-6\">\n                طرق التواصل السريع\n              </h2>\n              <div className=\"grid gap-4\">\n                {contactMethods.map((method, index) => (\n                  <Card \n                    key={index}\n                    className=\"group hover:shadow-lg transition-all duration-300 cursor-pointer border-0 shadow-md\"\n                    onMouseEnter={playHoverSound}\n                    onClick={playClickSound}\n                    data-testid={`contact-method-${index}`}\n                  >\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center gap-4\">\n                        <div className={`w-12 h-12 ${method.color} rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform duration-300`}>\n                          <i className={`${method.icon} text-white text-lg`}></i>\n                        </div>\n                        <div className=\"flex-1\">\n                          <h3 className=\"font-bold text-slate-800 dark:text-white\">\n                            {method.title}\n                          </h3>\n                          <p className=\"text-sm text-slate-600 dark:text-slate-300\">\n                            {method.description}\n                          </p>\n                        </div>\n                        <i className=\"fas fa-chevron-left text-slate-400 group-hover:text-blue-600 transition-colors\"></i>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n\n            {/* Contact Information */}\n            <div>\n              <h2 className=\"text-2xl font-bold text-slate-800 dark:text-white mb-6\">\n                معلومات التواصل\n              </h2>\n              <Card className=\"border-0 shadow-lg\">\n                <CardContent className=\"p-6 space-y-4\">\n                  {contactInfo\n                    .filter(info => info.isActive)\n                    .sort((a, b) => a.order - b.order)\n                    .map((info) => (\n                      <div key={info.id} className=\"flex items-center gap-4 p-3 bg-slate-50 dark:bg-slate-700 rounded-lg\">\n                        <div className=\"w-10 h-10 bg-blue-600 rounded-lg flex items-center justify-center\">\n                          <i className={`${info.icon} text-white`}></i>\n                        </div>\n                        <div>\n                          <div className=\"font-medium text-slate-800 dark:text-white\">\n                            {info.label}\n                          </div>\n                          <div className=\"text-slate-600 dark:text-slate-300 text-sm\">\n                            {info.value}\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Office Hours */}\n            <div>\n              <h2 className=\"text-2xl font-bold text-slate-800 dark:text-white mb-6\">\n                ساعات العمل\n              </h2>\n              <Card className=\"border-0 shadow-lg\">\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between items-center py-2 border-b border-slate-200 dark:border-slate-600\">\n                      <span className=\"text-slate-600 dark:text-slate-300\">الأحد - الخميس</span>\n                      <span className=\"font-medium text-slate-800 dark:text-white\">9:00 ص - 6:00 م</span>\n                    </div>\n                    <div className=\"flex justify-between items-center py-2 border-b border-slate-200 dark:border-slate-600\">\n                      <span className=\"text-slate-600 dark:text-slate-300\">الجمعة</span>\n                      <span className=\"font-medium text-slate-800 dark:text-white\">2:00 م - 6:00 م</span>\n                    </div>\n                    <div className=\"flex justify-between items-center py-2\">\n                      <span className=\"text-slate-600 dark:text-slate-300\">السبت</span>\n                      <span className=\"font-medium text-red-600\">مغلق</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":14773},"client/src/pages/home-new.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useSound } from \"@/hooks/use-sound\";\n\nexport default function HomeNew() {\n  const { playClickSound, playHoverSound } = useSound();\n\n  const services = [\n    {\n      id: 1,\n      title: \"تطوير المواقع\",\n      description: \"مواقع احترافية وسريعة\",\n      icon: \"fas fa-globe\",\n      color: \"bg-blue-500\"\n    },\n    {\n      id: 2,\n      title: \"تطبيقات الموبايل\",\n      description: \"تطبيقات ذكية لجميع الأجهزة\",\n      icon: \"fas fa-mobile-alt\",\n      color: \"bg-green-500\"\n    },\n    {\n      id: 3,\n      title: \"الذكاء الاصطناعي\",\n      description: \"حلول ذكية متطورة\",\n      icon: \"fas fa-brain\",\n      color: \"bg-purple-500\"\n    },\n    {\n      id: 4,\n      title: \"التجارة الإلكترونية\",\n      description: \"متاجر إلكترونية شاملة\",\n      icon: \"fas fa-shopping-cart\",\n      color: \"bg-orange-500\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 dark:from-slate-900 dark:to-blue-900\">\n      {/* Hero Section */}\n      <section className=\"relative overflow-hidden py-20 lg:py-32\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            {/* Text Content */}\n            <div className=\"space-y-8 text-center lg:text-right\">\n              <div className=\"space-y-4\">\n                <h1 className=\"text-4xl md:text-6xl font-bold text-slate-800 dark:text-white leading-tight\">\n                  <span className=\"bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n                    Alqudimi Technology\n                  </span>\n                </h1>\n                <p className=\"text-xl text-slate-600 dark:text-slate-300 max-w-2xl mx-auto lg:mx-0\">\n                  نحن نقدم حلول تقنية متطورة ومبتكرة لجعل أعمالك تنمو وتزدهر في العصر الرقمي\n                </p>\n              </div>\n              \n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center lg:justify-start\">\n                <Link to=\"/services\">\n                  <Button \n                    size=\"lg\" \n                    className=\"bg-blue-600 hover:bg-blue-700 text-white px-8 py-3\"\n                    onClick={playClickSound}\n                    onMouseEnter={playHoverSound}\n                    data-testid=\"button-services\"\n                  >\n                    <i className=\"fas fa-rocket ml-2\"></i>\n                    خدماتنا\n                  </Button>\n                </Link>\n                <Link to=\"/about\">\n                  <Button \n                    variant=\"outline\" \n                    size=\"lg\"\n                    className=\"border-blue-600 text-blue-600 hover:bg-blue-50 px-8 py-3\"\n                    onClick={playClickSound}\n                    onMouseEnter={playHoverSound}\n                    data-testid=\"button-about\"\n                  >\n                    <i className=\"fas fa-info-circle ml-2\"></i>\n                    من نحن\n                  </Button>\n                </Link>\n              </div>\n            </div>\n\n            {/* Visual Element */}\n            <div className=\"relative\">\n              <div className=\"bg-gradient-to-br from-blue-500 to-purple-600 rounded-3xl p-1\">\n                <div className=\"bg-white dark:bg-slate-800 rounded-3xl p-8 space-y-6\">\n                  <div className=\"text-center\">\n                    <div className=\"w-20 h-20 bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                      <i className=\"fas fa-laptop-code text-white text-2xl\"></i>\n                    </div>\n                    <h3 className=\"text-2xl font-bold text-slate-800 dark:text-white mb-2\">\n                      تقنيات متقدمة\n                    </h3>\n                    <p className=\"text-slate-600 dark:text-slate-300\">\n                      نستخدم أحدث التقنيات لضمان أفضل النتائج\n                    </p>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"text-center p-4 bg-slate-50 dark:bg-slate-700 rounded-xl\">\n                      <div className=\"text-2xl font-bold text-blue-600\">150+</div>\n                      <div className=\"text-sm text-slate-600 dark:text-slate-300\">مشروع</div>\n                    </div>\n                    <div className=\"text-center p-4 bg-slate-50 dark:bg-slate-700 rounded-xl\">\n                      <div className=\"text-2xl font-bold text-green-600\">7+</div>\n                      <div className=\"text-sm text-slate-600 dark:text-slate-300\">سنوات خبرة</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Services Preview */}\n      <section className=\"py-16 bg-white dark:bg-slate-800\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-slate-800 dark:text-white mb-4\">\n              خدماتنا المتميزة\n            </h2>\n            <p className=\"text-lg text-slate-600 dark:text-slate-300 max-w-2xl mx-auto\">\n              نقدم مجموعة شاملة من الخدمات التقنية لتلبية جميع احتياجاتك\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {services.map((service) => (\n              <Card key={service.id} className=\"group hover:shadow-xl transition-all duration-300 cursor-pointer border-0 shadow-lg\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className={`w-16 h-16 ${service.color} rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-300`}>\n                    <i className={`${service.icon} text-white text-2xl`}></i>\n                  </div>\n                  <h3 className=\"text-xl font-bold text-slate-800 dark:text-white mb-2\">\n                    {service.title}\n                  </h3>\n                  <p className=\"text-slate-600 dark:text-slate-300\">\n                    {service.description}\n                  </p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          <div className=\"text-center mt-12\">\n            <Link to=\"/services\">\n              <Button \n                size=\"lg\"\n                variant=\"outline\"\n                className=\"border-blue-600 text-blue-600 hover:bg-blue-50\"\n                onClick={playClickSound}\n                data-testid=\"button-all-services\"\n              >\n                جميع الخدمات\n                <i className=\"fas fa-arrow-left mr-2\"></i>\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Call to Action */}\n      <section className=\"py-16 bg-gradient-to-r from-blue-600 to-purple-600\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"text-3xl md:text-4xl font-bold text-white mb-4\">\n            هل أنت مستعد لبدء مشروعك؟\n          </h2>\n          <p className=\"text-xl text-blue-100 mb-8 max-w-2xl mx-auto\">\n            تواصل معنا اليوم ودعنا نساعدك في تحقيق أهدافك التقنية\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Link to=\"/contact\">\n              <Button \n                size=\"lg\"\n                variant=\"secondary\"\n                className=\"bg-white text-blue-600 hover:bg-blue-50 px-8 py-3\"\n                onClick={playClickSound}\n                data-testid=\"button-contact\"\n              >\n                <i className=\"fas fa-phone ml-2\"></i>\n                تواصل معنا\n              </Button>\n            </Link>\n            <Link to=\"/projects\">\n              <Button \n                size=\"lg\"\n                variant=\"outline\"\n                className=\"border-white text-white hover:bg-white hover:text-blue-600 px-8 py-3\"\n                onClick={playClickSound}\n                data-testid=\"button-projects\"\n              >\n                <i className=\"fas fa-folder-open ml-2\"></i>\n                مشاريعنا\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":8754},"client/src/pages/projects-page.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useSound } from \"@/hooks/use-sound\";\n\ntype Project = {\n  id: string;\n  title: string;\n  description: string;\n  image: string;\n  technologies: string[];\n  liveUrl?: string;\n  githubUrl?: string;\n  order: number;\n  isActive: boolean;\n};\n\nexport default function ProjectsPage() {\n  const { playClickSound, playHoverSound } = useSound();\n  \n  const { data: projects = [], isLoading } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"]\n  });\n\n  const categories = [\n    { name: \"الكل\", value: \"all\", icon: \"fas fa-th\" },\n    { name: \"مواقع الويب\", value: \"web\", icon: \"fas fa-globe\" },\n    { name: \"تطبيقات الموبايل\", value: \"mobile\", icon: \"fas fa-mobile-alt\" },\n    { name: \"الذكاء الاصطناعي\", value: \"ai\", icon: \"fas fa-brain\" },\n    { name: \"التجارة الإلكترونية\", value: \"ecommerce\", icon: \"fas fa-shopping-cart\" }\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 dark:from-slate-900 dark:to-blue-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-slate-600 dark:text-slate-300\">جاري تحميل المشاريع...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 dark:from-slate-900 dark:to-blue-900 pt-20\">\n      {/* Header */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <div className=\"max-w-3xl mx-auto\">\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 dark:text-white mb-6\">\n              <span className=\"bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n                مشاريعنا المميزة\n              </span>\n            </h1>\n            <p className=\"text-xl text-slate-600 dark:text-slate-300 mb-8\">\n              استكشف مجموعة من أفضل مشاريعنا التي نفذناها بأحدث التقنيات والأدوات\n            </p>\n            <Link to=\"/contact\">\n              <Button \n                size=\"lg\"\n                className=\"bg-blue-600 hover:bg-blue-700 text-white px-8 py-3\"\n                onClick={playClickSound}\n                data-testid=\"button-start-project\"\n              >\n                <i className=\"fas fa-plus ml-2\"></i>\n                ابدأ مشروعك الآن\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Categories Filter */}\n      <section className=\"py-8 bg-white dark:bg-slate-800\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex flex-wrap justify-center gap-4\">\n            {categories.map((category, index) => (\n              <Button\n                key={category.value}\n                variant=\"outline\"\n                className=\"border-blue-600 text-blue-600 hover:bg-blue-50 px-6 py-2\"\n                onClick={playClickSound}\n                data-testid={`button-category-${category.value}`}\n              >\n                <i className={`${category.icon} ml-2`}></i>\n                {category.name}\n              </Button>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Projects Grid */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-4\">\n          {projects.filter(project => project.isActive).length === 0 ? (\n            <div className=\"text-center py-16\">\n              <div className=\"w-24 h-24 bg-slate-200 dark:bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <i className=\"fas fa-folder-open text-slate-400 text-3xl\"></i>\n              </div>\n              <h3 className=\"text-2xl font-bold text-slate-800 dark:text-white mb-4\">\n                لا توجد مشاريع متاحة حالياً\n              </h3>\n              <p className=\"text-slate-600 dark:text-slate-300 mb-6\">\n                نعمل على إضافة مشاريع جديدة قريباً\n              </p>\n              <Link to=\"/contact\">\n                <Button \n                  className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                  onClick={playClickSound}\n                  data-testid=\"button-contact-projects\"\n                >\n                  تواصل معنا لمناقشة مشروعك\n                </Button>\n              </Link>\n            </div>\n          ) : (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {projects\n                .filter(project => project.isActive)\n                .sort((a, b) => a.order - b.order)\n                .map((project, index) => (\n                  <Card \n                    key={project.id}\n                    className=\"group hover:shadow-2xl transition-all duration-300 cursor-pointer border-0 shadow-lg overflow-hidden\"\n                    onMouseEnter={playHoverSound}\n                    style={{ animationDelay: `${index * 100}ms` }}\n                  >\n                    {/* Project Image */}\n                    <div className=\"relative h-48 bg-gradient-to-br from-blue-100 to-purple-100 dark:from-slate-700 dark:to-slate-600\">\n                      {project.image ? (\n                        <img \n                          src={project.image} \n                          alt={project.title}\n                          className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n                        />\n                      ) : (\n                        <div className=\"w-full h-full flex items-center justify-center\">\n                          <i className=\"fas fa-laptop-code text-blue-600 text-4xl\"></i>\n                        </div>\n                      )}\n                      <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 to-transparent\"></div>\n                    </div>\n\n                    <CardHeader className=\"pb-4\">\n                      <CardTitle className=\"text-xl font-bold text-slate-800 dark:text-white group-hover:text-blue-600 transition-colors\">\n                        {project.title}\n                      </CardTitle>\n                    </CardHeader>\n\n                    <CardContent className=\"space-y-4\">\n                      <p className=\"text-slate-600 dark:text-slate-300 leading-relaxed line-clamp-3\">\n                        {project.description}\n                      </p>\n\n                      {/* Technologies */}\n                      <div className=\"flex flex-wrap gap-2\">\n                        {project.technologies?.slice(0, 3).map((tech, techIndex) => (\n                          <Badge key={techIndex} variant=\"secondary\" className=\"bg-blue-100 text-blue-800 text-xs\">\n                            {tech}\n                          </Badge>\n                        ))}\n                        {project.technologies?.length > 3 && (\n                          <Badge variant=\"secondary\" className=\"bg-slate-100 text-slate-600 text-xs\">\n                            +{project.technologies.length - 3}\n                          </Badge>\n                        )}\n                      </div>\n\n                      {/* Action Buttons */}\n                      <div className=\"flex gap-3 pt-4\">\n                        <Link to={`/projects/${project.id}`} className=\"flex-1\">\n                          <Button \n                            variant=\"outline\" \n                            className=\"w-full border-blue-600 text-blue-600 hover:bg-blue-50\"\n                            onClick={playClickSound}\n                            data-testid={`button-view-project-${project.id}`}\n                          >\n                            <i className=\"fas fa-eye ml-2\"></i>\n                            عرض التفاصيل\n                          </Button>\n                        </Link>\n                        {project.liveUrl && (\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            className=\"w-10 h-10 p-0 text-green-600 hover:bg-green-50\"\n                            onClick={(e) => {\n                              e.preventDefault();\n                              playClickSound();\n                              window.open(project.liveUrl, '_blank');\n                            }}\n                            data-testid={`button-live-${project.id}`}\n                          >\n                            <i className=\"fas fa-external-link-alt\"></i>\n                          </Button>\n                        )}\n                        {project.githubUrl && (\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            className=\"w-10 h-10 p-0 text-slate-600 hover:bg-slate-50\"\n                            onClick={(e) => {\n                              e.preventDefault();\n                              playClickSound();\n                              window.open(project.githubUrl, '_blank');\n                            }}\n                            data-testid={`button-github-${project.id}`}\n                          >\n                            <i className=\"fab fa-github\"></i>\n                          </Button>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 bg-gradient-to-r from-blue-600 to-purple-600\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"text-3xl md:text-4xl font-bold text-white mb-4\">\n            أعجبك ما رأيت؟\n          </h2>\n          <p className=\"text-xl text-blue-100 mb-8 max-w-2xl mx-auto\">\n            دعنا نصنع مشروعاً مميزاً لك بنفس مستوى الجودة والإبداع\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Link to=\"/contact\">\n              <Button \n                size=\"lg\"\n                variant=\"secondary\"\n                className=\"bg-white text-blue-600 hover:bg-blue-50 px-8 py-3\"\n                onClick={playClickSound}\n                data-testid=\"button-discuss-project\"\n              >\n                <i className=\"fas fa-comments ml-2\"></i>\n                ناقش مشروعك معنا\n              </Button>\n            </Link>\n            <Link to=\"/services\">\n              <Button \n                size=\"lg\"\n                variant=\"outline\"\n                className=\"border-white text-white hover:bg-white hover:text-blue-600 px-8 py-3\"\n                onClick={playClickSound}\n                data-testid=\"button-see-services\"\n              >\n                <i className=\"fas fa-cogs ml-2\"></i>\n                شاهد خدماتنا\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":11447},"client/src/pages/services-page.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useSound } from \"@/hooks/use-sound\";\n\ntype Service = {\n  id: string;\n  title: string;\n  description: string;\n  icon: string;\n  color: string;\n  order: number;\n  isActive: boolean;\n};\n\nexport default function ServicesPage() {\n  const { playClickSound, playHoverSound } = useSound();\n  \n  const { data: services = [], isLoading } = useQuery<Service[]>({\n    queryKey: [\"/api/services\"]\n  });\n\n  const features = [\n    {\n      title: \"تصميم مخصص\",\n      description: \"تصاميم فريدة تعكس هوية علامتك التجارية\",\n      icon: \"fas fa-palette\"\n    },\n    {\n      title: \"تطوير سريع\",\n      description: \"تطوير فعال مع أحدث التقنيات والأدوات\",\n      icon: \"fas fa-bolt\"\n    },\n    {\n      title: \"دعم مستمر\",\n      description: \"دعم فني متواصل وصيانة دورية\",\n      icon: \"fas fa-headset\"\n    },\n    {\n      title: \"ضمان الجودة\",\n      description: \"اختبار شامل وضمان جودة عالية\",\n      icon: \"fas fa-shield-alt\"\n    }\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 dark:from-slate-900 dark:to-blue-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-slate-600 dark:text-slate-300\">جاري تحميل الخدمات...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 dark:from-slate-900 dark:to-blue-900 pt-20\">\n      {/* Header */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <div className=\"max-w-3xl mx-auto\">\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 dark:text-white mb-6\">\n              <span className=\"bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n                خدماتنا المتميزة\n              </span>\n            </h1>\n            <p className=\"text-xl text-slate-600 dark:text-slate-300 mb-8\">\n              نقدم حلول تقنية شاملة ومتطورة لمساعدة أعمالك على النمو والازدهار في العصر الرقمي\n            </p>\n            <Link to=\"/contact\">\n              <Button \n                size=\"lg\"\n                className=\"bg-blue-600 hover:bg-blue-700 text-white px-8 py-3\"\n                onClick={playClickSound}\n                data-testid=\"button-get-quote\"\n              >\n                <i className=\"fas fa-calculator ml-2\"></i>\n                احصل على عرض سعر\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Services Grid */}\n      <section className=\"py-16 bg-white dark:bg-slate-800\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {services\n              .filter(service => service.isActive)\n              .sort((a, b) => a.order - b.order)\n              .map((service, index) => (\n                <Card \n                  key={service.id} \n                  className=\"group hover:shadow-2xl transition-all duration-300 cursor-pointer border-0 shadow-lg overflow-hidden\"\n                  onMouseEnter={playHoverSound}\n                  style={{ animationDelay: `${index * 100}ms` }}\n                >\n                  <CardHeader className=\"pb-4\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div \n                        className={`w-16 h-16 rounded-2xl flex items-center justify-center group-hover:scale-110 transition-transform duration-300`}\n                        style={{ background: `linear-gradient(135deg, var(--${service.color}-500), var(--${service.color}-600))` }}\n                      >\n                        <i className={`${service.icon} text-white text-2xl`}></i>\n                      </div>\n                      <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800\">\n                        متاح\n                      </Badge>\n                    </div>\n                    <CardTitle className=\"text-xl font-bold text-slate-800 dark:text-white\">\n                      {service.title}\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-slate-600 dark:text-slate-300 mb-6 leading-relaxed\">\n                      {service.description}\n                    </p>\n                    <Link to=\"/contact\">\n                      <Button \n                        variant=\"outline\" \n                        className=\"w-full border-blue-600 text-blue-600 hover:bg-blue-50\"\n                        onClick={playClickSound}\n                        data-testid={`button-service-${service.id}`}\n                      >\n                        اطلب هذه الخدمة\n                        <i className=\"fas fa-arrow-left mr-2\"></i>\n                      </Button>\n                    </Link>\n                  </CardContent>\n                </Card>\n              ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-slate-800 dark:text-white mb-4\">\n              لماذا تختار Alqudimi Technology؟\n            </h2>\n            <p className=\"text-lg text-slate-600 dark:text-slate-300 max-w-2xl mx-auto\">\n              نحن نؤمن بتقديم أفضل الخدمات التقنية مع الحرص على رضا عملائنا\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {features.map((feature, index) => (\n              <div \n                key={index}\n                className=\"text-center p-6 bg-white dark:bg-slate-800 rounded-2xl shadow-lg hover:shadow-xl transition-shadow duration-300\"\n                style={{ animationDelay: `${index * 100}ms` }}\n              >\n                <div className=\"w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                  <i className={`${feature.icon} text-white text-2xl`}></i>\n                </div>\n                <h3 className=\"text-xl font-bold text-slate-800 dark:text-white mb-2\">\n                  {feature.title}\n                </h3>\n                <p className=\"text-slate-600 dark:text-slate-300\">\n                  {feature.description}\n                </p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 bg-gradient-to-r from-blue-600 to-purple-600\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"text-3xl md:text-4xl font-bold text-white mb-4\">\n            مستعد لبدء مشروعك؟\n          </h2>\n          <p className=\"text-xl text-blue-100 mb-8 max-w-2xl mx-auto\">\n            تواصل معنا الآن ودعنا نحول أفكارك إلى حقيقة رقمية\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Link to=\"/contact\">\n              <Button \n                size=\"lg\"\n                variant=\"secondary\"\n                className=\"bg-white text-blue-600 hover:bg-blue-50 px-8 py-3\"\n                onClick={playClickSound}\n                data-testid=\"button-start-project\"\n              >\n                <i className=\"fas fa-rocket ml-2\"></i>\n                ابدأ مشروعك\n              </Button>\n            </Link>\n            <Link to=\"/projects\">\n              <Button \n                size=\"lg\"\n                variant=\"outline\"\n                className=\"border-white text-white hover:bg-white hover:text-blue-600 px-8 py-3\"\n                onClick={playClickSound}\n                data-testid=\"button-view-portfolio\"\n              >\n                <i className=\"fas fa-eye ml-2\"></i>\n                شاهد أعمالنا\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":8691},"render.yaml":{"content":"services:\n  - type: web\n    name: alqudimi-technology\n    env: node\n    buildCommand: npm install && npm run build\n    startCommand: npm start\n    envVars:\n      - key: NODE_ENV\n        value: production\n      - key: DATABASE_URL\n        fromDatabase:\n          name: alqudimi-db\n          property: connectionString\n    plan: free\n\ndatabases:\n  - name: alqudimi-db\n    databaseName: alqudimi_technology\n    user: alqudimi_user\n    plan: free","size_bytes":442},"server/render-start.js":{"content":"import express from 'express';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nconst app = express();\nconst PORT = process.env.PORT || 5000;\n\n// Serve static files from the dist directory\napp.use(express.static(path.join(__dirname, '../dist')));\n\n// Handle React Router routes\napp.get('*', (req, res) => {\n  res.sendFile(path.join(__dirname, '../dist/index.html'));\n});\n\napp.listen(PORT, '0.0.0.0', () => {\n  console.log(`Server running on port ${PORT}`);\n});","size_bytes":597},"client/src/components/newsletter-signup.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Mail, CheckCircle, AlertCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface NewsletterSignupProps {\n  variant?: \"default\" | \"compact\" | \"inline\";\n  title?: string;\n  description?: string;\n}\n\nexport default function NewsletterSignup({ \n  variant = \"default\", \n  title, \n  description \n}: NewsletterSignupProps) {\n  const [email, setEmail] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [isArabic, setIsArabic] = useState(true);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const subscribeMutation = useMutation({\n    mutationFn: async (data: { email: string; name?: string }) => {\n      const response = await fetch(\"/api/newsletter/subscribe\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Subscription failed\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: isArabic ? \"تم الاشتراك بنجاح!\" : \"Successfully subscribed!\",\n        description: isArabic \n          ? \"سنرسل لك أحدث المقالات والتحديثات\"\n          : \"We'll send you the latest articles and updates\",\n      });\n      setEmail(\"\");\n      setName(\"\");\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/newsletter'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: isArabic ? \"خطأ في الاشتراك\" : \"Subscription Error\",\n        description: error.message || (isArabic ? \"حدث خطأ ما\" : \"Something went wrong\"),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!email.trim()) {\n      toast({\n        title: isArabic ? \"مطلوب البريد الإلكتروني\" : \"Email Required\",\n        description: isArabic ? \"يرجى إدخال بريدك الإلكتروني\" : \"Please enter your email address\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    subscribeMutation.mutate({ \n      email: email.trim(), \n      name: name.trim() || undefined \n    });\n  };\n\n  if (variant === \"inline\") {\n    return (\n      <form onSubmit={handleSubmit} className=\"flex gap-2 max-w-md\">\n        <Input\n          type=\"email\"\n          placeholder={isArabic ? \"بريدك الإلكتروني\" : \"Your email\"}\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          className=\"flex-1\"\n          disabled={subscribeMutation.isPending}\n          data-testid=\"input-newsletter-email\"\n        />\n        <Button \n          type=\"submit\" \n          disabled={subscribeMutation.isPending}\n          data-testid=\"button-newsletter-subscribe\"\n        >\n          {subscribeMutation.isPending ? (\n            <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\" />\n          ) : (\n            <Mail className=\"h-4 w-4\" />\n          )}\n        </Button>\n      </form>\n    );\n  }\n\n  if (variant === \"compact\") {\n    return (\n      <Card className=\"w-full max-w-md\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center gap-2 mb-3\">\n            <Mail className=\"h-5 w-5 text-primary\" />\n            <h3 className=\"font-semibold text-sm\">\n              {title || (isArabic ? \"اشترك في النشرة البريدية\" : \"Subscribe to Newsletter\")}\n            </h3>\n          </div>\n          <form onSubmit={handleSubmit} className=\"space-y-3\">\n            <Input\n              type=\"email\"\n              placeholder={isArabic ? \"بريدك الإلكتروني\" : \"Your email\"}\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              disabled={subscribeMutation.isPending}\n              data-testid=\"input-newsletter-email\"\n            />\n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              size=\"sm\"\n              disabled={subscribeMutation.isPending}\n              data-testid=\"button-newsletter-subscribe\"\n            >\n              {subscribeMutation.isPending ? (\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\n              ) : (\n                <Mail className=\"h-4 w-4 mr-2\" />\n              )}\n              {isArabic ? \"اشتراك\" : \"Subscribe\"}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"w-full max-w-lg mx-auto\">\n      <CardHeader className=\"text-center\">\n        <div className=\"mx-auto w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center mb-4\">\n          <Mail className=\"h-6 w-6 text-primary\" />\n        </div>\n        <CardTitle className=\"text-xl\">\n          {title || (isArabic ? \"اشترك في النشرة البريدية\" : \"Subscribe to Our Newsletter\")}\n        </CardTitle>\n        <p className=\"text-muted-foreground\">\n          {description || (isArabic \n            ? \"احصل على أحدث المقالات والتحديثات التقنية مباشرة في بريدك الإلكتروني\"\n            : \"Get the latest articles and tech updates delivered straight to your inbox\"\n          )}\n        </p>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-3\">\n            <Input\n              type=\"text\"\n              placeholder={isArabic ? \"اسمك (اختياري)\" : \"Your name (optional)\"}\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              disabled={subscribeMutation.isPending}\n              data-testid=\"input-newsletter-name\"\n            />\n            <Input\n              type=\"email\"\n              placeholder={isArabic ? \"بريدك الإلكتروني\" : \"Your email address\"}\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              disabled={subscribeMutation.isPending}\n              required\n              data-testid=\"input-newsletter-email\"\n            />\n          </div>\n          \n          <Button \n            type=\"submit\" \n            className=\"w-full\" \n            disabled={subscribeMutation.isPending}\n            data-testid=\"button-newsletter-subscribe\"\n          >\n            {subscribeMutation.isPending ? (\n              <>\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\n                {isArabic ? \"جارٍ الاشتراك...\" : \"Subscribing...\"}\n              </>\n            ) : (\n              <>\n                <Mail className=\"h-4 w-4 mr-2\" />\n                {isArabic ? \"اشترك الآن\" : \"Subscribe Now\"}\n              </>\n            )}\n          </Button>\n        </form>\n\n        <div className=\"text-center\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setIsArabic(!isArabic)}\n            data-testid=\"button-toggle-language\"\n          >\n            {isArabic ? \"English\" : \"العربية\"}\n          </Button>\n        </div>\n\n        <div className=\"text-xs text-muted-foreground text-center\">\n          {isArabic \n            ? \"يمكنك إلغاء الاشتراك في أي وقت. نحن نحترم خصوصيتك.\"\n            : \"You can unsubscribe at any time. We respect your privacy.\"\n          }\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7930},"client/src/components/search/global-search.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Search, \n  FileText, \n  Folder, \n  User, \n  Star, \n  Loader2,\n  ArrowRight,\n  Hash,\n  Calendar\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\n\ninterface SearchResult {\n  type: \"blog\" | \"project\" | \"service\" | \"testimonial\";\n  id: string;\n  title: string;\n  titleEn?: string;\n  excerpt?: string;\n  excerptEn?: string;\n  url: string;\n  category?: string;\n  categoryEn?: string;\n  tags?: string[];\n  tagsEn?: string[];\n  publishedAt?: string;\n  rating?: number;\n  clientName?: string;\n  clientNameEn?: string;\n}\n\ninterface GlobalSearchProps {\n  variant?: \"full\" | \"compact\" | \"header\";\n  placeholder?: string;\n  onResultClick?: () => void;\n}\n\nexport default function GlobalSearch({ \n  variant = \"full\", \n  placeholder,\n  onResultClick \n}: GlobalSearchProps) {\n  const [query, setQuery] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const [isArabic, setIsArabic] = useState(true);\n  const searchRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  // Close search when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (searchRef.current && !searchRef.current.contains(event.target as Node)) {\n        setIsOpen(false);\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, []);\n\n  // Search API call\n  const { data: results = [], isLoading } = useQuery<SearchResult[]>({\n    queryKey: ['/api/search', query],\n    enabled: query.length >= 2,\n  });\n\n  const handleInputChange = (value: string) => {\n    setQuery(value);\n    setIsOpen(value.length >= 2);\n  };\n\n  const handleResultClick = () => {\n    setIsOpen(false);\n    setQuery(\"\");\n    onResultClick?.();\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(isArabic ? 'ar-SA' : 'en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'blog':\n        return <FileText className=\"h-4 w-4\" />;\n      case 'project':\n        return <Folder className=\"h-4 w-4\" />;\n      case 'service':\n        return <Hash className=\"h-4 w-4\" />;\n      case 'testimonial':\n        return <Star className=\"h-4 w-4\" />;\n      default:\n        return <FileText className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getTypeLabel = (type: string) => {\n    const labels = {\n      blog: isArabic ? \"مقال\" : \"Article\",\n      project: isArabic ? \"مشروع\" : \"Project\", \n      service: isArabic ? \"خدمة\" : \"Service\",\n      testimonial: isArabic ? \"تقييم\" : \"Review\"\n    };\n    return labels[type as keyof typeof labels] || type;\n  };\n\n  const groupedResults = results.reduce((acc, result) => {\n    if (!acc[result.type]) {\n      acc[result.type] = [];\n    }\n    acc[result.type].push(result);\n    return acc;\n  }, {} as Record<string, SearchResult[]>);\n\n  if (variant === \"compact\") {\n    return (\n      <div className=\"relative\" ref={searchRef}>\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n          <Input\n            ref={inputRef}\n            placeholder={placeholder || (isArabic ? \"ابحث...\" : \"Search...\")}\n            value={query}\n            onChange={(e) => handleInputChange(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-global-search\"\n          />\n        </div>\n\n        {isOpen && (\n          <Card className=\"absolute top-full left-0 right-0 mt-2 max-h-96 overflow-y-auto z-50 shadow-lg\">\n            <CardContent className=\"p-0\">\n              {isLoading ? (\n                <div className=\"flex items-center justify-center p-6\">\n                  <Loader2 className=\"h-6 w-6 animate-spin\" />\n                  <span className=\"ml-2\">{isArabic ? \"جارٍ البحث...\" : \"Searching...\"}</span>\n                </div>\n              ) : results.length === 0 ? (\n                <div className=\"text-center p-6 text-muted-foreground\">\n                  {query.length < 2 \n                    ? (isArabic ? \"اكتب حرفين على الأقل للبحث\" : \"Type at least 2 characters to search\")\n                    : (isArabic ? \"لا توجد نتائج\" : \"No results found\")\n                  }\n                </div>\n              ) : (\n                <div className=\"max-h-96 overflow-y-auto\">\n                  {Object.entries(groupedResults).map(([type, typeResults]) => (\n                    <div key={type}>\n                      <div className=\"px-4 py-2 bg-muted text-sm font-medium flex items-center gap-2\">\n                        {getTypeIcon(type)}\n                        {getTypeLabel(type)} ({typeResults.length})\n                      </div>\n                      {typeResults.slice(0, 3).map((result) => (\n                        <Link key={result.id} href={result.url} onClick={handleResultClick}>\n                          <div className=\"px-4 py-3 hover:bg-accent cursor-pointer border-b border-border last:border-b-0\">\n                            <div className=\"flex items-start justify-between\">\n                              <div className=\"flex-1 min-w-0\">\n                                <h4 className=\"font-medium truncate\">\n                                  {isArabic ? result.title : result.titleEn || result.title}\n                                </h4>\n                                {result.excerpt && (\n                                  <p className=\"text-sm text-muted-foreground line-clamp-2 mt-1\">\n                                    {isArabic ? result.excerpt : result.excerptEn || result.excerpt}\n                                  </p>\n                                )}\n                                <div className=\"flex items-center gap-2 mt-2\">\n                                  {result.category && (\n                                    <Badge variant=\"secondary\" className=\"text-xs\">\n                                      {isArabic ? result.category : result.categoryEn || result.category}\n                                    </Badge>\n                                  )}\n                                  {result.publishedAt && (\n                                    <span className=\"text-xs text-muted-foreground flex items-center gap-1\">\n                                      <Calendar className=\"h-3 w-3\" />\n                                      {formatDate(result.publishedAt)}\n                                    </span>\n                                  )}\n                                  {result.rating && (\n                                    <span className=\"text-xs text-muted-foreground flex items-center gap-1\">\n                                      <Star className=\"h-3 w-3 fill-yellow-400 text-yellow-400\" />\n                                      {result.rating}\n                                    </span>\n                                  )}\n                                </div>\n                              </div>\n                              <ArrowRight className=\"h-4 w-4 text-muted-foreground ml-2 flex-shrink-0\" />\n                            </div>\n                          </div>\n                        </Link>\n                      ))}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    );\n  }\n\n  if (variant === \"header\") {\n    return (\n      <div className=\"relative w-full max-w-sm\" ref={searchRef}>\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n          <Input\n            ref={inputRef}\n            placeholder={placeholder || (isArabic ? \"ابحث في الموقع...\" : \"Search site...\")}\n            value={query}\n            onChange={(e) => handleInputChange(e.target.value)}\n            className=\"pl-10 pr-4\"\n            data-testid=\"input-header-search\"\n          />\n        </div>\n\n        {isOpen && (\n          <Card className=\"absolute top-full left-0 right-0 mt-2 max-h-80 overflow-hidden z-50 shadow-xl border-border\">\n            {isLoading ? (\n              <div className=\"flex items-center justify-center p-4\">\n                <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n                <span className=\"text-sm\">{isArabic ? \"جارٍ البحث...\" : \"Searching...\"}</span>\n              </div>\n            ) : results.length === 0 ? (\n              <div className=\"text-center p-4 text-sm text-muted-foreground\">\n                {query.length < 2 \n                  ? (isArabic ? \"اكتب للبحث...\" : \"Type to search...\")\n                  : (isArabic ? \"لا توجد نتائج\" : \"No results found\")\n                }\n              </div>\n            ) : (\n              <div className=\"max-h-80 overflow-y-auto\">\n                {results.slice(0, 6).map((result, index) => (\n                  <div key={result.id}>\n                    {index > 0 && <Separator />}\n                    <Link href={result.url} onClick={handleResultClick}>\n                      <div className=\"p-3 hover:bg-accent cursor-pointer transition-colors\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"text-primary\">\n                            {getTypeIcon(result.type)}\n                          </div>\n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-center gap-2 mb-1\">\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                {getTypeLabel(result.type)}\n                              </Badge>\n                              {result.category && (\n                                <Badge variant=\"secondary\" className=\"text-xs\">\n                                  {isArabic ? result.category : result.categoryEn || result.category}\n                                </Badge>\n                              )}\n                            </div>\n                            <h4 className=\"font-medium text-sm truncate\">\n                              {isArabic ? result.title : result.titleEn || result.title}\n                            </h4>\n                            {result.excerpt && (\n                              <p className=\"text-xs text-muted-foreground line-clamp-1 mt-1\">\n                                {isArabic ? result.excerpt : result.excerptEn || result.excerpt}\n                              </p>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </Link>\n                  </div>\n                ))}\n                {results.length > 6 && (\n                  <div className=\"p-3 text-center bg-muted\">\n                    <span className=\"text-sm text-muted-foreground\">\n                      +{results.length - 6} {isArabic ? \"نتائج أخرى\" : \"more results\"}\n                    </span>\n                  </div>\n                )}\n              </div>\n            )}\n          </Card>\n        )}\n      </div>\n    );\n  }\n\n  // Full variant\n  return (\n    <div className=\"w-full max-w-2xl mx-auto\">\n      <div className=\"relative\">\n        <div className=\"relative\">\n          <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-muted-foreground h-5 w-5\" />\n          <Input\n            ref={inputRef}\n            placeholder={placeholder || (isArabic ? \"ابحث في المقالات، المشاريع، الخدمات...\" : \"Search articles, projects, services...\")}\n            value={query}\n            onChange={(e) => handleInputChange(e.target.value)}\n            className=\"pl-12 pr-4 h-12 text-lg\"\n            data-testid=\"input-full-search\"\n          />\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"absolute right-2 top-1/2 transform -translate-y-1/2\"\n            onClick={() => setIsArabic(!isArabic)}\n            data-testid=\"button-toggle-language\"\n          >\n            {isArabic ? \"En\" : \"عر\"}\n          </Button>\n        </div>\n\n        {isOpen && (\n          <Card className=\"absolute top-full left-0 right-0 mt-4 max-h-96 overflow-hidden z-50 shadow-xl\">\n            <CardContent className=\"p-0\">\n              {isLoading ? (\n                <div className=\"flex items-center justify-center p-8\">\n                  <Loader2 className=\"h-8 w-8 animate-spin mr-3\" />\n                  <span className=\"text-lg\">{isArabic ? \"جارٍ البحث...\" : \"Searching...\"}</span>\n                </div>\n              ) : results.length === 0 ? (\n                <div className=\"text-center p-8\">\n                  <Search className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">\n                    {query.length < 2 \n                      ? (isArabic ? \"ابدأ البحث\" : \"Start searching\")\n                      : (isArabic ? \"لا توجد نتائج\" : \"No results found\")\n                    }\n                  </h3>\n                  <p className=\"text-muted-foreground\">\n                    {query.length < 2 \n                      ? (isArabic ? \"اكتب حرفين على الأقل للبحث في المحتوى\" : \"Type at least 2 characters to search content\")\n                      : (isArabic ? \"جرب كلمات مفتاحية مختلفة\" : \"Try different keywords\")\n                    }\n                  </p>\n                </div>\n              ) : (\n                <div className=\"max-h-96 overflow-y-auto\">\n                  {Object.entries(groupedResults).map(([type, typeResults], index) => (\n                    <div key={type}>\n                      {index > 0 && <Separator />}\n                      <div className=\"px-6 py-3 bg-muted font-medium flex items-center gap-2\">\n                        {getTypeIcon(type)}\n                        <span>{getTypeLabel(type)}</span>\n                        <Badge variant=\"secondary\" className=\"ml-auto\">\n                          {typeResults.length}\n                        </Badge>\n                      </div>\n                      {typeResults.map((result) => (\n                        <Link key={result.id} href={result.url} onClick={handleResultClick}>\n                          <div className=\"px-6 py-4 hover:bg-accent cursor-pointer border-b border-border last:border-b-0\">\n                            <div className=\"flex items-start justify-between\">\n                              <div className=\"flex-1 min-w-0\">\n                                <h4 className=\"font-semibold text-lg mb-2 truncate\">\n                                  {isArabic ? result.title : result.titleEn || result.title}\n                                </h4>\n                                {result.excerpt && (\n                                  <p className=\"text-muted-foreground line-clamp-2 mb-3\">\n                                    {isArabic ? result.excerpt : result.excerptEn || result.excerpt}\n                                  </p>\n                                )}\n                                <div className=\"flex items-center gap-3 flex-wrap\">\n                                  {result.category && (\n                                    <Badge variant=\"secondary\">\n                                      {isArabic ? result.category : result.categoryEn || result.category}\n                                    </Badge>\n                                  )}\n                                  {result.tags && result.tags.slice(0, 2).map((tag, tagIndex) => (\n                                    <Badge key={tagIndex} variant=\"outline\" className=\"text-xs\">\n                                      {isArabic ? tag : result.tagsEn?.[tagIndex] || tag}\n                                    </Badge>\n                                  ))}\n                                  {result.publishedAt && (\n                                    <span className=\"text-sm text-muted-foreground flex items-center gap-1\">\n                                      <Calendar className=\"h-4 w-4\" />\n                                      {formatDate(result.publishedAt)}\n                                    </span>\n                                  )}\n                                  {result.rating && (\n                                    <span className=\"text-sm text-muted-foreground flex items-center gap-1\">\n                                      <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                                      {result.rating}/5\n                                    </span>\n                                  )}\n                                  {result.clientName && (\n                                    <span className=\"text-sm text-muted-foreground flex items-center gap-1\">\n                                      <User className=\"h-4 w-4\" />\n                                      {isArabic ? result.clientName : result.clientNameEn || result.clientName}\n                                    </span>\n                                  )}\n                                </div>\n                              </div>\n                              <ArrowRight className=\"h-5 w-5 text-muted-foreground ml-4 flex-shrink-0\" />\n                            </div>\n                          </div>\n                        </Link>\n                      ))}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":17996},"client/src/pages/blog-detail.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Calendar, Clock, Eye, ArrowLeft, Share2, Tag } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useState } from \"react\";\n\ninterface BlogPost {\n  id: string;\n  title: string;\n  titleEn: string;\n  slug: string;\n  content: string;\n  contentEn: string;\n  excerpt: string;\n  excerptEn: string;\n  featuredImage: string;\n  tags: string[];\n  tagsEn: string[];\n  category: string;\n  categoryEn: string;\n  isPublished: boolean;\n  isFeatured: boolean;\n  publishedAt: string;\n  viewCount: number;\n  readingTime: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport default function BlogDetail() {\n  const { slug } = useParams<{ slug: string }>();\n  const [isArabic, setIsArabic] = useState(true);\n\n  const { data: post, isLoading, error } = useQuery<BlogPost>({\n    queryKey: [`/api/blog/${slug}`],\n    enabled: !!slug,\n  });\n\n  const { data: relatedPosts = [] } = useQuery<BlogPost[]>({\n    queryKey: ['/api/blog', { category: post?.category }],\n    enabled: !!post,\n  });\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(isArabic ? 'ar-SA' : 'en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  const sharePost = async () => {\n    if (navigator.share) {\n      try {\n        await navigator.share({\n          title: isArabic ? post?.title : post?.titleEn || post?.title,\n          text: isArabic ? post?.excerpt : post?.excerptEn || post?.excerpt,\n          url: window.location.href,\n        });\n      } catch (err) {\n        console.log('Error sharing:', err);\n      }\n    } else {\n      // Fallback to copying URL\n      navigator.clipboard.writeText(window.location.href);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded mb-4 w-3/4\"></div>\n            <div className=\"h-4 bg-gray-200 rounded mb-6 w-1/2\"></div>\n            <div className=\"h-64 bg-gray-200 rounded mb-6\"></div>\n            <div className=\"space-y-3\">\n              <div className=\"h-4 bg-gray-200 rounded\"></div>\n              <div className=\"h-4 bg-gray-200 rounded\"></div>\n              <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !post) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center py-12\">\n          <h1 className=\"text-2xl font-bold mb-4\">\n            {isArabic ? \"المقال غير موجود\" : \"Article not found\"}\n          </h1>\n          <p className=\"text-muted-foreground mb-6\">\n            {isArabic \n              ? \"عذراً، لا يمكن العثور على المقال المطلوب\"\n              : \"Sorry, the requested article could not be found\"\n            }\n          </p>\n          <Button asChild>\n            <Link href=\"/blog\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              {isArabic ? \"العودة للمدونة\" : \"Back to Blog\"}\n            </Link>\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const filteredRelatedPosts = relatedPosts\n    .filter(p => p.slug !== post.slug)\n    .slice(0, 3);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background to-secondary/20\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          {/* Navigation */}\n          <div className=\"mb-6\">\n            <Button variant=\"ghost\" asChild className=\"mb-4\">\n              <Link href=\"/blog\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                {isArabic ? \"العودة للمدونة\" : \"Back to Blog\"}\n              </Link>\n            </Button>\n          </div>\n\n          {/* Article Header */}\n          <article className=\"mb-12\">\n            <header className=\"mb-8\">\n              <div className=\"flex items-center gap-2 mb-4\">\n                <Badge variant=\"secondary\">\n                  {isArabic ? post.category : post.categoryEn || post.category}\n                </Badge>\n                {post.isFeatured && (\n                  <Badge variant=\"outline\">\n                    {isArabic ? \"مميز\" : \"Featured\"}\n                  </Badge>\n                )}\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setIsArabic(!isArabic)}\n                  data-testid=\"button-toggle-language\"\n                >\n                  {isArabic ? \"English\" : \"العربية\"}\n                </Button>\n              </div>\n\n              <h1 className=\"text-3xl md:text-4xl font-bold mb-4 leading-tight\">\n                {isArabic ? post.title : post.titleEn || post.title}\n              </h1>\n\n              <div className=\"flex items-center justify-between mb-6\">\n                <div className=\"flex items-center gap-6 text-sm text-muted-foreground\">\n                  <span className=\"flex items-center gap-2\">\n                    <Calendar className=\"h-4 w-4\" />\n                    {formatDate(post.publishedAt || post.createdAt)}\n                  </span>\n                  <span className=\"flex items-center gap-2\">\n                    <Clock className=\"h-4 w-4\" />\n                    {post.readingTime} {isArabic ? \"دقائق\" : \"min read\"}\n                  </span>\n                  <span className=\"flex items-center gap-2\">\n                    <Eye className=\"h-4 w-4\" />\n                    {post.viewCount} {isArabic ? \"مشاهدة\" : \"views\"}\n                  </span>\n                </div>\n                <Button variant=\"outline\" size=\"sm\" onClick={sharePost} data-testid=\"button-share\">\n                  <Share2 className=\"h-4 w-4 mr-2\" />\n                  {isArabic ? \"مشاركة\" : \"Share\"}\n                </Button>\n              </div>\n\n              {post.featuredImage && (\n                <div className=\"mb-8 rounded-lg overflow-hidden\">\n                  <img \n                    src={post.featuredImage} \n                    alt={isArabic ? post.title : post.titleEn || post.title}\n                    className=\"w-full h-64 md:h-96 object-cover\"\n                  />\n                </div>\n              )}\n            </header>\n\n            {/* Article Content */}\n            <div className=\"prose prose-lg max-w-none mb-8\">\n              <div \n                className=\"leading-relaxed\"\n                dangerouslySetInnerHTML={{ \n                  __html: isArabic ? post.content : post.contentEn || post.content \n                }}\n              />\n            </div>\n\n            {/* Tags */}\n            {post.tags && post.tags.length > 0 && (\n              <div className=\"flex items-center gap-2 mb-8\">\n                <Tag className=\"h-4 w-4 text-muted-foreground\" />\n                <div className=\"flex flex-wrap gap-2\">\n                  {(isArabic ? post.tags : post.tagsEn || post.tags).map((tag, index) => (\n                    <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                      {tag}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            <Separator className=\"my-8\" />\n\n            {/* Share Section */}\n            <div className=\"text-center py-6\">\n              <h3 className=\"text-lg font-semibold mb-4\">\n                {isArabic ? \"أعجبك المقال؟ شاركه!\" : \"Enjoyed this article? Share it!\"}\n              </h3>\n              <Button onClick={sharePost} data-testid=\"button-share-bottom\">\n                <Share2 className=\"h-4 w-4 mr-2\" />\n                {isArabic ? \"مشاركة المقال\" : \"Share Article\"}\n              </Button>\n            </div>\n          </article>\n\n          {/* Related Posts */}\n          {filteredRelatedPosts.length > 0 && (\n            <section>\n              <h2 className=\"text-2xl font-bold mb-6\">\n                {isArabic ? \"مقالات ذات صلة\" : \"Related Articles\"}\n              </h2>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                {filteredRelatedPosts.map((relatedPost) => (\n                  <Card key={relatedPost.id} className=\"group hover:shadow-lg transition-shadow\">\n                    {relatedPost.featuredImage && (\n                      <div className=\"h-32 overflow-hidden\">\n                        <img \n                          src={relatedPost.featuredImage} \n                          alt={isArabic ? relatedPost.title : relatedPost.titleEn || relatedPost.title}\n                          className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n                        />\n                      </div>\n                    )}\n                    <CardContent className=\"p-4\">\n                      <Badge variant=\"secondary\" className=\"mb-2 text-xs\">\n                        {isArabic ? relatedPost.category : relatedPost.categoryEn || relatedPost.category}\n                      </Badge>\n                      <h3 className=\"font-semibold mb-2 line-clamp-2 group-hover:text-primary transition-colors\">\n                        <Link href={`/blog/${relatedPost.slug}`}>\n                          {isArabic ? relatedPost.title : relatedPost.titleEn || relatedPost.title}\n                        </Link>\n                      </h3>\n                      <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                        {isArabic ? relatedPost.excerpt : relatedPost.excerptEn || relatedPost.excerpt}\n                      </p>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </section>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10084},"client/src/pages/blog-page.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Calendar, Clock, Eye, Search, Tag } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\ninterface BlogPost {\n  id: string;\n  title: string;\n  titleEn: string;\n  slug: string;\n  content: string;\n  contentEn: string;\n  excerpt: string;\n  excerptEn: string;\n  featuredImage: string;\n  tags: string[];\n  tagsEn: string[];\n  category: string;\n  categoryEn: string;\n  isPublished: boolean;\n  isFeatured: boolean;\n  publishedAt: string;\n  viewCount: number;\n  readingTime: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport default function BlogPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\");\n  const [isArabic, setIsArabic] = useState(true);\n\n  const { data: blogPosts = [], isLoading } = useQuery<BlogPost[]>({\n    queryKey: ['/api/blog'],\n  });\n\n  const { data: featuredPosts = [] } = useQuery<BlogPost[]>({\n    queryKey: ['/api/blog', { featured: true }],\n  });\n\n  // Filter posts based on search and category\n  const filteredPosts = blogPosts.filter(post => {\n    const title = isArabic ? post.title : post.titleEn || post.title;\n    const excerpt = isArabic ? post.excerpt : post.excerptEn || post.excerpt;\n    const category = isArabic ? post.category : post.categoryEn || post.category;\n    \n    const matchesSearch = title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         excerpt?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = selectedCategory === \"all\" || category === selectedCategory;\n    \n    return matchesSearch && matchesCategory;\n  });\n\n  // Get unique categories\n  const categories = Array.from(new Set(blogPosts.map(post => \n    isArabic ? post.category : post.categoryEn || post.category\n  )));\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(isArabic ? 'ar-SA' : 'en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[1, 2, 3, 4, 5, 6].map((i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <div className=\"h-48 bg-gray-200 rounded-t-lg\"></div>\n              <CardContent className=\"p-6\">\n                <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                <div className=\"h-4 bg-gray-200 rounded mb-4 w-3/4\"></div>\n                <div className=\"h-3 bg-gray-200 rounded mb-2\"></div>\n                <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background to-secondary/20\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl md:text-5xl font-bold bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent mb-4\">\n            {isArabic ? \"المدونة التقنية\" : \"Tech Blog\"}\n          </h1>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n            {isArabic \n              ? \"اكتشف أحدث المقالات والتقنيات في عالم التطوير والبرمجة\"\n              : \"Discover the latest articles and technologies in development and programming\"\n            }\n          </p>\n        </div>\n\n        {/* Featured Posts */}\n        {featuredPosts.length > 0 && (\n          <section className=\"mb-12\">\n            <h2 className=\"text-2xl font-bold mb-6 flex items-center gap-2\">\n              <Tag className=\"h-6 w-6 text-primary\" />\n              {isArabic ? \"المقالات المميزة\" : \"Featured Posts\"}\n            </h2>\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {featuredPosts.slice(0, 2).map((post) => (\n                <Card key={post.id} className=\"group hover:shadow-lg transition-shadow overflow-hidden\">\n                  {post.featuredImage && (\n                    <div className=\"h-48 overflow-hidden\">\n                      <img \n                        src={post.featuredImage} \n                        alt={isArabic ? post.title : post.titleEn || post.title}\n                        className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n                      />\n                    </div>\n                  )}\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center gap-2 mb-3\">\n                      <Badge variant=\"secondary\">\n                        {isArabic ? post.category : post.categoryEn || post.category}\n                      </Badge>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {isArabic ? \"مميز\" : \"Featured\"}\n                      </Badge>\n                    </div>\n                    <h3 className=\"text-xl font-semibold mb-2 group-hover:text-primary transition-colors\">\n                      <Link href={`/blog/${post.slug}`}>\n                        {isArabic ? post.title : post.titleEn || post.title}\n                      </Link>\n                    </h3>\n                    <p className=\"text-muted-foreground mb-4 line-clamp-2\">\n                      {isArabic ? post.excerpt : post.excerptEn || post.excerpt}\n                    </p>\n                    <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n                      <div className=\"flex items-center gap-4\">\n                        <span className=\"flex items-center gap-1\">\n                          <Calendar className=\"h-4 w-4\" />\n                          {formatDate(post.publishedAt || post.createdAt)}\n                        </span>\n                        <span className=\"flex items-center gap-1\">\n                          <Clock className=\"h-4 w-4\" />\n                          {post.readingTime} {isArabic ? \"دقائق\" : \"min\"}\n                        </span>\n                      </div>\n                      <span className=\"flex items-center gap-1\">\n                        <Eye className=\"h-4 w-4\" />\n                        {post.viewCount}\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </section>\n        )}\n\n        {/* Search and Filter */}\n        <div className=\"mb-8 space-y-4 md:space-y-0 md:flex md:items-center md:gap-4\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n            <Input\n              placeholder={isArabic ? \"ابحث في المقالات...\" : \"Search articles...\"}\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search-blog\"\n            />\n          </div>\n          <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n            <SelectTrigger className=\"w-full md:w-48\" data-testid=\"select-blog-category\">\n              <SelectValue placeholder={isArabic ? \"اختر التصنيف\" : \"Select category\"} />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">{isArabic ? \"جميع التصنيفات\" : \"All categories\"}</SelectItem>\n              {categories.map((category) => (\n                <SelectItem key={category} value={category}>\n                  {category}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          <Button\n            variant=\"outline\"\n            onClick={() => setIsArabic(!isArabic)}\n            data-testid=\"button-toggle-language\"\n          >\n            {isArabic ? \"English\" : \"العربية\"}\n          </Button>\n        </div>\n\n        {/* Blog Posts Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredPosts.map((post) => (\n            <Card key={post.id} className=\"group hover:shadow-lg transition-shadow overflow-hidden\">\n              {post.featuredImage && (\n                <div className=\"h-48 overflow-hidden\">\n                  <img \n                    src={post.featuredImage} \n                    alt={isArabic ? post.title : post.titleEn || post.title}\n                    className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n                  />\n                </div>\n              )}\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-2 mb-3\">\n                  <Badge variant=\"secondary\">\n                    {isArabic ? post.category : post.categoryEn || post.category}\n                  </Badge>\n                  {post.tags && post.tags.length > 0 && (\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {isArabic ? post.tags[0] : post.tagsEn?.[0] || post.tags[0]}\n                    </Badge>\n                  )}\n                </div>\n                <h3 className=\"text-lg font-semibold mb-2 group-hover:text-primary transition-colors line-clamp-2\">\n                  <Link href={`/blog/${post.slug}`}>\n                    {isArabic ? post.title : post.titleEn || post.title}\n                  </Link>\n                </h3>\n                <p className=\"text-muted-foreground mb-4 line-clamp-2\">\n                  {isArabic ? post.excerpt : post.excerptEn || post.excerpt}\n                </p>\n                <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n                  <div className=\"flex items-center gap-3\">\n                    <span className=\"flex items-center gap-1\">\n                      <Calendar className=\"h-3 w-3\" />\n                      {formatDate(post.publishedAt || post.createdAt)}\n                    </span>\n                    <span className=\"flex items-center gap-1\">\n                      <Clock className=\"h-3 w-3\" />\n                      {post.readingTime} {isArabic ? \"د\" : \"m\"}\n                    </span>\n                  </div>\n                  <span className=\"flex items-center gap-1\">\n                    <Eye className=\"h-3 w-3\" />\n                    {post.viewCount}\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* No results */}\n        {filteredPosts.length === 0 && !isLoading && (\n          <div className=\"text-center py-12\">\n            <Search className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">\n              {isArabic ? \"لا توجد مقالات\" : \"No articles found\"}\n            </h3>\n            <p className=\"text-muted-foreground\">\n              {isArabic \n                ? \"جرب تغيير معايير البحث أو التصفية\"\n                : \"Try changing your search or filter criteria\"\n              }\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":11675},"client/src/pages/search-page.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Search, \n  FileText, \n  Folder, \n  User, \n  Star, \n  Hash,\n  Calendar,\n  ArrowRight,\n  Filter,\n  SortAsc\n} from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport GlobalSearch from \"@/components/search/global-search\";\n\ninterface SearchResult {\n  type: \"blog\" | \"project\" | \"service\" | \"testimonial\";\n  id: string;\n  title: string;\n  titleEn?: string;\n  excerpt?: string;\n  excerptEn?: string;\n  url: string;\n  category?: string;\n  categoryEn?: string;\n  tags?: string[];\n  tagsEn?: string[];\n  publishedAt?: string;\n  rating?: number;\n  clientName?: string;\n  clientNameEn?: string;\n}\n\nexport default function SearchPage() {\n  const [location] = useLocation();\n  const [isArabic, setIsArabic] = useState(true);\n  const [activeTab, setActiveTab] = useState(\"all\");\n  const [sortBy, setSortBy] = useState(\"relevance\");\n  const [categoryFilter, setCategoryFilter] = useState(\"all\");\n  \n  // Get search query from URL params\n  const searchParams = new URLSearchParams(window.location.search);\n  const initialQuery = searchParams.get(\"q\") || \"\";\n  const [query, setQuery] = useState(initialQuery);\n\n  // Update URL when query changes\n  useEffect(() => {\n    const params = new URLSearchParams();\n    if (query) params.set(\"q\", query);\n    if (activeTab !== \"all\") params.set(\"type\", activeTab);\n    \n    const newUrl = `/search${params.toString() ? `?${params.toString()}` : \"\"}`;\n    window.history.replaceState({}, \"\", newUrl);\n  }, [query, activeTab]);\n\n  const { data: results = [], isLoading } = useQuery<SearchResult[]>({\n    queryKey: ['/api/search', query, activeTab, sortBy, categoryFilter],\n    enabled: query.length >= 2,\n  });\n\n  // Get unique categories from results\n  const categories = Array.from(new Set(\n    results.map(result => isArabic ? result.category : result.categoryEn || result.category)\n      .filter(Boolean)\n  ));\n\n  // Filter and sort results\n  const filteredResults = results\n    .filter(result => {\n      if (activeTab !== \"all\" && result.type !== activeTab) return false;\n      if (categoryFilter !== \"all\") {\n        const category = isArabic ? result.category : result.categoryEn || result.category;\n        return category === categoryFilter;\n      }\n      return true;\n    })\n    .sort((a, b) => {\n      switch (sortBy) {\n        case \"date\":\n          return new Date(b.publishedAt || \"\").getTime() - new Date(a.publishedAt || \"\").getTime();\n        case \"rating\":\n          return (b.rating || 0) - (a.rating || 0);\n        case \"title\":\n          const titleA = isArabic ? a.title : a.titleEn || a.title;\n          const titleB = isArabic ? b.title : b.titleEn || b.title;\n          return titleA.localeCompare(titleB);\n        default:\n          return 0; // Keep original order (relevance)\n      }\n    });\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'blog':\n        return <FileText className=\"h-4 w-4\" />;\n      case 'project':\n        return <Folder className=\"h-4 w-4\" />;\n      case 'service':\n        return <Hash className=\"h-4 w-4\" />;\n      case 'testimonial':\n        return <Star className=\"h-4 w-4\" />;\n      default:\n        return <FileText className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getTypeLabel = (type: string) => {\n    const labels = {\n      blog: isArabic ? \"مقالات\" : \"Articles\",\n      project: isArabic ? \"مشاريع\" : \"Projects\", \n      service: isArabic ? \"خدمات\" : \"Services\",\n      testimonial: isArabic ? \"تقييمات\" : \"Reviews\",\n      all: isArabic ? \"الكل\" : \"All\"\n    };\n    return labels[type as keyof typeof labels] || type;\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(isArabic ? 'ar-SA' : 'en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  const resultCounts = {\n    all: results.length,\n    blog: results.filter(r => r.type === 'blog').length,\n    project: results.filter(r => r.type === 'project').length,\n    service: results.filter(r => r.type === 'service').length,\n    testimonial: results.filter(r => r.type === 'testimonial').length,\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background to-secondary/20\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl md:text-4xl font-bold mb-4\">\n            {isArabic ? \"البحث في الموقع\" : \"Site Search\"}\n          </h1>\n          <div className=\"max-w-2xl mx-auto\">\n            <GlobalSearch \n              variant=\"full\" \n              placeholder={isArabic ? \"ابحث في المحتوى...\" : \"Search content...\"}\n            />\n          </div>\n        </div>\n\n        {query.length >= 2 && (\n          <>\n            {/* Search Info */}\n            <div className=\"flex items-center justify-between mb-6\">\n              <div>\n                <h2 className=\"text-xl font-semibold\">\n                  {isArabic ? \"نتائج البحث عن:\" : \"Search results for:\"} \"{query}\"\n                </h2>\n                <p className=\"text-muted-foreground\">\n                  {filteredResults.length} {isArabic ? \"نتيجة\" : \"results\"}\n                </p>\n              </div>\n              <Button\n                variant=\"outline\"\n                onClick={() => setIsArabic(!isArabic)}\n                data-testid=\"button-toggle-language\"\n              >\n                {isArabic ? \"English\" : \"العربية\"}\n              </Button>\n            </div>\n\n            {/* Filters and Tabs */}\n            <div className=\"mb-8\">\n              <Tabs value={activeTab} onValueChange={setActiveTab} className=\"mb-4\">\n                <TabsList className=\"grid grid-cols-5 w-full max-w-lg\">\n                  <TabsTrigger value=\"all\" className=\"flex items-center gap-2\">\n                    <Search className=\"h-4 w-4\" />\n                    <span className=\"hidden sm:inline\">{getTypeLabel(\"all\")}</span>\n                    {resultCounts.all > 0 && (\n                      <Badge variant=\"secondary\" className=\"ml-1 text-xs\">\n                        {resultCounts.all}\n                      </Badge>\n                    )}\n                  </TabsTrigger>\n                  <TabsTrigger value=\"blog\" className=\"flex items-center gap-2\">\n                    <FileText className=\"h-4 w-4\" />\n                    <span className=\"hidden sm:inline\">{getTypeLabel(\"blog\")}</span>\n                    {resultCounts.blog > 0 && (\n                      <Badge variant=\"secondary\" className=\"ml-1 text-xs\">\n                        {resultCounts.blog}\n                      </Badge>\n                    )}\n                  </TabsTrigger>\n                  <TabsTrigger value=\"project\" className=\"flex items-center gap-2\">\n                    <Folder className=\"h-4 w-4\" />\n                    <span className=\"hidden sm:inline\">{getTypeLabel(\"project\")}</span>\n                    {resultCounts.project > 0 && (\n                      <Badge variant=\"secondary\" className=\"ml-1 text-xs\">\n                        {resultCounts.project}\n                      </Badge>\n                    )}\n                  </TabsTrigger>\n                  <TabsTrigger value=\"service\" className=\"flex items-center gap-2\">\n                    <Hash className=\"h-4 w-4\" />\n                    <span className=\"hidden sm:inline\">{getTypeLabel(\"service\")}</span>\n                    {resultCounts.service > 0 && (\n                      <Badge variant=\"secondary\" className=\"ml-1 text-xs\">\n                        {resultCounts.service}\n                      </Badge>\n                    )}\n                  </TabsTrigger>\n                  <TabsTrigger value=\"testimonial\" className=\"flex items-center gap-2\">\n                    <Star className=\"h-4 w-4\" />\n                    <span className=\"hidden sm:inline\">{getTypeLabel(\"testimonial\")}</span>\n                    {resultCounts.testimonial > 0 && (\n                      <Badge variant=\"secondary\" className=\"ml-1 text-xs\">\n                        {resultCounts.testimonial}\n                      </Badge>\n                    )}\n                  </TabsTrigger>\n                </TabsList>\n              </Tabs>\n\n              {/* Advanced Filters */}\n              <div className=\"flex flex-wrap gap-4 items-center\">\n                <div className=\"flex items-center gap-2\">\n                  <Filter className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"text-sm font-medium\">\n                    {isArabic ? \"تصفية:\" : \"Filter:\"}\n                  </span>\n                </div>\n                \n                <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                  <SelectTrigger className=\"w-48\" data-testid=\"select-category-filter\">\n                    <SelectValue placeholder={isArabic ? \"التصنيف\" : \"Category\"} />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">{isArabic ? \"جميع التصنيفات\" : \"All categories\"}</SelectItem>\n                    {categories.map((category) => (\n                      <SelectItem key={category} value={category || \"\"}>\n                        {category}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n\n                <div className=\"flex items-center gap-2\">\n                  <SortAsc className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"text-sm font-medium\">\n                    {isArabic ? \"ترتيب:\" : \"Sort:\"}\n                  </span>\n                </div>\n                \n                <Select value={sortBy} onValueChange={setSortBy}>\n                  <SelectTrigger className=\"w-40\" data-testid=\"select-sort-by\">\n                    <SelectValue placeholder={isArabic ? \"الترتيب\" : \"Sort by\"} />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"relevance\">{isArabic ? \"الصلة\" : \"Relevance\"}</SelectItem>\n                    <SelectItem value=\"date\">{isArabic ? \"التاريخ\" : \"Date\"}</SelectItem>\n                    <SelectItem value=\"title\">{isArabic ? \"العنوان\" : \"Title\"}</SelectItem>\n                    <SelectItem value=\"rating\">{isArabic ? \"التقييم\" : \"Rating\"}</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            {/* Results */}\n            <div className=\"space-y-4\">\n              {isLoading ? (\n                <div className=\"grid grid-cols-1 gap-4\">\n                  {[1, 2, 3, 4, 5].map((i) => (\n                    <Card key={i} className=\"animate-pulse\">\n                      <CardContent className=\"p-6\">\n                        <div className=\"h-4 bg-gray-200 rounded mb-2 w-1/4\"></div>\n                        <div className=\"h-6 bg-gray-200 rounded mb-3 w-3/4\"></div>\n                        <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                        <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              ) : filteredResults.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <Search className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">\n                    {isArabic ? \"لا توجد نتائج\" : \"No results found\"}\n                  </h3>\n                  <p className=\"text-muted-foreground mb-6\">\n                    {isArabic \n                      ? \"جرب تغيير كلمات البحث أو الفلاتر\"\n                      : \"Try changing your search terms or filters\"\n                    }\n                  </p>\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => {\n                      setQuery(\"\");\n                      setActiveTab(\"all\");\n                      setCategoryFilter(\"all\");\n                      setSortBy(\"relevance\");\n                    }}\n                    data-testid=\"button-clear-search\"\n                  >\n                    {isArabic ? \"مسح البحث\" : \"Clear search\"}\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"grid grid-cols-1 gap-4\">\n                  {filteredResults.map((result) => (\n                    <Card key={result.id} className=\"group hover:shadow-lg transition-shadow\">\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-center gap-2 mb-3\">\n                              <div className=\"text-primary\">\n                                {getTypeIcon(result.type)}\n                              </div>\n                              <Badge variant=\"outline\">\n                                {getTypeLabel(result.type)}\n                              </Badge>\n                              {result.category && (\n                                <Badge variant=\"secondary\">\n                                  {isArabic ? result.category : result.categoryEn || result.category}\n                                </Badge>\n                              )}\n                              {result.rating && (\n                                <div className=\"flex items-center gap-1\">\n                                  <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                                  <span className=\"text-sm font-medium\">{result.rating}</span>\n                                </div>\n                              )}\n                            </div>\n\n                            <h3 className=\"text-xl font-semibold mb-2 group-hover:text-primary transition-colors\">\n                              <Link href={result.url}>\n                                {isArabic ? result.title : result.titleEn || result.title}\n                              </Link>\n                            </h3>\n\n                            {result.excerpt && (\n                              <p className=\"text-muted-foreground mb-4 line-clamp-2\">\n                                {isArabic ? result.excerpt : result.excerptEn || result.excerpt}\n                              </p>\n                            )}\n\n                            <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                              {result.publishedAt && (\n                                <span className=\"flex items-center gap-1\">\n                                  <Calendar className=\"h-4 w-4\" />\n                                  {formatDate(result.publishedAt)}\n                                </span>\n                              )}\n                              {result.clientName && (\n                                <span className=\"flex items-center gap-1\">\n                                  <User className=\"h-4 w-4\" />\n                                  {isArabic ? result.clientName : result.clientNameEn || result.clientName}\n                                </span>\n                              )}\n                              {result.tags && result.tags.length > 0 && (\n                                <div className=\"flex items-center gap-1\">\n                                  <Hash className=\"h-4 w-4\" />\n                                  <span>{(isArabic ? result.tags : result.tagsEn || result.tags).slice(0, 2).join(\", \")}</span>\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                          <Link href={result.url}>\n                            <ArrowRight className=\"h-5 w-5 text-muted-foreground group-hover:text-primary transition-colors ml-4 flex-shrink-0\" />\n                          </Link>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </div>\n          </>\n        )}\n\n        {/* No query state */}\n        {query.length < 2 && (\n          <div className=\"text-center py-12\">\n            <Search className=\"h-16 w-16 mx-auto text-muted-foreground mb-6\" />\n            <h2 className=\"text-2xl font-semibold mb-4\">\n              {isArabic ? \"ابحث في محتوى الموقع\" : \"Search site content\"}\n            </h2>\n            <p className=\"text-muted-foreground max-w-md mx-auto\">\n              {isArabic \n                ? \"ابحث في المقالات والمشاريع والخدمات والتقييمات للعثور على ما تحتاجه\"\n                : \"Search through articles, projects, services, and reviews to find what you need\"\n              }\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":17453},"client/src/pages/testimonials-page.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Star, Quote, Building, User, Filter } from \"lucide-react\";\n\ninterface Testimonial {\n  id: string;\n  clientName: string;\n  clientNameEn: string;\n  clientTitle: string;\n  clientTitleEn: string;\n  clientCompany: string;\n  clientCompanyEn: string;\n  testimonial: string;\n  testimonialEn: string;\n  rating: number;\n  clientImage: string;\n  projectId: string;\n  isPublished: boolean;\n  isFeatured: boolean;\n  order: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface Project {\n  id: string;\n  title: string;\n  titleEn: string;\n  category: string;\n}\n\nexport default function TestimonialsPage() {\n  const [isArabic, setIsArabic] = useState(true);\n  const [selectedProject, setSelectedProject] = useState<string>(\"all\");\n  const [ratingFilter, setRatingFilter] = useState<string>(\"all\");\n\n  const { data: testimonials = [], isLoading } = useQuery<Testimonial[]>({\n    queryKey: ['/api/testimonials'],\n  });\n\n  const { data: featuredTestimonials = [] } = useQuery<Testimonial[]>({\n    queryKey: ['/api/testimonials', { featured: true }],\n  });\n\n  const { data: projects = [] } = useQuery<Project[]>({\n    queryKey: ['/api/projects'],\n  });\n\n  // Filter testimonials\n  const filteredTestimonials = testimonials.filter(testimonial => {\n    const matchesProject = selectedProject === \"all\" || testimonial.projectId === selectedProject;\n    const matchesRating = ratingFilter === \"all\" || testimonial.rating === parseInt(ratingFilter);\n    return matchesProject && matchesRating;\n  });\n\n  const renderStars = (rating: number) => {\n    return Array.from({ length: 5 }, (_, i) => (\n      <Star\n        key={i}\n        className={`h-4 w-4 ${\n          i < rating ? \"fill-yellow-400 text-yellow-400\" : \"text-gray-300\"\n        }`}\n      />\n    ));\n  };\n\n  const getInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map(word => word.charAt(0))\n      .join(\"\")\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[1, 2, 3, 4, 5, 6].map((i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-3 mb-4\">\n                  <div className=\"w-12 h-12 bg-gray-200 rounded-full\"></div>\n                  <div className=\"flex-1\">\n                    <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-2/3\"></div>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"h-3 bg-gray-200 rounded\"></div>\n                  <div className=\"h-3 bg-gray-200 rounded\"></div>\n                  <div className=\"h-3 bg-gray-200 rounded w-3/4\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background to-secondary/20\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl md:text-5xl font-bold bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent mb-4\">\n            {isArabic ? \"آراء العملاء\" : \"Client Testimonials\"}\n          </h1>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n            {isArabic \n              ? \"اطلع على تجارب عملائنا الناجحة وآرائهم في خدماتنا\"\n              : \"Discover what our clients say about their successful experiences with our services\"\n            }\n          </p>\n        </div>\n\n        {/* Featured Testimonials */}\n        {featuredTestimonials.length > 0 && (\n          <section className=\"mb-12\">\n            <h2 className=\"text-2xl font-bold mb-6 flex items-center gap-2\">\n              <Star className=\"h-6 w-6 text-yellow-400 fill-yellow-400\" />\n              {isArabic ? \"التقييمات المميزة\" : \"Featured Reviews\"}\n            </h2>\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {featuredTestimonials.slice(0, 2).map((testimonial) => (\n                <Card key={testimonial.id} className=\"relative overflow-hidden border-primary/20\">\n                  <div className=\"absolute top-4 right-4\">\n                    <Quote className=\"h-8 w-8 text-primary/20\" />\n                  </div>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center gap-3 mb-4\">\n                      <Avatar className=\"h-16 w-16\">\n                        <AvatarImage \n                          src={testimonial.clientImage} \n                          alt={isArabic ? testimonial.clientName : testimonial.clientNameEn || testimonial.clientName} \n                        />\n                        <AvatarFallback className=\"bg-primary text-primary-foreground text-lg\">\n                          {getInitials(isArabic ? testimonial.clientName : testimonial.clientNameEn || testimonial.clientName)}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-semibold text-lg\">\n                          {isArabic ? testimonial.clientName : testimonial.clientNameEn || testimonial.clientName}\n                        </h3>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {isArabic ? testimonial.clientTitle : testimonial.clientTitleEn || testimonial.clientTitle}\n                        </p>\n                        {testimonial.clientCompany && (\n                          <div className=\"flex items-center gap-1 mt-1\">\n                            <Building className=\"h-3 w-3 text-muted-foreground\" />\n                            <span className=\"text-xs text-muted-foreground\">\n                              {isArabic ? testimonial.clientCompany : testimonial.clientCompanyEn || testimonial.clientCompany}\n                            </span>\n                          </div>\n                        )}\n                      </div>\n                      <Badge variant=\"outline\" className=\"bg-yellow-50 text-yellow-700 border-yellow-200\">\n                        {isArabic ? \"مميز\" : \"Featured\"}\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-2 mb-4\">\n                      <div className=\"flex\">{renderStars(testimonial.rating)}</div>\n                      <span className=\"text-sm font-medium\">({testimonial.rating}/5)</span>\n                    </div>\n\n                    <blockquote className=\"text-muted-foreground leading-relaxed\">\n                      \"{isArabic ? testimonial.testimonial : testimonial.testimonialEn || testimonial.testimonial}\"\n                    </blockquote>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </section>\n        )}\n\n        {/* Filters */}\n        <div className=\"mb-8 space-y-4 md:space-y-0 md:flex md:items-center md:gap-4\">\n          <div className=\"flex items-center gap-2\">\n            <Filter className=\"h-4 w-4 text-muted-foreground\" />\n            <span className=\"text-sm font-medium\">\n              {isArabic ? \"تصفية حسب:\" : \"Filter by:\"}\n            </span>\n          </div>\n          \n          <Select value={selectedProject} onValueChange={setSelectedProject}>\n            <SelectTrigger className=\"w-full md:w-48\" data-testid=\"select-project-filter\">\n              <SelectValue placeholder={isArabic ? \"اختر المشروع\" : \"Select project\"} />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">{isArabic ? \"جميع المشاريع\" : \"All projects\"}</SelectItem>\n              {projects.map((project) => (\n                <SelectItem key={project.id} value={project.id}>\n                  {isArabic ? project.title : project.titleEn || project.title}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n\n          <Select value={ratingFilter} onValueChange={setRatingFilter}>\n            <SelectTrigger className=\"w-full md:w-32\" data-testid=\"select-rating-filter\">\n              <SelectValue placeholder={isArabic ? \"التقييم\" : \"Rating\"} />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">{isArabic ? \"جميع التقييمات\" : \"All ratings\"}</SelectItem>\n              <SelectItem value=\"5\">5 ⭐</SelectItem>\n              <SelectItem value=\"4\">4 ⭐</SelectItem>\n              <SelectItem value=\"3\">3 ⭐</SelectItem>\n              <SelectItem value=\"2\">2 ⭐</SelectItem>\n              <SelectItem value=\"1\">1 ⭐</SelectItem>\n            </SelectContent>\n          </Select>\n\n          <Button\n            variant=\"outline\"\n            onClick={() => setIsArabic(!isArabic)}\n            data-testid=\"button-toggle-language\"\n          >\n            {isArabic ? \"English\" : \"العربية\"}\n          </Button>\n        </div>\n\n        {/* Testimonials Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredTestimonials.map((testimonial) => (\n            <Card key={testimonial.id} className=\"group hover:shadow-lg transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-3 mb-4\">\n                  <Avatar className=\"h-12 w-12\">\n                    <AvatarImage \n                      src={testimonial.clientImage} \n                      alt={isArabic ? testimonial.clientName : testimonial.clientNameEn || testimonial.clientName} \n                    />\n                    <AvatarFallback className=\"bg-secondary text-secondary-foreground\">\n                      {getInitials(isArabic ? testimonial.clientName : testimonial.clientNameEn || testimonial.clientName)}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className=\"flex-1 min-w-0\">\n                    <h3 className=\"font-semibold truncate\">\n                      {isArabic ? testimonial.clientName : testimonial.clientNameEn || testimonial.clientName}\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground truncate\">\n                      {isArabic ? testimonial.clientTitle : testimonial.clientTitleEn || testimonial.clientTitle}\n                    </p>\n                    {testimonial.clientCompany && (\n                      <div className=\"flex items-center gap-1 mt-1\">\n                        <Building className=\"h-3 w-3 text-muted-foreground flex-shrink-0\" />\n                        <span className=\"text-xs text-muted-foreground truncate\">\n                          {isArabic ? testimonial.clientCompany : testimonial.clientCompanyEn || testimonial.clientCompany}\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center gap-2 mb-4\">\n                  <div className=\"flex\">{renderStars(testimonial.rating)}</div>\n                  <span className=\"text-sm font-medium\">({testimonial.rating}/5)</span>\n                </div>\n\n                <blockquote className=\"text-muted-foreground text-sm leading-relaxed line-clamp-4\">\n                  \"{isArabic ? testimonial.testimonial : testimonial.testimonialEn || testimonial.testimonial}\"\n                </blockquote>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* No results */}\n        {filteredTestimonials.length === 0 && !isLoading && (\n          <div className=\"text-center py-12\">\n            <User className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">\n              {isArabic ? \"لا توجد تقييمات\" : \"No testimonials found\"}\n            </h3>\n            <p className=\"text-muted-foreground\">\n              {isArabic \n                ? \"جرب تغيير معايير التصفية\"\n                : \"Try changing your filter criteria\"\n              }\n            </p>\n          </div>\n        )}\n\n        {/* Call to Action */}\n        <div className=\"text-center mt-12 py-12 bg-gradient-to-r from-primary/10 to-secondary/10 rounded-lg\">\n          <h2 className=\"text-2xl font-bold mb-4\">\n            {isArabic ? \"جاهز لتكون العميل التالي؟\" : \"Ready to be our next client?\"}\n          </h2>\n          <p className=\"text-muted-foreground mb-6 max-w-md mx-auto\">\n            {isArabic \n              ? \"انضم إلى قائمة عملائنا الراضين واحصل على خدمات تقنية متميزة\"\n              : \"Join our list of satisfied clients and get exceptional technical services\"\n            }\n          </p>\n          <Button size=\"lg\" data-testid=\"button-contact-cta\">\n            {isArabic ? \"تواصل معنا الآن\" : \"Contact Us Now\"}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13677},"client/src/components/portfolio/image-gallery.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  ChevronLeft, \n  ChevronRight, \n  X, \n  ZoomIn, \n  Download,\n  Share2,\n  Maximize2\n} from \"lucide-react\";\n\ninterface GalleryImage {\n  id: string;\n  src: string;\n  title: string;\n  titleEn?: string;\n  description?: string;\n  descriptionEn?: string;\n  category?: string;\n  categoryEn?: string;\n  tags?: string[];\n  tagsEn?: string[];\n  projectId?: string;\n}\n\ninterface ImageGalleryProps {\n  images: GalleryImage[];\n  variant?: \"grid\" | \"carousel\" | \"masonry\";\n  isArabic?: boolean;\n  onImageClick?: (image: GalleryImage) => void;\n}\n\nexport default function ImageGallery({ \n  images, \n  variant = \"grid\", \n  isArabic = true,\n  onImageClick \n}: ImageGalleryProps) {\n  const [selectedImage, setSelectedImage] = useState<GalleryImage | null>(null);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n\n  const openLightbox = (image: GalleryImage, index: number) => {\n    setSelectedImage(image);\n    setCurrentIndex(index);\n    onImageClick?.(image);\n  };\n\n  const closeLightbox = () => {\n    setSelectedImage(null);\n    setIsFullscreen(false);\n  };\n\n  const goToPrevious = () => {\n    const newIndex = currentIndex > 0 ? currentIndex - 1 : images.length - 1;\n    setCurrentIndex(newIndex);\n    setSelectedImage(images[newIndex]);\n  };\n\n  const goToNext = () => {\n    const newIndex = currentIndex < images.length - 1 ? currentIndex + 1 : 0;\n    setCurrentIndex(newIndex);\n    setSelectedImage(images[newIndex]);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'ArrowLeft') goToPrevious();\n    if (e.key === 'ArrowRight') goToNext();\n    if (e.key === 'Escape') closeLightbox();\n  };\n\n  const shareImage = async (image: GalleryImage) => {\n    if (navigator.share) {\n      try {\n        await navigator.share({\n          title: isArabic ? image.title : image.titleEn || image.title,\n          text: isArabic ? image.description : image.descriptionEn || image.description,\n          url: image.src,\n        });\n      } catch (err) {\n        console.log('Error sharing:', err);\n      }\n    } else {\n      navigator.clipboard.writeText(image.src);\n    }\n  };\n\n  const downloadImage = (image: GalleryImage) => {\n    const link = document.createElement('a');\n    link.href = image.src;\n    link.download = isArabic ? image.title : image.titleEn || image.title;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  if (variant === \"masonry\") {\n    return (\n      <div className=\"columns-1 md:columns-2 lg:columns-3 xl:columns-4 gap-4 space-y-4\">\n        {images.map((image, index) => (\n          <Card \n            key={image.id} \n            className=\"break-inside-avoid mb-4 group cursor-pointer hover:shadow-lg transition-shadow\"\n            onClick={() => openLightbox(image, index)}\n          >\n            <div className=\"relative overflow-hidden\">\n              <img \n                src={image.src} \n                alt={isArabic ? image.title : image.titleEn || image.title}\n                className=\"w-full h-auto object-cover group-hover:scale-105 transition-transform duration-300\"\n                loading=\"lazy\"\n              />\n              <div className=\"absolute inset-0 bg-black/40 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center\">\n                <ZoomIn className=\"h-8 w-8 text-white\" />\n              </div>\n            </div>\n            <CardContent className=\"p-4\">\n              <h3 className=\"font-semibold text-sm mb-2 line-clamp-2\">\n                {isArabic ? image.title : image.titleEn || image.title}\n              </h3>\n              {image.description && (\n                <p className=\"text-xs text-muted-foreground line-clamp-2 mb-2\">\n                  {isArabic ? image.description : image.descriptionEn || image.description}\n                </p>\n              )}\n              {image.category && (\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  {isArabic ? image.category : image.categoryEn || image.category}\n                </Badge>\n              )}\n            </CardContent>\n          </Card>\n        ))}\n        \n        {/* Lightbox */}\n        {selectedImage && (\n          <Dialog open={!!selectedImage} onOpenChange={closeLightbox}>\n            <DialogContent \n              className={`max-w-7xl w-full h-full max-h-[90vh] p-0 bg-black ${isFullscreen ? 'fixed inset-0 max-w-none max-h-none' : ''}`}\n              onKeyDown={handleKeyDown}\n            >\n              <DialogTitle className=\"sr-only\">\n                {isArabic ? selectedImage.title : selectedImage.titleEn || selectedImage.title}\n              </DialogTitle>\n              \n              {/* Header */}\n              <div className=\"absolute top-0 left-0 right-0 z-10 bg-black/80 backdrop-blur-sm p-4 flex items-center justify-between\">\n                <div className=\"flex-1 text-white\">\n                  <h3 className=\"font-semibold\">\n                    {isArabic ? selectedImage.title : selectedImage.titleEn || selectedImage.title}\n                  </h3>\n                  <p className=\"text-sm text-white/80\">\n                    {currentIndex + 1} / {images.length}\n                  </p>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => shareImage(selectedImage)}\n                    className=\"text-white hover:bg-white/20\"\n                  >\n                    <Share2 className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => downloadImage(selectedImage)}\n                    className=\"text-white hover:bg-white/20\"\n                  >\n                    <Download className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => setIsFullscreen(!isFullscreen)}\n                    className=\"text-white hover:bg-white/20\"\n                  >\n                    <Maximize2 className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={closeLightbox}\n                    className=\"text-white hover:bg-white/20\"\n                  >\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n\n              {/* Image */}\n              <div className=\"relative w-full h-full flex items-center justify-center\">\n                <img \n                  src={selectedImage.src} \n                  alt={isArabic ? selectedImage.title : selectedImage.titleEn || selectedImage.title}\n                  className=\"max-w-full max-h-full object-contain\"\n                />\n                \n                {/* Navigation */}\n                {images.length > 1 && (\n                  <>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"lg\"\n                      onClick={goToPrevious}\n                      className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-white hover:bg-white/20 rounded-full h-12 w-12\"\n                    >\n                      <ChevronLeft className=\"h-6 w-6\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"lg\"\n                      onClick={goToNext}\n                      className=\"absolute right-4 top-1/2 transform -translate-y-1/2 text-white hover:bg-white/20 rounded-full h-12 w-12\"\n                    >\n                      <ChevronRight className=\"h-6 w-6\" />\n                    </Button>\n                  </>\n                )}\n              </div>\n\n              {/* Footer */}\n              {selectedImage.description && (\n                <div className=\"absolute bottom-0 left-0 right-0 bg-black/80 backdrop-blur-sm p-4 text-white\">\n                  <p className=\"text-sm\">\n                    {isArabic ? selectedImage.description : selectedImage.descriptionEn || selectedImage.description}\n                  </p>\n                  {selectedImage.tags && selectedImage.tags.length > 0 && (\n                    <div className=\"flex flex-wrap gap-2 mt-2\">\n                      {(isArabic ? selectedImage.tags : selectedImage.tagsEn || selectedImage.tags).map((tag, index) => (\n                        <Badge key={index} variant=\"outline\" className=\"text-white border-white/40\">\n                          {tag}\n                        </Badge>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              )}\n            </DialogContent>\n          </Dialog>\n        )}\n      </div>\n    );\n  }\n\n  if (variant === \"carousel\") {\n    return (\n      <div className=\"relative\">\n        <div className=\"overflow-hidden rounded-lg\">\n          <div \n            className=\"flex transition-transform duration-300 ease-in-out\"\n            style={{ transform: `translateX(-${currentIndex * 100}%)` }}\n          >\n            {images.map((image, index) => (\n              <div key={image.id} className=\"w-full flex-shrink-0\">\n                <div className=\"aspect-video relative group cursor-pointer\" onClick={() => openLightbox(image, index)}>\n                  <img \n                    src={image.src} \n                    alt={isArabic ? image.title : image.titleEn || image.title}\n                    className=\"w-full h-full object-cover\"\n                    loading=\"lazy\"\n                  />\n                  <div className=\"absolute inset-0 bg-black/40 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center\">\n                    <ZoomIn className=\"h-8 w-8 text-white\" />\n                  </div>\n                  <div className=\"absolute bottom-4 left-4 right-4 text-white\">\n                    <h3 className=\"font-semibold text-lg mb-1\">\n                      {isArabic ? image.title : image.titleEn || image.title}\n                    </h3>\n                    {image.description && (\n                      <p className=\"text-sm text-white/80 line-clamp-2\">\n                        {isArabic ? image.description : image.descriptionEn || image.description}\n                      </p>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Carousel Controls */}\n        {images.length > 1 && (\n          <>\n            <Button\n              variant=\"ghost\"\n              size=\"lg\"\n              onClick={goToPrevious}\n              className=\"absolute left-4 top-1/2 transform -translate-y-1/2 bg-black/50 text-white hover:bg-black/70 rounded-full h-12 w-12\"\n            >\n              <ChevronLeft className=\"h-6 w-6\" />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"lg\"\n              onClick={goToNext}\n              className=\"absolute right-4 top-1/2 transform -translate-y-1/2 bg-black/50 text-white hover:bg-black/70 rounded-full h-12 w-12\"\n            >\n              <ChevronRight className=\"h-6 w-6\" />\n            </Button>\n            \n            {/* Dots Indicator */}\n            <div className=\"flex justify-center gap-2 mt-4\">\n              {images.map((_, index) => (\n                <button\n                  key={index}\n                  onClick={() => {\n                    setCurrentIndex(index);\n                    setSelectedImage(images[index]);\n                  }}\n                  className={`w-2 h-2 rounded-full transition-colors ${\n                    index === currentIndex ? 'bg-primary' : 'bg-muted'\n                  }`}\n                />\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n    );\n  }\n\n  // Grid variant (default)\n  return (\n    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n      {images.map((image, index) => (\n        <Card \n          key={image.id} \n          className=\"group cursor-pointer hover:shadow-lg transition-shadow overflow-hidden\"\n          onClick={() => openLightbox(image, index)}\n        >\n          <div className=\"aspect-video relative overflow-hidden\">\n            <img \n              src={image.src} \n              alt={isArabic ? image.title : image.titleEn || image.title}\n              className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n              loading=\"lazy\"\n            />\n            <div className=\"absolute inset-0 bg-black/40 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center\">\n              <ZoomIn className=\"h-8 w-8 text-white\" />\n            </div>\n          </div>\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-semibold mb-2 line-clamp-1\">\n              {isArabic ? image.title : image.titleEn || image.title}\n            </h3>\n            {image.description && (\n              <p className=\"text-sm text-muted-foreground line-clamp-2 mb-3\">\n                {isArabic ? image.description : image.descriptionEn || image.description}\n              </p>\n            )}\n            <div className=\"flex items-center justify-between\">\n              {image.category && (\n                <Badge variant=\"secondary\">\n                  {isArabic ? image.category : image.categoryEn || image.category}\n                </Badge>\n              )}\n              {image.tags && image.tags.length > 0 && (\n                <div className=\"flex gap-1\">\n                  {(isArabic ? image.tags : image.tagsEn || image.tags).slice(0, 2).map((tag, tagIndex) => (\n                    <Badge key={tagIndex} variant=\"outline\" className=\"text-xs\">\n                      {tag}\n                    </Badge>\n                  ))}\n                  {image.tags.length > 2 && (\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      +{image.tags.length - 2}\n                    </Badge>\n                  )}\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n      \n      {/* Lightbox - Same as masonry variant */}\n      {selectedImage && (\n        <Dialog open={!!selectedImage} onOpenChange={closeLightbox}>\n          <DialogContent \n            className={`max-w-7xl w-full h-full max-h-[90vh] p-0 bg-black ${isFullscreen ? 'fixed inset-0 max-w-none max-h-none' : ''}`}\n            onKeyDown={handleKeyDown}\n          >\n            <DialogTitle className=\"sr-only\">\n              {isArabic ? selectedImage.title : selectedImage.titleEn || selectedImage.title}\n            </DialogTitle>\n            \n            {/* Header */}\n            <div className=\"absolute top-0 left-0 right-0 z-10 bg-black/80 backdrop-blur-sm p-4 flex items-center justify-between\">\n              <div className=\"flex-1 text-white\">\n                <h3 className=\"font-semibold\">\n                  {isArabic ? selectedImage.title : selectedImage.titleEn || selectedImage.title}\n                </h3>\n                <p className=\"text-sm text-white/80\">\n                  {currentIndex + 1} / {images.length}\n                </p>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => shareImage(selectedImage)}\n                  className=\"text-white hover:bg-white/20\"\n                >\n                  <Share2 className=\"h-4 w-4\" />\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => downloadImage(selectedImage)}\n                  className=\"text-white hover:bg-white/20\"\n                >\n                  <Download className=\"h-4 w-4\" />\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setIsFullscreen(!isFullscreen)}\n                  className=\"text-white hover:bg-white/20\"\n                >\n                  <Maximize2 className=\"h-4 w-4\" />\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={closeLightbox}\n                  className=\"text-white hover:bg-white/20\"\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n\n            {/* Image */}\n            <div className=\"relative w-full h-full flex items-center justify-center\">\n              <img \n                src={selectedImage.src} \n                alt={isArabic ? selectedImage.title : selectedImage.titleEn || selectedImage.title}\n                className=\"max-w-full max-h-full object-contain\"\n              />\n              \n              {/* Navigation */}\n              {images.length > 1 && (\n                <>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"lg\"\n                    onClick={goToPrevious}\n                    className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-white hover:bg-white/20 rounded-full h-12 w-12\"\n                  >\n                    <ChevronLeft className=\"h-6 w-6\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"lg\"\n                    onClick={goToNext}\n                    className=\"absolute right-4 top-1/2 transform -translate-y-1/2 text-white hover:bg-white/20 rounded-full h-12 w-12\"\n                  >\n                    <ChevronRight className=\"h-6 w-6\" />\n                  </Button>\n                </>\n              )}\n            </div>\n\n            {/* Footer */}\n            {selectedImage.description && (\n              <div className=\"absolute bottom-0 left-0 right-0 bg-black/80 backdrop-blur-sm p-4 text-white\">\n                <p className=\"text-sm\">\n                  {isArabic ? selectedImage.description : selectedImage.descriptionEn || selectedImage.description}\n                </p>\n                {selectedImage.tags && selectedImage.tags.length > 0 && (\n                  <div className=\"flex flex-wrap gap-2 mt-2\">\n                    {(isArabic ? selectedImage.tags : selectedImage.tagsEn || selectedImage.tags).map((tag, index) => (\n                      <Badge key={index} variant=\"outline\" className=\"text-white border-white/40\">\n                        {tag}\n                      </Badge>\n                    ))}\n                  </div>\n                )}\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n      )}\n    </div>\n  );\n}","size_bytes":19116}},"version":1}